
dualoptiboot-asf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000398  20000068  00002b1c  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000400  00002eb4  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002eb4b  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003da4  00000000  00000000  0004ec34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010665  00000000  00000000  000529d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d28  00000000  00000000  0006303d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002688  00000000  00000000  00063d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a201  00000000  00000000  000663ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011afb  00000000  00000000  000805ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a84e  00000000  00000000  000920e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000024dc  00000000  00000000  0011c938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 24 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .$. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 09 0d 00 00 29 01 00 00     )...).......)...
      5c:	e1 1c 00 00 29 01 00 00 29 01 00 00 29 01 00 00     ....)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 00 00 00 00 00 00 00 00     )...)...........
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002ab4 	.word	0x00002ab4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002ab4 	.word	0x00002ab4
     10c:	00002ab4 	.word	0x00002ab4
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	0000050d 	.word	0x0000050d
     124:	000028c5 	.word	0x000028c5

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
        if (pSrc != pDest) {
     12c:	4821      	ldr	r0, [pc, #132]	; (1b4 <Reset_Handler+0x88>)
     12e:	4922      	ldr	r1, [pc, #136]	; (1b8 <Reset_Handler+0x8c>)
{
     130:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     132:	4288      	cmp	r0, r1
     134:	d004      	beq.n	140 <Reset_Handler+0x14>
     136:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     138:	4c20      	ldr	r4, [pc, #128]	; (1bc <Reset_Handler+0x90>)
     13a:	18ca      	adds	r2, r1, r3
     13c:	42a2      	cmp	r2, r4
     13e:	d332      	bcc.n	1a6 <Reset_Handler+0x7a>
                *pDest++ = 0;
     140:	2100      	movs	r1, #0
     142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4a1f      	ldr	r2, [pc, #124]	; (1c4 <Reset_Handler+0x98>)
     146:	4293      	cmp	r3, r2
     148:	d331      	bcc.n	1ae <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14a:	21ff      	movs	r1, #255	; 0xff
     14c:	4b1e      	ldr	r3, [pc, #120]	; (1c8 <Reset_Handler+0x9c>)
     14e:	4a1f      	ldr	r2, [pc, #124]	; (1cc <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1
     152:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     154:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	250c      	movs	r5, #12
     158:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     15a:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	4b1c      	ldr	r3, [pc, #112]	; (1d0 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	481d      	ldr	r0, [pc, #116]	; (1d4 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     160:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     162:	78c3      	ldrb	r3, [r0, #3]
     164:	39fc      	subs	r1, #252	; 0xfc
     166:	438b      	bics	r3, r1
     168:	4313      	orrs	r3, r2
     16a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     16c:	78c3      	ldrb	r3, [r0, #3]
     16e:	43ab      	bics	r3, r5
     170:	4323      	orrs	r3, r4
     172:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b18      	ldr	r3, [pc, #96]	; (1d8 <Reset_Handler+0xac>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	43b0      	bics	r0, r6
     17a:	0006      	movs	r6, r0
     17c:	2020      	movs	r0, #32
     17e:	4330      	orrs	r0, r6
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b98      	ldrb	r0, [r3, #14]
     184:	43a8      	bics	r0, r5
     186:	4304      	orrs	r4, r0
     188:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b98      	ldrb	r0, [r3, #14]
     18c:	4388      	bics	r0, r1
     18e:	4302      	orrs	r2, r0
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	2380      	movs	r3, #128	; 0x80
     194:	4a11      	ldr	r2, [pc, #68]	; (1dc <Reset_Handler+0xb0>)
     196:	6851      	ldr	r1, [r2, #4]
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b10      	ldr	r3, [pc, #64]	; (1e0 <Reset_Handler+0xb4>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b10      	ldr	r3, [pc, #64]	; (1e4 <Reset_Handler+0xb8>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     1a6:	58c5      	ldr	r5, [r0, r3]
     1a8:	3304      	adds	r3, #4
     1aa:	6015      	str	r5, [r2, #0]
     1ac:	e7c5      	b.n	13a <Reset_Handler+0xe>
                *pDest++ = 0;
     1ae:	c302      	stmia	r3!, {r1}
     1b0:	e7c9      	b.n	146 <Reset_Handler+0x1a>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	00002ab4 	.word	0x00002ab4
     1b8:	20000000 	.word	0x20000000
     1bc:	20000068 	.word	0x20000068
     1c0:	20000068 	.word	0x20000068
     1c4:	20000400 	.word	0x20000400
     1c8:	00000000 	.word	0x00000000
     1cc:	e000ed00 	.word	0xe000ed00
     1d0:	410070fc 	.word	0x410070fc
     1d4:	41005000 	.word	0x41005000
     1d8:	41004800 	.word	0x41004800
     1dc:	41004000 	.word	0x41004000
     1e0:	0000290d 	.word	0x0000290d
     1e4:	00001ead 	.word	0x00001ead

000001e8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     1e8:	b570      	push	{r4, r5, r6, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);
     1ea:	241f      	movs	r4, #31
	uint8_t port = GPIO_PORT(gpio);
     1ec:	0942      	lsrs	r2, r0, #5
	uint8_t pin  = GPIO_PIN(gpio);
     1ee:	b2c0      	uxtb	r0, r0
     1f0:	4004      	ands	r4, r0
     1f2:	23ff      	movs	r3, #255	; 0xff

	if (function == GPIO_PIN_FUNCTION_OFF) {
     1f4:	1c4d      	adds	r5, r1, #1
     1f6:	d109      	bne.n	20c <_gpio_set_pin_function+0x24>
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1f8:	401a      	ands	r2, r3
     1fa:	01d2      	lsls	r2, r2, #7
     1fc:	4b14      	ldr	r3, [pc, #80]	; (250 <_gpio_set_pin_function+0x68>)
     1fe:	18a2      	adds	r2, r4, r2
     200:	18d2      	adds	r2, r2, r3
     202:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     204:	3102      	adds	r1, #2
     206:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     208:	7013      	strb	r3, [r2, #0]
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     20a:	bd70      	pop	{r4, r5, r6, pc}
	tmp &= ~PORT_PINCFG_PMUXEN;
     20c:	2501      	movs	r5, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     20e:	4013      	ands	r3, r2
     210:	4a10      	ldr	r2, [pc, #64]	; (254 <_gpio_set_pin_function+0x6c>)
     212:	01db      	lsls	r3, r3, #7
     214:	189b      	adds	r3, r3, r2
     216:	191e      	adds	r6, r3, r4
     218:	3640      	adds	r6, #64	; 0x40
     21a:	7832      	ldrb	r2, [r6, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     21c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     21e:	432a      	orrs	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     220:	7032      	strb	r2, [r6, #0]
     222:	0862      	lsrs	r2, r4, #1
		if (pin & 1) {
     224:	4228      	tst	r0, r5
     226:	d009      	beq.n	23c <_gpio_set_pin_function+0x54>
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     228:	200f      	movs	r0, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     22a:	189a      	adds	r2, r3, r2
     22c:	3230      	adds	r2, #48	; 0x30
     22e:	7813      	ldrb	r3, [r2, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     230:	0109      	lsls	r1, r1, #4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     232:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     234:	4319      	orrs	r1, r3
     236:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     238:	7011      	strb	r1, [r2, #0]
     23a:	e7e6      	b.n	20a <_gpio_set_pin_function+0x22>
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     23c:	200f      	movs	r0, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     23e:	189b      	adds	r3, r3, r2
     240:	3330      	adds	r3, #48	; 0x30
     242:	781a      	ldrb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     244:	4001      	ands	r1, r0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     246:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     248:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     24a:	7019      	strb	r1, [r3, #0]
}
     24c:	e7dd      	b.n	20a <_gpio_set_pin_function+0x22>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	41004440 	.word	0x41004440
     254:	41004400 	.word	0x41004400

00000258 <_gpio_set_direction>:
{
     258:	b510      	push	{r4, lr}
	switch (direction) {
     25a:	2a01      	cmp	r2, #1
     25c:	d019      	beq.n	292 <_gpio_set_direction+0x3a>
     25e:	2a00      	cmp	r2, #0
     260:	d007      	beq.n	272 <_gpio_set_direction+0x1a>
     262:	2a02      	cmp	r2, #2
     264:	d025      	beq.n	2b2 <_gpio_set_direction+0x5a>
		ASSERT(false);
     266:	2245      	movs	r2, #69	; 0x45
     268:	4915      	ldr	r1, [pc, #84]	; (2c0 <_gpio_set_direction+0x68>)
     26a:	2000      	movs	r0, #0
     26c:	4b15      	ldr	r3, [pc, #84]	; (2c4 <_gpio_set_direction+0x6c>)
     26e:	4798      	blx	r3
}
     270:	e01e      	b.n	2b0 <_gpio_set_direction+0x58>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     272:	23c0      	movs	r3, #192	; 0xc0
     274:	01c0      	lsls	r0, r0, #7
     276:	05db      	lsls	r3, r3, #23
     278:	18c3      	adds	r3, r0, r3
     27a:	6059      	str	r1, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     27c:	2380      	movs	r3, #128	; 0x80
     27e:	b28a      	uxth	r2, r1
     280:	05db      	lsls	r3, r3, #23
     282:	4313      	orrs	r3, r2

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     284:	4a10      	ldr	r2, [pc, #64]	; (2c8 <_gpio_set_direction+0x70>)
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     286:	0c09      	lsrs	r1, r1, #16
     288:	1880      	adds	r0, r0, r2
     28a:	6283      	str	r3, [r0, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
     28c:	23c0      	movs	r3, #192	; 0xc0
     28e:	061b      	lsls	r3, r3, #24
     290:	e00c      	b.n	2ac <_gpio_set_direction+0x54>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     292:	23c0      	movs	r3, #192	; 0xc0
     294:	01c0      	lsls	r0, r0, #7
     296:	05db      	lsls	r3, r3, #23
     298:	18c3      	adds	r3, r0, r3
     29a:	6059      	str	r1, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     29c:	4b0b      	ldr	r3, [pc, #44]	; (2cc <_gpio_set_direction+0x74>)
     29e:	b28a      	uxth	r2, r1
     2a0:	4313      	orrs	r3, r2
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2a2:	4a09      	ldr	r2, [pc, #36]	; (2c8 <_gpio_set_direction+0x70>)
		                                | ((mask & 0xffff0000) >> 16));
     2a4:	0c09      	lsrs	r1, r1, #16
     2a6:	1880      	adds	r0, r0, r2
     2a8:	6283      	str	r3, [r0, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
     2aa:	4b09      	ldr	r3, [pc, #36]	; (2d0 <_gpio_set_direction+0x78>)
		hri_port_write_WRCONFIG_reg(
     2ac:	4319      	orrs	r1, r3
     2ae:	6281      	str	r1, [r0, #40]	; 0x28
}
     2b0:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2b2:	23c0      	movs	r3, #192	; 0xc0
     2b4:	01c0      	lsls	r0, r0, #7
     2b6:	05db      	lsls	r3, r3, #23
     2b8:	18c3      	adds	r3, r0, r3
     2ba:	6099      	str	r1, [r3, #8]
     2bc:	e7de      	b.n	27c <_gpio_set_direction+0x24>
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	00002976 	.word	0x00002976
     2c4:	00000bdd 	.word	0x00000bdd
     2c8:	41004400 	.word	0x41004400
     2cc:	40020000 	.word	0x40020000
     2d0:	c0020000 	.word	0xc0020000

000002d4 <_gpio_set_pin_pull_mode.constprop.2>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2d4:	2204      	movs	r2, #4
     2d6:	01c0      	lsls	r0, r0, #7
     2d8:	4b03      	ldr	r3, [pc, #12]	; (2e8 <_gpio_set_pin_pull_mode.constprop.2+0x14>)
     2da:	1809      	adds	r1, r1, r0
     2dc:	18c9      	adds	r1, r1, r3
     2de:	780b      	ldrb	r3, [r1, #0]
     2e0:	4393      	bics	r3, r2
     2e2:	700b      	strb	r3, [r1, #0]
}
     2e4:	4770      	bx	lr
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	41004440 	.word	0x41004440

000002ec <INTERNAL_FLASH_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     2ec:	2304      	movs	r3, #4
     2ee:	4a02      	ldr	r2, [pc, #8]	; (2f8 <INTERNAL_FLASH_CLOCK_init+0xc>)
     2f0:	69d1      	ldr	r1, [r2, #28]
     2f2:	430b      	orrs	r3, r1
     2f4:	61d3      	str	r3, [r2, #28]

void INTERNAL_FLASH_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBB, NVMCTRL);
}
     2f6:	4770      	bx	lr
     2f8:	40000400 	.word	0x40000400

000002fc <INTERNAL_FLASH_init>:

void INTERNAL_FLASH_init(void)
{
     2fc:	b510      	push	{r4, lr}
	INTERNAL_FLASH_CLOCK_init();
     2fe:	4b03      	ldr	r3, [pc, #12]	; (30c <INTERNAL_FLASH_init+0x10>)
     300:	4798      	blx	r3
	flash_init(&INTERNAL_FLASH, NVMCTRL);
     302:	4903      	ldr	r1, [pc, #12]	; (310 <INTERNAL_FLASH_init+0x14>)
     304:	4803      	ldr	r0, [pc, #12]	; (314 <INTERNAL_FLASH_init+0x18>)
     306:	4b04      	ldr	r3, [pc, #16]	; (318 <INTERNAL_FLASH_init+0x1c>)
     308:	4798      	blx	r3
}
     30a:	bd10      	pop	{r4, pc}
     30c:	000002ed 	.word	0x000002ed
     310:	41004000 	.word	0x41004000
     314:	200003cc 	.word	0x200003cc
     318:	000005a9 	.word	0x000005a9

0000031c <M0_SPI_FLASH_PORT_init>:
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     31c:	2180      	movs	r1, #128	; 0x80

void M0_SPI_FLASH_PORT_init(void)
{
     31e:	b570      	push	{r4, r5, r6, lr}
     320:	2201      	movs	r2, #1
     322:	4d10      	ldr	r5, [pc, #64]	; (364 <M0_SPI_FLASH_PORT_init+0x48>)
     324:	0149      	lsls	r1, r1, #5
     326:	2000      	movs	r0, #0
     328:	47a8      	blx	r5
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <M0_SPI_FLASH_PORT_init+0x4c>)
     32c:	210c      	movs	r1, #12
     32e:	2000      	movs	r0, #0
     330:	4798      	blx	r3
	_gpio_set_pin_function(pin, function);
     332:	4c0e      	ldr	r4, [pc, #56]	; (36c <M0_SPI_FLASH_PORT_init+0x50>)
     334:	490e      	ldr	r1, [pc, #56]	; (370 <M0_SPI_FLASH_PORT_init+0x54>)
     336:	200c      	movs	r0, #12
     338:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     33a:	2180      	movs	r1, #128	; 0x80
     33c:	4e0d      	ldr	r6, [pc, #52]	; (374 <M0_SPI_FLASH_PORT_init+0x58>)
     33e:	00c9      	lsls	r1, r1, #3
     340:	6031      	str	r1, [r6, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     342:	2202      	movs	r2, #2
     344:	2001      	movs	r0, #1
     346:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
     348:	490b      	ldr	r1, [pc, #44]	; (378 <M0_SPI_FLASH_PORT_init+0x5c>)
     34a:	202a      	movs	r0, #42	; 0x2a
     34c:	47a0      	blx	r4
     34e:	2180      	movs	r1, #128	; 0x80
     350:	0109      	lsls	r1, r1, #4
     352:	6031      	str	r1, [r6, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     354:	2202      	movs	r2, #2
     356:	2001      	movs	r0, #1
     358:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
     35a:	4908      	ldr	r1, [pc, #32]	; (37c <M0_SPI_FLASH_PORT_init+0x60>)
     35c:	202b      	movs	r0, #43	; 0x2b
     35e:	47a0      	blx	r4

	// Set pin direction to output
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
     360:	bd70      	pop	{r4, r5, r6, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	00000259 	.word	0x00000259
     368:	000002d5 	.word	0x000002d5
     36c:	000001e9 	.word	0x000001e9
     370:	000c0003 	.word	0x000c0003
     374:	60000094 	.word	0x60000094
     378:	002a0003 	.word	0x002a0003
     37c:	002b0003 	.word	0x002b0003

00000380 <M0_SPI_FLASH_CLOCK_init>:
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     380:	2340      	movs	r3, #64	; 0x40
     382:	4a04      	ldr	r2, [pc, #16]	; (394 <M0_SPI_FLASH_CLOCK_init+0x14>)
     384:	6a11      	ldr	r1, [r2, #32]
     386:	430b      	orrs	r3, r1
     388:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     38a:	4a03      	ldr	r2, [pc, #12]	; (398 <M0_SPI_FLASH_CLOCK_init+0x18>)
     38c:	4b03      	ldr	r3, [pc, #12]	; (39c <M0_SPI_FLASH_CLOCK_init+0x1c>)
     38e:	805a      	strh	r2, [r3, #2]

void M0_SPI_FLASH_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
}
     390:	4770      	bx	lr
     392:	46c0      	nop			; (mov r8, r8)
     394:	40000400 	.word	0x40000400
     398:	00004018 	.word	0x00004018
     39c:	40000c00 	.word	0x40000c00

000003a0 <M0_SPI_FLASH_init>:

void M0_SPI_FLASH_init(void)
{
     3a0:	b510      	push	{r4, lr}
	M0_SPI_FLASH_CLOCK_init();
     3a2:	4b04      	ldr	r3, [pc, #16]	; (3b4 <M0_SPI_FLASH_init+0x14>)
     3a4:	4798      	blx	r3
	spi_m_sync_init(&M0_SPI_FLASH, SERCOM4);
     3a6:	4904      	ldr	r1, [pc, #16]	; (3b8 <M0_SPI_FLASH_init+0x18>)
     3a8:	4b04      	ldr	r3, [pc, #16]	; (3bc <M0_SPI_FLASH_init+0x1c>)
     3aa:	4805      	ldr	r0, [pc, #20]	; (3c0 <M0_SPI_FLASH_init+0x20>)
     3ac:	4798      	blx	r3
	M0_SPI_FLASH_PORT_init();
     3ae:	4b05      	ldr	r3, [pc, #20]	; (3c4 <M0_SPI_FLASH_init+0x24>)
     3b0:	4798      	blx	r3
}
     3b2:	bd10      	pop	{r4, pc}
     3b4:	00000381 	.word	0x00000381
     3b8:	42001800 	.word	0x42001800
     3bc:	000005ed 	.word	0x000005ed
     3c0:	200003e8 	.word	0x200003e8
     3c4:	0000031d 	.word	0x0000031d

000003c8 <RED_BOARD_SPI_FLASH_PORT_init>:
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     3c8:	2201      	movs	r2, #1

void RED_BOARD_SPI_FLASH_PORT_init(void)
{
     3ca:	b570      	push	{r4, r5, r6, lr}
     3cc:	0010      	movs	r0, r2
     3ce:	4d0f      	ldr	r5, [pc, #60]	; (40c <RED_BOARD_SPI_FLASH_PORT_init+0x44>)
     3d0:	2108      	movs	r1, #8
     3d2:	47a8      	blx	r5
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     3d4:	4b0e      	ldr	r3, [pc, #56]	; (410 <RED_BOARD_SPI_FLASH_PORT_init+0x48>)
     3d6:	2103      	movs	r1, #3
     3d8:	2001      	movs	r0, #1
     3da:	4798      	blx	r3
	_gpio_set_pin_function(pin, function);
     3dc:	4c0d      	ldr	r4, [pc, #52]	; (414 <RED_BOARD_SPI_FLASH_PORT_init+0x4c>)
     3de:	490e      	ldr	r1, [pc, #56]	; (418 <RED_BOARD_SPI_FLASH_PORT_init+0x50>)
     3e0:	2023      	movs	r0, #35	; 0x23
     3e2:	47a0      	blx	r4
     3e4:	2180      	movs	r1, #128	; 0x80
     3e6:	4e0d      	ldr	r6, [pc, #52]	; (41c <RED_BOARD_SPI_FLASH_PORT_init+0x54>)
     3e8:	03c9      	lsls	r1, r1, #15
     3ea:	6031      	str	r1, [r6, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     3ec:	2202      	movs	r2, #2
     3ee:	2001      	movs	r0, #1
     3f0:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
     3f2:	490b      	ldr	r1, [pc, #44]	; (420 <RED_BOARD_SPI_FLASH_PORT_init+0x58>)
     3f4:	2036      	movs	r0, #54	; 0x36
     3f6:	47a0      	blx	r4
     3f8:	2180      	movs	r1, #128	; 0x80
     3fa:	0409      	lsls	r1, r1, #16
     3fc:	6031      	str	r1, [r6, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     3fe:	2202      	movs	r2, #2
     400:	2001      	movs	r0, #1
     402:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
     404:	4907      	ldr	r1, [pc, #28]	; (424 <RED_BOARD_SPI_FLASH_PORT_init+0x5c>)
     406:	2037      	movs	r0, #55	; 0x37
     408:	47a0      	blx	r4

	// Set pin direction to output
	gpio_set_pin_direction(PB23, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PB23, PINMUX_PB23D_SERCOM5_PAD3);
}
     40a:	bd70      	pop	{r4, r5, r6, pc}
     40c:	00000259 	.word	0x00000259
     410:	000002d5 	.word	0x000002d5
     414:	000001e9 	.word	0x000001e9
     418:	00230003 	.word	0x00230003
     41c:	60000094 	.word	0x60000094
     420:	00360003 	.word	0x00360003
     424:	00370003 	.word	0x00370003

00000428 <RED_BOARD_SPI_FLASH_CLOCK_init>:
     428:	2380      	movs	r3, #128	; 0x80
     42a:	4a04      	ldr	r2, [pc, #16]	; (43c <RED_BOARD_SPI_FLASH_CLOCK_init+0x14>)
     42c:	6a11      	ldr	r1, [r2, #32]
     42e:	430b      	orrs	r3, r1
     430:	6213      	str	r3, [r2, #32]
     432:	4a03      	ldr	r2, [pc, #12]	; (440 <RED_BOARD_SPI_FLASH_CLOCK_init+0x18>)
     434:	4b03      	ldr	r3, [pc, #12]	; (444 <RED_BOARD_SPI_FLASH_CLOCK_init+0x1c>)
     436:	805a      	strh	r2, [r3, #2]

void RED_BOARD_SPI_FLASH_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     438:	4770      	bx	lr
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	40000400 	.word	0x40000400
     440:	00004019 	.word	0x00004019
     444:	40000c00 	.word	0x40000c00

00000448 <RED_BOARD_SPI_FLASH_init>:

void RED_BOARD_SPI_FLASH_init(void)
{
     448:	b510      	push	{r4, lr}
	RED_BOARD_SPI_FLASH_CLOCK_init();
     44a:	4b04      	ldr	r3, [pc, #16]	; (45c <RED_BOARD_SPI_FLASH_init+0x14>)
     44c:	4798      	blx	r3
	spi_m_sync_init(&RED_BOARD_SPI_FLASH, SERCOM5);
     44e:	4904      	ldr	r1, [pc, #16]	; (460 <RED_BOARD_SPI_FLASH_init+0x18>)
     450:	4b04      	ldr	r3, [pc, #16]	; (464 <RED_BOARD_SPI_FLASH_init+0x1c>)
     452:	4805      	ldr	r0, [pc, #20]	; (468 <RED_BOARD_SPI_FLASH_init+0x20>)
     454:	4798      	blx	r3
	RED_BOARD_SPI_FLASH_PORT_init();
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <RED_BOARD_SPI_FLASH_init+0x24>)
     458:	4798      	blx	r3
}
     45a:	bd10      	pop	{r4, pc}
     45c:	00000429 	.word	0x00000429
     460:	42001c00 	.word	0x42001c00
     464:	000005ed 	.word	0x000005ed
     468:	200003b4 	.word	0x200003b4
     46c:	000003c9 	.word	0x000003c9

00000470 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     472:	2480      	movs	r4, #128	; 0x80
     474:	26c0      	movs	r6, #192	; 0xc0
     476:	0464      	lsls	r4, r4, #17
     478:	2202      	movs	r2, #2
     47a:	4f0e      	ldr	r7, [pc, #56]	; (4b4 <USB_DEVICE_INSTANCE_PORT_init+0x44>)
     47c:	05f6      	lsls	r6, r6, #23
     47e:	0021      	movs	r1, r4
     480:	2000      	movs	r0, #0
     482:	47b8      	blx	r7
     484:	6174      	str	r4, [r6, #20]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     486:	4d0c      	ldr	r5, [pc, #48]	; (4b8 <USB_DEVICE_INSTANCE_PORT_init+0x48>)
     488:	2118      	movs	r1, #24
     48a:	2000      	movs	r0, #0
     48c:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
     48e:	4c0b      	ldr	r4, [pc, #44]	; (4bc <USB_DEVICE_INSTANCE_PORT_init+0x4c>)
     490:	490b      	ldr	r1, [pc, #44]	; (4c0 <USB_DEVICE_INSTANCE_PORT_init+0x50>)
     492:	2018      	movs	r0, #24
     494:	47a0      	blx	r4
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     496:	2180      	movs	r1, #128	; 0x80
     498:	2202      	movs	r2, #2
     49a:	0489      	lsls	r1, r1, #18
     49c:	2000      	movs	r0, #0
     49e:	47b8      	blx	r7
     4a0:	2380      	movs	r3, #128	; 0x80
     4a2:	049b      	lsls	r3, r3, #18
     4a4:	6173      	str	r3, [r6, #20]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     4a6:	2119      	movs	r1, #25
     4a8:	2000      	movs	r0, #0
     4aa:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
     4ac:	4905      	ldr	r1, [pc, #20]	; (4c4 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
     4ae:	2019      	movs	r0, #25
     4b0:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4b4:	00000259 	.word	0x00000259
     4b8:	000002d5 	.word	0x000002d5
     4bc:	000001e9 	.word	0x000001e9
     4c0:	00180006 	.word	0x00180006
     4c4:	00190006 	.word	0x00190006

000004c8 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     4c8:	2220      	movs	r2, #32
     4ca:	4b06      	ldr	r3, [pc, #24]	; (4e4 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     4cc:	69d9      	ldr	r1, [r3, #28]
     4ce:	430a      	orrs	r2, r1
     4d0:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     4d2:	2240      	movs	r2, #64	; 0x40
     4d4:	6959      	ldr	r1, [r3, #20]
     4d6:	430a      	orrs	r2, r1
     4d8:	615a      	str	r2, [r3, #20]
     4da:	4a03      	ldr	r2, [pc, #12]	; (4e8 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     4dc:	4b03      	ldr	r3, [pc, #12]	; (4ec <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     4de:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     4e0:	4770      	bx	lr
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	40000400 	.word	0x40000400
     4e8:	00004006 	.word	0x00004006
     4ec:	40000c00 	.word	0x40000c00

000004f0 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     4f0:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     4f2:	4b03      	ldr	r3, [pc, #12]	; (500 <USB_DEVICE_INSTANCE_init+0x10>)
     4f4:	4798      	blx	r3
	usb_d_init();
     4f6:	4b03      	ldr	r3, [pc, #12]	; (504 <USB_DEVICE_INSTANCE_init+0x14>)
     4f8:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     4fa:	4b03      	ldr	r3, [pc, #12]	; (508 <USB_DEVICE_INSTANCE_init+0x18>)
     4fc:	4798      	blx	r3
}
     4fe:	bd10      	pop	{r4, pc}
     500:	000004c9 	.word	0x000004c9
     504:	000008d1 	.word	0x000008d1
     508:	00000471 	.word	0x00000471

0000050c <system_init>:

void system_init(void)
{
     50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     50e:	4b12      	ldr	r3, [pc, #72]	; (558 <system_init+0x4c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     510:	27c0      	movs	r7, #192	; 0xc0
     512:	4798      	blx	r3
     514:	2110      	movs	r1, #16
     516:	05ff      	lsls	r7, r7, #23
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     518:	4c10      	ldr	r4, [pc, #64]	; (55c <system_init+0x50>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     51a:	61b9      	str	r1, [r7, #24]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     51c:	4e10      	ldr	r6, [pc, #64]	; (560 <system_init+0x54>)
     51e:	2202      	movs	r2, #2
     520:	2000      	movs	r0, #0
     522:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     524:	0022      	movs	r2, r4
	tmp &= ~PORT_PINCFG_PMUXEN;
     526:	2501      	movs	r5, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     528:	2180      	movs	r1, #128	; 0x80
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52a:	3244      	adds	r2, #68	; 0x44
     52c:	7813      	ldrb	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     52e:	0189      	lsls	r1, r1, #6
	tmp &= ~PORT_PINCFG_PMUXEN;
     530:	43ab      	bics	r3, r5
     532:	2000      	movs	r0, #0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     534:	7013      	strb	r3, [r2, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     536:	344d      	adds	r4, #77	; 0x4d
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     538:	61b9      	str	r1, [r7, #24]
     53a:	2202      	movs	r2, #2
     53c:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53e:	7823      	ldrb	r3, [r4, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	43ab      	bics	r3, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     542:	7023      	strb	r3, [r4, #0]
	// Set pin direction to output
	gpio_set_pin_direction(RED_BOARD_SPI_FLASH_CS, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(RED_BOARD_SPI_FLASH_CS, GPIO_PIN_FUNCTION_OFF);

	INTERNAL_FLASH_init();
     544:	4b07      	ldr	r3, [pc, #28]	; (564 <system_init+0x58>)
     546:	4798      	blx	r3

	M0_SPI_FLASH_init();
     548:	4b07      	ldr	r3, [pc, #28]	; (568 <system_init+0x5c>)
     54a:	4798      	blx	r3

	RED_BOARD_SPI_FLASH_init();
     54c:	4b07      	ldr	r3, [pc, #28]	; (56c <system_init+0x60>)
     54e:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     550:	4b07      	ldr	r3, [pc, #28]	; (570 <system_init+0x64>)
     552:	4798      	blx	r3
}
     554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     556:	46c0      	nop			; (mov r8, r8)
     558:	00000c35 	.word	0x00000c35
     55c:	41004400 	.word	0x41004400
     560:	00000259 	.word	0x00000259
     564:	000002fd 	.word	0x000002fd
     568:	000003a1 	.word	0x000003a1
     56c:	00000449 	.word	0x00000449
     570:	000004f1 	.word	0x000004f1

00000574 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     574:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     578:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     57a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     57c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     580:	4770      	bx	lr

00000582 <atomic_leave_critical>:
     582:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     586:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     588:	f383 8810 	msr	PRIMASK, r3
}
     58c:	4770      	bx	lr

0000058e <flash_ready>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     58e:	6943      	ldr	r3, [r0, #20]
{
     590:	b510      	push	{r4, lr}
	if (descr->callbacks.cb_ready) {
     592:	2b00      	cmp	r3, #0
     594:	d000      	beq.n	598 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     596:	4798      	blx	r3
	}
}
     598:	bd10      	pop	{r4, pc}

0000059a <flash_error>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     59a:	6983      	ldr	r3, [r0, #24]
{
     59c:	b510      	push	{r4, lr}
	if (descr->callbacks.cb_error) {
     59e:	2b00      	cmp	r3, #0
     5a0:	d000      	beq.n	5a4 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     5a2:	4798      	blx	r3
	}
}
     5a4:	bd10      	pop	{r4, pc}
	...

000005a8 <flash_init>:
{
     5a8:	b570      	push	{r4, r5, r6, lr}
     5aa:	0004      	movs	r4, r0
     5ac:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     5ae:	2800      	cmp	r0, #0
     5b0:	d003      	beq.n	5ba <flash_init+0x12>
     5b2:	0008      	movs	r0, r1
     5b4:	1e43      	subs	r3, r0, #1
     5b6:	4198      	sbcs	r0, r3
     5b8:	b2c0      	uxtb	r0, r0
     5ba:	4907      	ldr	r1, [pc, #28]	; (5d8 <flash_init+0x30>)
     5bc:	4b07      	ldr	r3, [pc, #28]	; (5dc <flash_init+0x34>)
     5be:	2238      	movs	r2, #56	; 0x38
     5c0:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     5c2:	0029      	movs	r1, r5
     5c4:	0020      	movs	r0, r4
     5c6:	4b06      	ldr	r3, [pc, #24]	; (5e0 <flash_init+0x38>)
     5c8:	4798      	blx	r3
	if (rc) {
     5ca:	2800      	cmp	r0, #0
     5cc:	d103      	bne.n	5d6 <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
     5ce:	4b05      	ldr	r3, [pc, #20]	; (5e4 <flash_init+0x3c>)
     5d0:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     5d2:	4b05      	ldr	r3, [pc, #20]	; (5e8 <flash_init+0x40>)
     5d4:	6063      	str	r3, [r4, #4]
}
     5d6:	bd70      	pop	{r4, r5, r6, pc}
     5d8:	00002992 	.word	0x00002992
     5dc:	00000bdd 	.word	0x00000bdd
     5e0:	00000ca9 	.word	0x00000ca9
     5e4:	0000058f 	.word	0x0000058f
     5e8:	0000059b 	.word	0x0000059b

000005ec <spi_m_sync_init>:
    ASSERT( spi );
    spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init( struct spi_m_sync_descriptor *spi, void *const hw )
{
     5ec:	b570      	push	{r4, r5, r6, lr}
     5ee:	0004      	movs	r4, r0
     5f0:	000d      	movs	r5, r1
    int32_t rc = 0;
    ASSERT( spi && hw );
     5f2:	2800      	cmp	r0, #0
     5f4:	d003      	beq.n	5fe <spi_m_sync_init+0x12>
     5f6:	0008      	movs	r0, r1
     5f8:	1e43      	subs	r3, r0, #1
     5fa:	4198      	sbcs	r0, r3
     5fc:	b2c0      	uxtb	r0, r0
     5fe:	4909      	ldr	r1, [pc, #36]	; (624 <spi_m_sync_init+0x38>)
     600:	4b09      	ldr	r3, [pc, #36]	; (628 <spi_m_sync_init+0x3c>)
     602:	2240      	movs	r2, #64	; 0x40
     604:	4798      	blx	r3
    spi->dev.prvt = (void *)hw;
     606:	6065      	str	r5, [r4, #4]
    rc = _spi_m_sync_init( &spi->dev, hw );
     608:	1d20      	adds	r0, r4, #4
     60a:	0029      	movs	r1, r5
     60c:	4b07      	ldr	r3, [pc, #28]	; (62c <spi_m_sync_init+0x40>)
     60e:	4798      	blx	r3

    if( rc < 0 ) {
     610:	2800      	cmp	r0, #0
     612:	db06      	blt.n	622 <spi_m_sync_init+0x36>

    spi->flags = SPI_DEACTIVATE_NEXT;
    spi->io.read = _spi_m_sync_io_read;
    spi->io.write = _spi_m_sync_io_write;

    return ERR_NONE;
     614:	2000      	movs	r0, #0
    spi->flags = SPI_DEACTIVATE_NEXT;
     616:	4b06      	ldr	r3, [pc, #24]	; (630 <spi_m_sync_init+0x44>)
     618:	82a3      	strh	r3, [r4, #20]
    spi->io.read = _spi_m_sync_io_read;
     61a:	4b06      	ldr	r3, [pc, #24]	; (634 <spi_m_sync_init+0x48>)
     61c:	6123      	str	r3, [r4, #16]
    spi->io.write = _spi_m_sync_io_write;
     61e:	4b06      	ldr	r3, [pc, #24]	; (638 <spi_m_sync_init+0x4c>)
     620:	60e3      	str	r3, [r4, #12]
}
     622:	bd70      	pop	{r4, r5, r6, pc}
     624:	000029a9 	.word	0x000029a9
     628:	00000bdd 	.word	0x00000bdd
     62c:	00000d61 	.word	0x00000d61
     630:	ffff8000 	.word	0xffff8000
     634:	000006b9 	.word	0x000006b9
     638:	00000681 	.word	0x00000681

0000063c <spi_m_sync_transfer>:

    return spi_m_sync_transfer( spi, &xfer );
}

int32_t spi_m_sync_transfer( struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer )
{
     63c:	b530      	push	{r4, r5, lr}
     63e:	0004      	movs	r4, r0
     640:	b087      	sub	sp, #28
     642:	000d      	movs	r5, r1
    struct spi_msg msg;

    ASSERT( spi && p_xfer );
     644:	2800      	cmp	r0, #0
     646:	d003      	beq.n	650 <spi_m_sync_transfer+0x14>
     648:	0008      	movs	r0, r1
     64a:	1e43      	subs	r3, r0, #1
     64c:	4198      	sbcs	r0, r3
     64e:	b2c0      	uxtb	r0, r0
     650:	22b3      	movs	r2, #179	; 0xb3
     652:	4908      	ldr	r1, [pc, #32]	; (674 <spi_m_sync_transfer+0x38>)
     654:	4b08      	ldr	r3, [pc, #32]	; (678 <spi_m_sync_transfer+0x3c>)
     656:	4798      	blx	r3

    msg.txbuf = p_xfer->txbuf;
     658:	682b      	ldr	r3, [r5, #0]
    msg.rxbuf = p_xfer->rxbuf;
    msg.size = p_xfer->size;
    return _spi_m_sync_trans( &spi->dev, &msg );
     65a:	1d20      	adds	r0, r4, #4
    msg.txbuf = p_xfer->txbuf;
     65c:	9303      	str	r3, [sp, #12]
    msg.rxbuf = p_xfer->rxbuf;
     65e:	686b      	ldr	r3, [r5, #4]
    return _spi_m_sync_trans( &spi->dev, &msg );
     660:	a903      	add	r1, sp, #12
    msg.rxbuf = p_xfer->rxbuf;
     662:	9304      	str	r3, [sp, #16]
    msg.size = p_xfer->size;
     664:	68ab      	ldr	r3, [r5, #8]
     666:	9301      	str	r3, [sp, #4]
     668:	9305      	str	r3, [sp, #20]
    return _spi_m_sync_trans( &spi->dev, &msg );
     66a:	4b04      	ldr	r3, [pc, #16]	; (67c <spi_m_sync_transfer+0x40>)
     66c:	4798      	blx	r3
}
     66e:	b007      	add	sp, #28
     670:	bd30      	pop	{r4, r5, pc}
     672:	46c0      	nop			; (mov r8, r8)
     674:	000029a9 	.word	0x000029a9
     678:	00000bdd 	.word	0x00000bdd
     67c:	00000f29 	.word	0x00000f29

00000680 <_spi_m_sync_io_write>:
{
     680:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     682:	0004      	movs	r4, r0
    ASSERT( io );
     684:	1e43      	subs	r3, r0, #1
     686:	4198      	sbcs	r0, r3
{
     688:	000e      	movs	r6, r1
     68a:	0015      	movs	r5, r2
    ASSERT( io );
     68c:	b2c0      	uxtb	r0, r0
     68e:	22a3      	movs	r2, #163	; 0xa3
     690:	4906      	ldr	r1, [pc, #24]	; (6ac <_spi_m_sync_io_write+0x2c>)
     692:	4b07      	ldr	r3, [pc, #28]	; (6b0 <_spi_m_sync_io_write+0x30>)
     694:	4798      	blx	r3
    xfer.rxbuf = 0;
     696:	2300      	movs	r3, #0
    struct spi_m_sync_descriptor *spi = CONTAINER_OF( io, struct spi_m_sync_descriptor, io );
     698:	0020      	movs	r0, r4
    xfer.rxbuf = 0;
     69a:	9302      	str	r3, [sp, #8]
    return spi_m_sync_transfer( spi, &xfer );
     69c:	a901      	add	r1, sp, #4
     69e:	4b05      	ldr	r3, [pc, #20]	; (6b4 <_spi_m_sync_io_write+0x34>)
    struct spi_m_sync_descriptor *spi = CONTAINER_OF( io, struct spi_m_sync_descriptor, io );
     6a0:	380c      	subs	r0, #12
    xfer.txbuf = (uint8_t *)buf;
     6a2:	9601      	str	r6, [sp, #4]
    xfer.size = length;
     6a4:	9503      	str	r5, [sp, #12]
    return spi_m_sync_transfer( spi, &xfer );
     6a6:	4798      	blx	r3
}
     6a8:	b004      	add	sp, #16
     6aa:	bd70      	pop	{r4, r5, r6, pc}
     6ac:	000029a9 	.word	0x000029a9
     6b0:	00000bdd 	.word	0x00000bdd
     6b4:	0000063d 	.word	0x0000063d

000006b8 <_spi_m_sync_io_read>:
{
     6b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
    ASSERT( io );
     6bc:	1e43      	subs	r3, r0, #1
     6be:	4198      	sbcs	r0, r3
{
     6c0:	000e      	movs	r6, r1
     6c2:	0015      	movs	r5, r2
    ASSERT( io );
     6c4:	b2c0      	uxtb	r0, r0
     6c6:	2287      	movs	r2, #135	; 0x87
     6c8:	4906      	ldr	r1, [pc, #24]	; (6e4 <_spi_m_sync_io_read+0x2c>)
     6ca:	4b07      	ldr	r3, [pc, #28]	; (6e8 <_spi_m_sync_io_read+0x30>)
     6cc:	4798      	blx	r3
    xfer.txbuf = 0;
     6ce:	2300      	movs	r3, #0
    struct spi_m_sync_descriptor *spi = CONTAINER_OF( io, struct spi_m_sync_descriptor, io );
     6d0:	0020      	movs	r0, r4
    xfer.txbuf = 0;
     6d2:	9301      	str	r3, [sp, #4]
    return spi_m_sync_transfer( spi, &xfer );
     6d4:	a901      	add	r1, sp, #4
     6d6:	4b05      	ldr	r3, [pc, #20]	; (6ec <_spi_m_sync_io_read+0x34>)
    struct spi_m_sync_descriptor *spi = CONTAINER_OF( io, struct spi_m_sync_descriptor, io );
     6d8:	380c      	subs	r0, #12
    xfer.rxbuf = buf;
     6da:	9602      	str	r6, [sp, #8]
    xfer.size = length;
     6dc:	9503      	str	r5, [sp, #12]
    return spi_m_sync_transfer( spi, &xfer );
     6de:	4798      	blx	r3
}
     6e0:	b004      	add	sp, #16
     6e2:	bd70      	pop	{r4, r5, r6, pc}
     6e4:	000029a9 	.word	0x000029a9
     6e8:	00000bdd 	.word	0x00000bdd
     6ec:	0000063d 	.word	0x0000063d

000006f0 <_usb_d_find_ep>:
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     6f0:	220f      	movs	r2, #15
{
     6f2:	2300      	movs	r3, #0
     6f4:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     6f6:	4c0a      	ldr	r4, [pc, #40]	; (720 <_usb_d_find_ep+0x30>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     6f8:	4002      	ands	r2, r0
     6fa:	015e      	lsls	r6, r3, #5
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     6fc:	19a5      	adds	r5, r4, r6
     6fe:	786d      	ldrb	r5, [r5, #1]
     700:	b259      	sxtb	r1, r3
     702:	4285      	cmp	r5, r0
     704:	d009      	beq.n	71a <_usb_d_find_ep+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     706:	5d36      	ldrb	r6, [r6, r4]
     708:	2e00      	cmp	r6, #0
     70a:	d101      	bne.n	710 <_usb_d_find_ep+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     70c:	42aa      	cmp	r2, r5
     70e:	d004      	beq.n	71a <_usb_d_find_ep+0x2a>
     710:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     712:	2b04      	cmp	r3, #4
     714:	d1f1      	bne.n	6fa <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
     716:	2101      	movs	r1, #1
     718:	4249      	negs	r1, r1
}
     71a:	0008      	movs	r0, r1
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	20000084 	.word	0x20000084

00000724 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     724:	2000      	movs	r0, #0
     726:	4770      	bx	lr

00000728 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     728:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     72a:	4b08      	ldr	r3, [pc, #32]	; (74c <usb_d_cb_trans_more+0x24>)
{
     72c:	0004      	movs	r4, r0
     72e:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     730:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     732:	4b07      	ldr	r3, [pc, #28]	; (750 <usb_d_cb_trans_more+0x28>)
     734:	0140      	lsls	r0, r0, #5
     736:	181b      	adds	r3, r3, r0
     738:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     73a:	2000      	movs	r0, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     73c:	2a03      	cmp	r2, #3
     73e:	d103      	bne.n	748 <usb_d_cb_trans_more+0x20>
		return ept->callbacks.more(ep, transfered);
     740:	699b      	ldr	r3, [r3, #24]
     742:	0029      	movs	r1, r5
     744:	0020      	movs	r0, r4
     746:	4798      	blx	r3
}
     748:	bd70      	pop	{r4, r5, r6, pc}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	000006f1 	.word	0x000006f1
     750:	20000084 	.word	0x20000084

00000754 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     756:	4b39      	ldr	r3, [pc, #228]	; (83c <_usb_d_cb_trans_done+0xe8>)
{
     758:	b087      	sub	sp, #28
     75a:	9000      	str	r0, [sp, #0]
     75c:	000f      	movs	r7, r1
     75e:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
     760:	4798      	blx	r3
     762:	4d37      	ldr	r5, [pc, #220]	; (840 <_usb_d_cb_trans_done+0xec>)
     764:	0144      	lsls	r4, r0, #5
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     766:	2f00      	cmp	r7, #0
     768:	d142      	bne.n	7f0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_DONE;
     76a:	192e      	adds	r6, r5, r4
     76c:	70f7      	strb	r7, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     76e:	5d29      	ldrb	r1, [r5, r4]
     770:	2900      	cmp	r1, #0
     772:	d134      	bne.n	7de <_usb_d_cb_trans_done+0x8a>
     774:	0022      	movs	r2, r4
	if (state == USB_EP_S_X_DATA) {
     776:	78b7      	ldrb	r7, [r6, #2]
     778:	320c      	adds	r2, #12
     77a:	7870      	ldrb	r0, [r6, #1]
     77c:	69f3      	ldr	r3, [r6, #28]
     77e:	2f03      	cmp	r7, #3
     780:	d128      	bne.n	7d4 <_usb_d_cb_trans_done+0x80>
     782:	270c      	movs	r7, #12
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     784:	18aa      	adds	r2, r5, r2
     786:	3101      	adds	r1, #1
     788:	57f7      	ldrsb	r7, [r6, r7]
     78a:	4798      	blx	r3
     78c:	7873      	ldrb	r3, [r6, #1]
		if (err) {
     78e:	2800      	cmp	r0, #0
     790:	d00d      	beq.n	7ae <_usb_d_cb_trans_done+0x5a>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     792:	2205      	movs	r2, #5
     794:	70b2      	strb	r2, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     796:	3a03      	subs	r2, #3
     798:	70f2      	strb	r2, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     79a:	0018      	movs	r0, r3
     79c:	2f00      	cmp	r7, #0
     79e:	db01      	blt.n	7a4 <_usb_d_cb_trans_done+0x50>
     7a0:	2080      	movs	r0, #128	; 0x80
     7a2:	4318      	orrs	r0, r3
     7a4:	2101      	movs	r1, #1
     7a6:	4b27      	ldr	r3, [pc, #156]	; (844 <_usb_d_cb_trans_done+0xf0>)
     7a8:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
     7aa:	b007      	add	sp, #28
     7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     7ae:	2204      	movs	r2, #4
     7b0:	70b2      	strb	r2, [r6, #2]
	struct usb_d_transfer trans
     7b2:	aa03      	add	r2, sp, #12
     7b4:	9003      	str	r0, [sp, #12]
     7b6:	6050      	str	r0, [r2, #4]
     7b8:	2f00      	cmp	r7, #0
     7ba:	db08      	blt.n	7ce <_usb_d_cb_trans_done+0x7a>
     7bc:	2080      	movs	r0, #128	; 0x80
     7be:	4303      	orrs	r3, r0
     7c0:	7213      	strb	r3, [r2, #8]
     7c2:	2301      	movs	r3, #1
	return _usb_d_dev_ep_trans(&trans);
     7c4:	0010      	movs	r0, r2
	struct usb_d_transfer trans
     7c6:	7253      	strb	r3, [r2, #9]
	return _usb_d_dev_ep_trans(&trans);
     7c8:	4b1f      	ldr	r3, [pc, #124]	; (848 <_usb_d_cb_trans_done+0xf4>)
     7ca:	4798      	blx	r3
     7cc:	e7ed      	b.n	7aa <_usb_d_cb_trans_done+0x56>
	struct usb_d_transfer trans
     7ce:	200f      	movs	r0, #15
     7d0:	4003      	ands	r3, r0
     7d2:	e7f5      	b.n	7c0 <_usb_d_cb_trans_done+0x6c>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     7d4:	18aa      	adds	r2, r5, r2
     7d6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     7d8:	2302      	movs	r3, #2
     7da:	70b3      	strb	r3, [r6, #2]
     7dc:	e7e5      	b.n	7aa <_usb_d_cb_trans_done+0x56>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     7de:	2301      	movs	r3, #1
     7e0:	70b3      	strb	r3, [r6, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     7e2:	192c      	adds	r4, r5, r4
     7e4:	78e1      	ldrb	r1, [r4, #3]
     7e6:	69e3      	ldr	r3, [r4, #28]
     7e8:	9a01      	ldr	r2, [sp, #4]
     7ea:	9800      	ldr	r0, [sp, #0]
     7ec:	4798      	blx	r3
     7ee:	e7dc      	b.n	7aa <_usb_d_cb_trans_done+0x56>
		ept->xfer.hdr.status = USB_XFER_HALT;
     7f0:	192b      	adds	r3, r5, r4
	} else if (code == USB_TRANS_STALL) {
     7f2:	2f01      	cmp	r7, #1
     7f4:	d10c      	bne.n	810 <_usb_d_cb_trans_done+0xbc>
		ept->xfer.hdr.status = USB_XFER_HALT;
     7f6:	2202      	movs	r2, #2
     7f8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     7fa:	5d29      	ldrb	r1, [r5, r4]
     7fc:	2900      	cmp	r1, #0
     7fe:	d104      	bne.n	80a <_usb_d_cb_trans_done+0xb6>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     800:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     802:	9800      	ldr	r0, [sp, #0]
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <_usb_d_cb_trans_done+0xf0>)
     806:	4798      	blx	r3
     808:	e7eb      	b.n	7e2 <_usb_d_cb_trans_done+0x8e>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     80a:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     80c:	709a      	strb	r2, [r3, #2]
     80e:	e7e8      	b.n	7e2 <_usb_d_cb_trans_done+0x8e>
	} else if (code == USB_TRANS_ABORT) {
     810:	2f02      	cmp	r7, #2
     812:	d108      	bne.n	826 <_usb_d_cb_trans_done+0xd2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     814:	2204      	movs	r2, #4
     816:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     818:	5d2a      	ldrb	r2, [r5, r4]
     81a:	2a00      	cmp	r2, #0
     81c:	d101      	bne.n	822 <_usb_d_cb_trans_done+0xce>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     81e:	709f      	strb	r7, [r3, #2]
			return;
     820:	e7c3      	b.n	7aa <_usb_d_cb_trans_done+0x56>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     822:	2201      	movs	r2, #1
     824:	e7f2      	b.n	80c <_usb_d_cb_trans_done+0xb8>
	} else if (code == USB_TRANS_RESET) {
     826:	2f03      	cmp	r7, #3
     828:	d104      	bne.n	834 <_usb_d_cb_trans_done+0xe0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     82a:	2200      	movs	r2, #0
     82c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     82e:	3205      	adds	r2, #5
		ept->xfer.hdr.status = USB_XFER_ERROR;
     830:	70da      	strb	r2, [r3, #3]
     832:	e7d6      	b.n	7e2 <_usb_d_cb_trans_done+0x8e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     834:	2206      	movs	r2, #6
     836:	709a      	strb	r2, [r3, #2]
     838:	e7fa      	b.n	830 <_usb_d_cb_trans_done+0xdc>
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	000006f1 	.word	0x000006f1
     840:	20000084 	.word	0x20000084
     844:	00001a51 	.word	0x00001a51
     848:	00001b79 	.word	0x00001b79

0000084c <usb_d_cb_trans_setup>:
{
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     84e:	4b1c      	ldr	r3, [pc, #112]	; (8c0 <usb_d_cb_trans_setup+0x74>)
{
     850:	b085      	sub	sp, #20
     852:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     854:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
     856:	4f1b      	ldr	r7, [pc, #108]	; (8c4 <usb_d_cb_trans_setup+0x78>)
     858:	0143      	lsls	r3, r0, #5
     85a:	9303      	str	r3, [sp, #12]
     85c:	330c      	adds	r3, #12
     85e:	18fb      	adds	r3, r7, r3
     860:	9301      	str	r3, [sp, #4]
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     862:	0019      	movs	r1, r3
     864:	0020      	movs	r0, r4
     866:	4b18      	ldr	r3, [pc, #96]	; (8c8 <usb_d_cb_trans_setup+0x7c>)
     868:	4798      	blx	r3
     86a:	2680      	movs	r6, #128	; 0x80
	if (n != 8) {
     86c:	b2c0      	uxtb	r0, r0
     86e:	4d17      	ldr	r5, [pc, #92]	; (8cc <usb_d_cb_trans_setup+0x80>)
     870:	4276      	negs	r6, r6
     872:	2808      	cmp	r0, #8
     874:	d008      	beq.n	888 <usb_d_cb_trans_setup+0x3c>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     876:	2101      	movs	r1, #1
     878:	0020      	movs	r0, r4
     87a:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     87c:	2101      	movs	r1, #1
     87e:	4334      	orrs	r4, r6
     880:	b2e0      	uxtb	r0, r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     882:	47a8      	blx	r5
}
     884:	b005      	add	sp, #20
     886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     888:	2100      	movs	r1, #0
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     88a:	4326      	orrs	r6, r4
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     88c:	0020      	movs	r0, r4
     88e:	47a8      	blx	r5
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     890:	b2f3      	uxtb	r3, r6
     892:	2100      	movs	r1, #0
     894:	0018      	movs	r0, r3
     896:	9302      	str	r3, [sp, #8]
     898:	47a8      	blx	r5
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     89a:	9b03      	ldr	r3, [sp, #12]
	if (!ept->callbacks.req(ep, req)) {
     89c:	9901      	ldr	r1, [sp, #4]
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     89e:	18fe      	adds	r6, r7, r3
     8a0:	2701      	movs	r7, #1
	if (!ept->callbacks.req(ep, req)) {
     8a2:	0020      	movs	r0, r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     8a4:	70b7      	strb	r7, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
     8a6:	6973      	ldr	r3, [r6, #20]
     8a8:	4798      	blx	r3
     8aa:	2800      	cmp	r0, #0
     8ac:	d1ea      	bne.n	884 <usb_d_cb_trans_setup+0x38>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     8ae:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     8b0:	0039      	movs	r1, r7
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     8b2:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     8b4:	0020      	movs	r0, r4
     8b6:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     8b8:	0039      	movs	r1, r7
     8ba:	9802      	ldr	r0, [sp, #8]
     8bc:	e7e1      	b.n	882 <usb_d_cb_trans_setup+0x36>
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	000006f1 	.word	0x000006f1
     8c4:	20000084 	.word	0x20000084
     8c8:	00001b21 	.word	0x00001b21
     8cc:	00001a51 	.word	0x00001a51

000008d0 <usb_d_init>:

int32_t usb_d_init(void)
{
     8d0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     8d2:	4b11      	ldr	r3, [pc, #68]	; (918 <usb_d_init+0x48>)
     8d4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     8d6:	2800      	cmp	r0, #0
     8d8:	db1d      	blt.n	916 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     8da:	4c10      	ldr	r4, [pc, #64]	; (91c <usb_d_init+0x4c>)
     8dc:	2280      	movs	r2, #128	; 0x80
     8de:	0020      	movs	r0, r4
     8e0:	4b0f      	ldr	r3, [pc, #60]	; (920 <usb_d_init+0x50>)
     8e2:	2100      	movs	r1, #0
     8e4:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     8e6:	20ff      	movs	r0, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     8e8:	4a0e      	ldr	r2, [pc, #56]	; (924 <usb_d_init+0x54>)
     8ea:	1c63      	adds	r3, r4, #1
     8ec:	3481      	adds	r4, #129	; 0x81
     8ee:	0019      	movs	r1, r3
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     8f0:	7018      	strb	r0, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     8f2:	3113      	adds	r1, #19
     8f4:	3320      	adds	r3, #32
     8f6:	600a      	str	r2, [r1, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     8f8:	604a      	str	r2, [r1, #4]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     8fa:	608a      	str	r2, [r1, #8]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     8fc:	42a3      	cmp	r3, r4
     8fe:	d1f6      	bne.n	8ee <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     900:	4c09      	ldr	r4, [pc, #36]	; (928 <usb_d_init+0x58>)
     902:	490a      	ldr	r1, [pc, #40]	; (92c <usb_d_init+0x5c>)
     904:	2000      	movs	r0, #0
     906:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     908:	4909      	ldr	r1, [pc, #36]	; (930 <usb_d_init+0x60>)
     90a:	2001      	movs	r0, #1
     90c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     90e:	2002      	movs	r0, #2
     910:	4908      	ldr	r1, [pc, #32]	; (934 <usb_d_init+0x64>)
     912:	47a0      	blx	r4
	return ERR_NONE;
     914:	2000      	movs	r0, #0
}
     916:	bd10      	pop	{r4, pc}
     918:	000016a5 	.word	0x000016a5
     91c:	20000084 	.word	0x20000084
     920:	00002967 	.word	0x00002967
     924:	00000725 	.word	0x00000725
     928:	00001cb5 	.word	0x00001cb5
     92c:	0000084d 	.word	0x0000084d
     930:	00000729 	.word	0x00000729
     934:	00000755 	.word	0x00000755

00000938 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     938:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     93a:	4b01      	ldr	r3, [pc, #4]	; (940 <usb_d_register_callback+0x8>)
     93c:	4798      	blx	r3
}
     93e:	bd10      	pop	{r4, pc}
     940:	00001c91 	.word	0x00001c91

00000944 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     944:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     946:	4b01      	ldr	r3, [pc, #4]	; (94c <usb_d_enable+0x8>)
     948:	4798      	blx	r3
}
     94a:	bd10      	pop	{r4, pc}
     94c:	00001769 	.word	0x00001769

00000950 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     950:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     952:	4b01      	ldr	r3, [pc, #4]	; (958 <usb_d_attach+0x8>)
     954:	4798      	blx	r3
}
     956:	bd10      	pop	{r4, pc}
     958:	000017b1 	.word	0x000017b1

0000095c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     95c:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     95e:	4b01      	ldr	r3, [pc, #4]	; (964 <usb_d_set_address+0x8>)
     960:	4798      	blx	r3
}
     962:	bd10      	pop	{r4, pc}
     964:	000017c1 	.word	0x000017c1

00000968 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     96a:	4c10      	ldr	r4, [pc, #64]	; (9ac <usb_d_ep_init+0x44>)
{
     96c:	0006      	movs	r6, r0
     96e:	000d      	movs	r5, r1
     970:	0017      	movs	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     972:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     974:	2800      	cmp	r0, #0
     976:	da13      	bge.n	9a0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     978:	20ff      	movs	r0, #255	; 0xff
     97a:	47a0      	blx	r4
     97c:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     97e:	db12      	blt.n	9a6 <usb_d_ep_init+0x3e>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     980:	003a      	movs	r2, r7
     982:	0029      	movs	r1, r5
     984:	0030      	movs	r0, r6
     986:	4b0a      	ldr	r3, [pc, #40]	; (9b0 <usb_d_ep_init+0x48>)
     988:	4798      	blx	r3
	if (rc < 0) {
     98a:	2800      	cmp	r0, #0
     98c:	db07      	blt.n	99e <usb_d_ep_init+0x36>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     98e:	4b09      	ldr	r3, [pc, #36]	; (9b4 <usb_d_ep_init+0x4c>)
     990:	0164      	lsls	r4, r4, #5
     992:	191a      	adds	r2, r3, r4
     994:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     996:	2203      	movs	r2, #3
	return ERR_NONE;
     998:	2000      	movs	r0, #0
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     99a:	4015      	ands	r5, r2
     99c:	54e5      	strb	r5, [r4, r3]
}
     99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     9a0:	2014      	movs	r0, #20
			return -USB_ERR_ALLOC_FAIL;
     9a2:	4240      	negs	r0, r0
     9a4:	e7fb      	b.n	99e <usb_d_ep_init+0x36>
     9a6:	2015      	movs	r0, #21
     9a8:	e7fb      	b.n	9a2 <usb_d_ep_init+0x3a>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	000006f1 	.word	0x000006f1
     9b0:	000017d1 	.word	0x000017d1
     9b4:	20000084 	.word	0x20000084

000009b8 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     9b8:	2100      	movs	r1, #0
{
     9ba:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     9bc:	b282      	uxth	r2, r0
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <usb_d_ep0_init+0x10>)
     9c0:	0008      	movs	r0, r1
     9c2:	4798      	blx	r3
}
     9c4:	bd10      	pop	{r4, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	00000969 	.word	0x00000969

000009cc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     9cc:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     9ce:	4b07      	ldr	r3, [pc, #28]	; (9ec <usb_d_ep_deinit+0x20>)
{
     9d0:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     9d2:	4798      	blx	r3
     9d4:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     9d6:	db07      	blt.n	9e8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     9d8:	4b05      	ldr	r3, [pc, #20]	; (9f0 <usb_d_ep_deinit+0x24>)
     9da:	0028      	movs	r0, r5
     9dc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     9de:	4b05      	ldr	r3, [pc, #20]	; (9f4 <usb_d_ep_deinit+0x28>)
     9e0:	0164      	lsls	r4, r4, #5
     9e2:	191c      	adds	r4, r3, r4
     9e4:	23ff      	movs	r3, #255	; 0xff
     9e6:	7063      	strb	r3, [r4, #1]
}
     9e8:	bd70      	pop	{r4, r5, r6, pc}
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	000006f1 	.word	0x000006f1
     9f0:	00001899 	.word	0x00001899
     9f4:	20000084 	.word	0x20000084

000009f8 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     9f8:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     9fa:	4b0c      	ldr	r3, [pc, #48]	; (a2c <usb_d_ep_enable+0x34>)
{
     9fc:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     9fe:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     a00:	2800      	cmp	r0, #0
     a02:	db0f      	blt.n	a24 <usb_d_ep_enable+0x2c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     a04:	4c0a      	ldr	r4, [pc, #40]	; (a30 <usb_d_ep_enable+0x38>)
     a06:	0140      	lsls	r0, r0, #5
     a08:	5d03      	ldrb	r3, [r0, r4]
     a0a:	1824      	adds	r4, r4, r0
     a0c:	425a      	negs	r2, r3
     a0e:	4153      	adcs	r3, r2
     a10:	3301      	adds	r3, #1
     a12:	70a3      	strb	r3, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     a14:	0028      	movs	r0, r5
     a16:	4b07      	ldr	r3, [pc, #28]	; (a34 <usb_d_ep_enable+0x3c>)
     a18:	4798      	blx	r3
	if (rc < 0) {
     a1a:	2800      	cmp	r0, #0
     a1c:	da01      	bge.n	a22 <usb_d_ep_enable+0x2a>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     a1e:	2300      	movs	r3, #0
     a20:	70a3      	strb	r3, [r4, #2]
	}
	return rc;
}
     a22:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_PARAM;
     a24:	2012      	movs	r0, #18
     a26:	4240      	negs	r0, r0
     a28:	e7fb      	b.n	a22 <usb_d_ep_enable+0x2a>
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	000006f1 	.word	0x000006f1
     a30:	20000084 	.word	0x20000084
     a34:	00001915 	.word	0x00001915

00000a38 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     a38:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     a3a:	7a03      	ldrb	r3, [r0, #8]
{
     a3c:	b08b      	sub	sp, #44	; 0x2c
     a3e:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     a40:	9301      	str	r3, [sp, #4]
     a42:	0018      	movs	r0, r3
     a44:	4b35      	ldr	r3, [pc, #212]	; (b1c <usb_d_ep_transfer+0xe4>)
     a46:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     a48:	7a6b      	ldrb	r3, [r5, #9]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     a4a:	1e06      	subs	r6, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     a4c:	9303      	str	r3, [sp, #12]
	uint32_t              len = xfer->size;
     a4e:	686c      	ldr	r4, [r5, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     a50:	db62      	blt.n	b18 <usb_d_ep_transfer+0xe0>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     a52:	4b33      	ldr	r3, [pc, #204]	; (b20 <usb_d_ep_transfer+0xe8>)
     a54:	a806      	add	r0, sp, #24
     a56:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     a58:	0173      	lsls	r3, r6, #5
     a5a:	9300      	str	r3, [sp, #0]
     a5c:	9a00      	ldr	r2, [sp, #0]
     a5e:	4b31      	ldr	r3, [pc, #196]	; (b24 <usb_d_ep_transfer+0xec>)
     a60:	189e      	adds	r6, r3, r2
     a62:	78b3      	ldrb	r3, [r6, #2]
     a64:	aa04      	add	r2, sp, #16
     a66:	1dd7      	adds	r7, r2, #7
     a68:	703b      	strb	r3, [r7, #0]
	if (state == USB_EP_S_IDLE) {
     a6a:	783b      	ldrb	r3, [r7, #0]
     a6c:	b2db      	uxtb	r3, r3
     a6e:	9302      	str	r3, [sp, #8]
     a70:	9a02      	ldr	r2, [sp, #8]
     a72:	4b2d      	ldr	r3, [pc, #180]	; (b28 <usb_d_ep_transfer+0xf0>)
     a74:	2a01      	cmp	r2, #1
     a76:	d11d      	bne.n	ab4 <usb_d_ep_transfer+0x7c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     a78:	3202      	adds	r2, #2
     a7a:	70b2      	strb	r2, [r6, #2]
		atomic_leave_critical(&flags);
     a7c:	a806      	add	r0, sp, #24
     a7e:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a80:	4b28      	ldr	r3, [pc, #160]	; (b24 <usb_d_ep_transfer+0xec>)
     a82:	9a00      	ldr	r2, [sp, #0]
     a84:	5cd3      	ldrb	r3, [r2, r3]
     a86:	2b00      	cmp	r3, #0
     a88:	d025      	beq.n	ad6 <usb_d_ep_transfer+0x9e>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     a8a:	9b01      	ldr	r3, [sp, #4]
     a8c:	09da      	lsrs	r2, r3, #7
     a8e:	9b03      	ldr	r3, [sp, #12]
     a90:	1e59      	subs	r1, r3, #1
     a92:	418b      	sbcs	r3, r1
     a94:	b2db      	uxtb	r3, r3
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     a96:	7a29      	ldrb	r1, [r5, #8]
	struct usb_d_transfer trans
     a98:	682d      	ldr	r5, [r5, #0]
     a9a:	a807      	add	r0, sp, #28
     a9c:	9507      	str	r5, [sp, #28]
     a9e:	6044      	str	r4, [r0, #4]
     aa0:	2a00      	cmp	r2, #0
     aa2:	d036      	beq.n	b12 <usb_d_ep_transfer+0xda>
     aa4:	2280      	movs	r2, #128	; 0x80
     aa6:	430a      	orrs	r2, r1
     aa8:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     aaa:	4b20      	ldr	r3, [pc, #128]	; (b2c <usb_d_ep_transfer+0xf4>)
	struct usb_d_transfer trans
     aac:	7202      	strb	r2, [r0, #8]
	return _usb_d_dev_ep_trans(&trans);
     aae:	4798      	blx	r3
	return rc;
}
     ab0:	b00b      	add	sp, #44	; 0x2c
     ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_leave_critical(&flags);
     ab4:	a806      	add	r0, sp, #24
     ab6:	4798      	blx	r3
		switch (state) {
     ab8:	783b      	ldrb	r3, [r7, #0]
			return USB_HALTED;
     aba:	2002      	movs	r0, #2
		switch (state) {
     abc:	b2db      	uxtb	r3, r3
     abe:	2b05      	cmp	r3, #5
     ac0:	d0f6      	beq.n	ab0 <usb_d_ep_transfer+0x78>
     ac2:	2b06      	cmp	r3, #6
     ac4:	d004      	beq.n	ad0 <usb_d_ep_transfer+0x98>
			return USB_BUSY;
     ac6:	2001      	movs	r0, #1
		switch (state) {
     ac8:	2b00      	cmp	r3, #0
     aca:	d1f1      	bne.n	ab0 <usb_d_ep_transfer+0x78>
			return -USB_ERR_FUNC;
     acc:	2013      	movs	r0, #19
     ace:	e000      	b.n	ad2 <usb_d_ep_transfer+0x9a>
			return -USB_ERROR;
     ad0:	2010      	movs	r0, #16
		return -USB_ERR_PARAM;
     ad2:	4240      	negs	r0, r0
     ad4:	e7ec      	b.n	ab0 <usb_d_ep_transfer+0x78>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     ad6:	7cf2      	ldrb	r2, [r6, #19]
     ad8:	7cb3      	ldrb	r3, [r6, #18]
     ada:	0212      	lsls	r2, r2, #8
     adc:	189b      	adds	r3, r3, r2
     ade:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     ae0:	2b00      	cmp	r3, #0
     ae2:	d105      	bne.n	af0 <usb_d_ep_transfer+0xb8>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     ae4:	2204      	movs	r2, #4
			len                 = 0;
     ae6:	001c      	movs	r4, r3
			zlp                 = true;
     ae8:	9b02      	ldr	r3, [sp, #8]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     aea:	70b2      	strb	r2, [r6, #2]
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     aec:	001a      	movs	r2, r3
     aee:	e7d2      	b.n	a96 <usb_d_ep_transfer+0x5e>
     af0:	429c      	cmp	r4, r3
     af2:	d900      	bls.n	af6 <usb_d_ep_transfer+0xbe>
     af4:	001c      	movs	r4, r3
     af6:	490b      	ldr	r1, [pc, #44]	; (b24 <usb_d_ep_transfer+0xec>)
     af8:	9a00      	ldr	r2, [sp, #0]
     afa:	468c      	mov	ip, r1
     afc:	4462      	add	r2, ip
			if (dir) {
     afe:	7b12      	ldrb	r2, [r2, #12]
     b00:	2a7f      	cmp	r2, #127	; 0x7f
     b02:	d904      	bls.n	b0e <usb_d_ep_transfer+0xd6>
				zlp = (req_len > len);
     b04:	429c      	cmp	r4, r3
     b06:	419b      	sbcs	r3, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     b08:	2201      	movs	r2, #1
				zlp = (req_len > len);
     b0a:	425b      	negs	r3, r3
     b0c:	e7c3      	b.n	a96 <usb_d_ep_transfer+0x5e>
				zlp = false;
     b0e:	2300      	movs	r3, #0
     b10:	e7ec      	b.n	aec <usb_d_ep_transfer+0xb4>
	struct usb_d_transfer trans
     b12:	220f      	movs	r2, #15
     b14:	400a      	ands	r2, r1
     b16:	e7c7      	b.n	aa8 <usb_d_ep_transfer+0x70>
		return -USB_ERR_PARAM;
     b18:	2012      	movs	r0, #18
     b1a:	e7da      	b.n	ad2 <usb_d_ep_transfer+0x9a>
     b1c:	000006f1 	.word	0x000006f1
     b20:	00000575 	.word	0x00000575
     b24:	20000084 	.word	0x20000084
     b28:	00000583 	.word	0x00000583
     b2c:	00001b79 	.word	0x00001b79

00000b30 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b32:	0004      	movs	r4, r0
     b34:	1e0d      	subs	r5, r1, #0
	if (ctrl == USB_EP_HALT_CLR) {
     b36:	d11b      	bne.n	b70 <usb_d_ep_halt+0x40>
	int8_t           ep_index = _usb_d_find_ep(ep);
     b38:	4b12      	ldr	r3, [pc, #72]	; (b84 <usb_d_ep_halt+0x54>)
     b3a:	4798      	blx	r3
     b3c:	1e06      	subs	r6, r0, #0
	if (ep_index < 0) {
     b3e:	db1e      	blt.n	b7e <usb_d_ep_halt+0x4e>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     b40:	2102      	movs	r1, #2
     b42:	0020      	movs	r0, r4
     b44:	4f10      	ldr	r7, [pc, #64]	; (b88 <usb_d_ep_halt+0x58>)
     b46:	47b8      	blx	r7
     b48:	2800      	cmp	r0, #0
     b4a:	d010      	beq.n	b6e <usb_d_ep_halt+0x3e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b4c:	0029      	movs	r1, r5
     b4e:	0020      	movs	r0, r4
     b50:	47b8      	blx	r7
		if (rc < 0) {
     b52:	2800      	cmp	r0, #0
     b54:	db0b      	blt.n	b6e <usb_d_ep_halt+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     b56:	4b0d      	ldr	r3, [pc, #52]	; (b8c <usb_d_ep_halt+0x5c>)
     b58:	0176      	lsls	r6, r6, #5
     b5a:	199e      	adds	r6, r3, r6
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     b5c:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     b5e:	2301      	movs	r3, #1
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     b60:	70f1      	strb	r1, [r6, #3]
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     b62:	70b3      	strb	r3, [r6, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     b64:	002a      	movs	r2, r5
     b66:	69f3      	ldr	r3, [r6, #28]
     b68:	0020      	movs	r0, r4
     b6a:	4798      	blx	r3
	return ERR_NONE;
     b6c:	0028      	movs	r0, r5
	} else if (ctrl == USB_EP_HALT_SET) {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
	}
}
     b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b70:	4b05      	ldr	r3, [pc, #20]	; (b88 <usb_d_ep_halt+0x58>)
	} else if (ctrl == USB_EP_HALT_SET) {
     b72:	2901      	cmp	r1, #1
     b74:	d000      	beq.n	b78 <usb_d_ep_halt+0x48>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     b76:	2102      	movs	r1, #2
     b78:	0020      	movs	r0, r4
     b7a:	4798      	blx	r3
     b7c:	e7f7      	b.n	b6e <usb_d_ep_halt+0x3e>
		return -USB_ERR_PARAM;
     b7e:	2012      	movs	r0, #18
     b80:	4240      	negs	r0, r0
     b82:	e7f4      	b.n	b6e <usb_d_ep_halt+0x3e>
     b84:	000006f1 	.word	0x000006f1
     b88:	00001a51 	.word	0x00001a51
     b8c:	20000084 	.word	0x20000084

00000b90 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     b90:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     b92:	4b0f      	ldr	r3, [pc, #60]	; (bd0 <usb_d_ep_register_callback+0x40>)
{
     b94:	0015      	movs	r5, r2
     b96:	000c      	movs	r4, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     b98:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     b9a:	2d00      	cmp	r5, #0
     b9c:	d100      	bne.n	ba0 <usb_d_ep_register_callback+0x10>
     b9e:	4d0d      	ldr	r5, [pc, #52]	; (bd4 <usb_d_ep_register_callback+0x44>)
	if (ep_index < 0) {
     ba0:	2800      	cmp	r0, #0
     ba2:	db05      	blt.n	bb0 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     ba4:	2c01      	cmp	r4, #1
     ba6:	d009      	beq.n	bbc <usb_d_ep_register_callback+0x2c>
     ba8:	2c00      	cmp	r4, #0
     baa:	d002      	beq.n	bb2 <usb_d_ep_register_callback+0x22>
     bac:	2c02      	cmp	r4, #2
     bae:	d00a      	beq.n	bc6 <usb_d_ep_register_callback+0x36>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     bb0:	bd70      	pop	{r4, r5, r6, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     bb2:	4b09      	ldr	r3, [pc, #36]	; (bd8 <usb_d_ep_register_callback+0x48>)
     bb4:	0140      	lsls	r0, r0, #5
     bb6:	1818      	adds	r0, r3, r0
     bb8:	6145      	str	r5, [r0, #20]
		break;
     bba:	e7f9      	b.n	bb0 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     bbc:	4b06      	ldr	r3, [pc, #24]	; (bd8 <usb_d_ep_register_callback+0x48>)
     bbe:	0140      	lsls	r0, r0, #5
     bc0:	1818      	adds	r0, r3, r0
     bc2:	6185      	str	r5, [r0, #24]
		break;
     bc4:	e7f4      	b.n	bb0 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     bc6:	4b04      	ldr	r3, [pc, #16]	; (bd8 <usb_d_ep_register_callback+0x48>)
     bc8:	0140      	lsls	r0, r0, #5
     bca:	1818      	adds	r0, r3, r0
     bcc:	61c5      	str	r5, [r0, #28]
		break;
     bce:	e7ef      	b.n	bb0 <usb_d_ep_register_callback+0x20>
     bd0:	000006f1 	.word	0x000006f1
     bd4:	00000725 	.word	0x00000725
     bd8:	20000084 	.word	0x20000084

00000bdc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     bdc:	2800      	cmp	r0, #0
     bde:	d100      	bne.n	be2 <assert+0x6>
		__asm("BKPT #0");
     be0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     be2:	4770      	bx	lr

00000be4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     be4:	6800      	ldr	r0, [r0, #0]
     be6:	2800      	cmp	r0, #0
     be8:	d100      	bne.n	bec <is_list_element+0x8>
			return true;
		}
	}

	return false;
}
     bea:	4770      	bx	lr
		if (it == element) {
     bec:	4288      	cmp	r0, r1
     bee:	d1f9      	bne.n	be4 <is_list_element>
			return true;
     bf0:	2001      	movs	r0, #1
     bf2:	e7fa      	b.n	bea <is_list_element+0x6>

00000bf4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     bf4:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
     bf6:	4b0c      	ldr	r3, [pc, #48]	; (c28 <list_insert_at_end+0x34>)
{
     bf8:	0005      	movs	r5, r0
     bfa:	000c      	movs	r4, r1
	struct list_element *it = list->head;
     bfc:	6806      	ldr	r6, [r0, #0]
	ASSERT(!is_list_element(list, element));
     bfe:	4798      	blx	r3
     c00:	0003      	movs	r3, r0
     c02:	2001      	movs	r0, #1
     c04:	4058      	eors	r0, r3
     c06:	b2c0      	uxtb	r0, r0
     c08:	4b08      	ldr	r3, [pc, #32]	; (c2c <list_insert_at_end+0x38>)
     c0a:	224f      	movs	r2, #79	; 0x4f
     c0c:	4908      	ldr	r1, [pc, #32]	; (c30 <list_insert_at_end+0x3c>)
     c0e:	4798      	blx	r3

	if (!list->head) {
     c10:	682b      	ldr	r3, [r5, #0]
     c12:	2b00      	cmp	r3, #0
     c14:	d103      	bne.n	c1e <list_insert_at_end+0x2a>
		list->head                             = (struct list_element *)element;
     c16:	602c      	str	r4, [r5, #0]

	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
     c18:	6023      	str	r3, [r4, #0]
}
     c1a:	bd70      	pop	{r4, r5, r6, pc}
     c1c:	001e      	movs	r6, r3
	while (it->next) {
     c1e:	6833      	ldr	r3, [r6, #0]
     c20:	2b00      	cmp	r3, #0
     c22:	d1fb      	bne.n	c1c <list_insert_at_end+0x28>
	it->next                               = (struct list_element *)element;
     c24:	6034      	str	r4, [r6, #0]
     c26:	e7f7      	b.n	c18 <list_insert_at_end+0x24>
     c28:	00000be5 	.word	0x00000be5
     c2c:	00000bdd 	.word	0x00000bdd
     c30:	000029c5 	.word	0x000029c5

00000c34 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c34:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     c36:	2402      	movs	r4, #2
     c38:	4a07      	ldr	r2, [pc, #28]	; (c58 <_init_chip+0x24>)
     c3a:	6853      	ldr	r3, [r2, #4]
     c3c:	4323      	orrs	r3, r4
     c3e:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     c40:	4b06      	ldr	r3, [pc, #24]	; (c5c <_init_chip+0x28>)
     c42:	4798      	blx	r3
	_sysctrl_init_sources();
     c44:	4b06      	ldr	r3, [pc, #24]	; (c60 <_init_chip+0x2c>)
     c46:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     c48:	0020      	movs	r0, r4
     c4a:	4c06      	ldr	r4, [pc, #24]	; (c64 <_init_chip+0x30>)
     c4c:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     c4e:	4b06      	ldr	r3, [pc, #24]	; (c68 <_init_chip+0x34>)
     c50:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c52:	20fd      	movs	r0, #253	; 0xfd
     c54:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     c56:	bd10      	pop	{r4, pc}
     c58:	41004000 	.word	0x41004000
     c5c:	00000d39 	.word	0x00000d39
     c60:	00001005 	.word	0x00001005
     c64:	00000c6d 	.word	0x00000c6d
     c68:	0000101d 	.word	0x0000101d

00000c6c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     c6c:	07c3      	lsls	r3, r0, #31
     c6e:	d40b      	bmi.n	c88 <_gclk_init_generators_by_fref+0x1c>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     c70:	0783      	lsls	r3, r0, #30
     c72:	d508      	bpl.n	c86 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     c74:	2202      	movs	r2, #2
     c76:	4b09      	ldr	r3, [pc, #36]	; (c9c <_gclk_init_generators_by_fref+0x30>)
     c78:	32ff      	adds	r2, #255	; 0xff
     c7a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c7c:	4a08      	ldr	r2, [pc, #32]	; (ca0 <_gclk_init_generators_by_fref+0x34>)
     c7e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c80:	785a      	ldrb	r2, [r3, #1]
     c82:	09d2      	lsrs	r2, r2, #7
     c84:	d1fc      	bne.n	c80 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     c86:	4770      	bx	lr
	((Gclk *)hw)->GENDIV.reg = data;
     c88:	2280      	movs	r2, #128	; 0x80
     c8a:	4b04      	ldr	r3, [pc, #16]	; (c9c <_gclk_init_generators_by_fref+0x30>)
     c8c:	0052      	lsls	r2, r2, #1
     c8e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c90:	4a04      	ldr	r2, [pc, #16]	; (ca4 <_gclk_init_generators_by_fref+0x38>)
     c92:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c94:	785a      	ldrb	r2, [r3, #1]
     c96:	09d2      	lsrs	r2, r2, #7
     c98:	d1fc      	bne.n	c94 <_gclk_init_generators_by_fref+0x28>
     c9a:	e7e9      	b.n	c70 <_gclk_init_generators_by_fref+0x4>
     c9c:	40000c00 	.word	0x40000c00
     ca0:	00010301 	.word	0x00010301
     ca4:	00010700 	.word	0x00010700

00000ca8 <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
     ca8:	b570      	push	{r4, r5, r6, lr}
     caa:	0004      	movs	r4, r0
     cac:	000d      	movs	r5, r1
	ASSERT(device && (hw == NVMCTRL));
     cae:	2800      	cmp	r0, #0
     cb0:	d004      	beq.n	cbc <_flash_init+0x14>
     cb2:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <_flash_init+0x48>)
     cb4:	18c8      	adds	r0, r1, r3
     cb6:	4243      	negs	r3, r0
     cb8:	4158      	adcs	r0, r3
     cba:	b2c0      	uxtb	r0, r0
     cbc:	2246      	movs	r2, #70	; 0x46
     cbe:	490d      	ldr	r1, [pc, #52]	; (cf4 <_flash_init+0x4c>)
     cc0:	4b0d      	ldr	r3, [pc, #52]	; (cf8 <_flash_init+0x50>)
     cc2:	4798      	blx	r3

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
	tmp &= mask;
     cc4:	229e      	movs	r2, #158	; 0x9e
	uint32_t ctrlb;

	device->hw = hw;
     cc6:	6125      	str	r5, [r4, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     cc8:	686b      	ldr	r3, [r5, #4]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cca:	490c      	ldr	r1, [pc, #48]	; (cfc <_flash_init+0x54>)
	tmp &= mask;
     ccc:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
     cce:	606b      	str	r3, [r5, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
     cd0:	4b0b      	ldr	r3, [pc, #44]	; (d00 <_flash_init+0x58>)
     cd2:	4a0c      	ldr	r2, [pc, #48]	; (d04 <_flash_init+0x5c>)
     cd4:	601c      	str	r4, [r3, #0]
     cd6:	2320      	movs	r3, #32
     cd8:	67cb      	str	r3, [r1, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
     cda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     cde:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ce2:	21c0      	movs	r1, #192	; 0xc0
     ce4:	0049      	lsls	r1, r1, #1
     ce6:	5053      	str	r3, [r2, r1]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
     ce8:	2000      	movs	r0, #0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cea:	6013      	str	r3, [r2, #0]
     cec:	bd70      	pop	{r4, r5, r6, pc}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	beffc000 	.word	0xbeffc000
     cf4:	000029e3 	.word	0x000029e3
     cf8:	00000bdd 	.word	0x00000bdd
     cfc:	e000e104 	.word	0xe000e104
     d00:	20000104 	.word	0x20000104
     d04:	e000e100 	.word	0xe000e100

00000d08 <NVMCTRL_Handler>:
 */
void NVMCTRL_Handler(void)
{
	void *const hw = _nvm_dev->hw;

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     d08:	2101      	movs	r1, #1
	void *const hw = _nvm_dev->hw;
     d0a:	4b0a      	ldr	r3, [pc, #40]	; (d34 <NVMCTRL_Handler+0x2c>)
{
     d0c:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     d0e:	6818      	ldr	r0, [r3, #0]
     d10:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     d12:	7d1a      	ldrb	r2, [r3, #20]
	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     d14:	420a      	tst	r2, r1
     d16:	d004      	beq.n	d22 <NVMCTRL_Handler+0x1a>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     d18:	6803      	ldr	r3, [r0, #0]
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
		}
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     d1a:	2b00      	cmp	r3, #0
     d1c:	d000      	beq.n	d20 <NVMCTRL_Handler+0x18>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     d1e:	4798      	blx	r3
		}
	}
}
     d20:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     d22:	7d1a      	ldrb	r2, [r3, #20]
     d24:	0852      	lsrs	r2, r2, #1
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     d26:	420a      	tst	r2, r1
     d28:	d0fa      	beq.n	d20 <NVMCTRL_Handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     d2a:	2202      	movs	r2, #2
     d2c:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     d2e:	6843      	ldr	r3, [r0, #4]
     d30:	e7f3      	b.n	d1a <NVMCTRL_Handler+0x12>
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	20000104 	.word	0x20000104

00000d38 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     d38:	4b06      	ldr	r3, [pc, #24]	; (d54 <_pm_init+0x1c>)
     d3a:	7a1a      	ldrb	r2, [r3, #8]
     d3c:	b2d2      	uxtb	r2, r2
     d3e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     d40:	7a5a      	ldrb	r2, [r3, #9]
     d42:	b2d2      	uxtb	r2, r2
     d44:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     d46:	7a9a      	ldrb	r2, [r3, #10]
     d48:	b2d2      	uxtb	r2, r2
     d4a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     d4c:	7ada      	ldrb	r2, [r3, #11]
     d4e:	b2d2      	uxtb	r2, r2
     d50:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     d52:	4770      	bx	lr
     d54:	40000400 	.word	0x40000400

00000d58 <hri_sercomspi_wait_for_sync>:
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     d58:	69c3      	ldr	r3, [r0, #28]
     d5a:	4219      	tst	r1, r3
     d5c:	d1fc      	bne.n	d58 <hri_sercomspi_wait_for_sync>
	};
}
     d5e:	4770      	bx	lr

00000d60 <_spi_m_sync_init>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     d60:	4b65      	ldr	r3, [pc, #404]	; (ef8 <_spi_m_sync_init+0x198>)

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     d64:	18ca      	adds	r2, r1, r3
     d66:	0a92      	lsrs	r2, r2, #10
     d68:	b2d2      	uxtb	r2, r2
{
     d6a:	0007      	movs	r7, r0
     d6c:	000d      	movs	r5, r1
     d6e:	4b63      	ldr	r3, [pc, #396]	; (efc <_spi_m_sync_init+0x19c>)
		if (sercomspi_regs[i].n == n) {
     d70:	2a04      	cmp	r2, #4
     d72:	d100      	bne.n	d76 <_spi_m_sync_init+0x16>
     d74:	e084      	b.n	e80 <_spi_m_sync_init+0x120>
     d76:	2a05      	cmp	r2, #5
     d78:	d000      	beq.n	d7c <_spi_m_sync_init+0x1c>
     d7a:	e0b1      	b.n	ee0 <_spi_m_sync_init+0x180>
     d7c:	3a04      	subs	r2, #4
			return &sercomspi_regs[i];
     d7e:	2411      	movs	r4, #17
     d80:	2000      	movs	r0, #0
     d82:	4362      	muls	r2, r4
     d84:	4c5e      	ldr	r4, [pc, #376]	; (f00 <_spi_m_sync_init+0x1a0>)
     d86:	3418      	adds	r4, #24
     d88:	18a4      	adds	r4, r4, r2
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     d8a:	4287      	cmp	r7, r0
     d8c:	d003      	beq.n	d96 <_spi_m_sync_init+0x36>
     d8e:	0028      	movs	r0, r5
     d90:	1e42      	subs	r2, r0, #1
     d92:	4190      	sbcs	r0, r2
     d94:	b2c0      	uxtb	r0, r0
     d96:	4a5b      	ldr	r2, [pc, #364]	; (f04 <_spi_m_sync_init+0x1a4>)
     d98:	495b      	ldr	r1, [pc, #364]	; (f08 <_spi_m_sync_init+0x1a8>)
     d9a:	4798      	blx	r3

	if (regs == NULL) {
     d9c:	2c00      	cmp	r4, #0
     d9e:	d100      	bne.n	da2 <_spi_m_sync_init+0x42>
     da0:	e0a6      	b.n	ef0 <_spi_m_sync_init+0x190>

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     da2:	69eb      	ldr	r3, [r5, #28]
     da4:	4e59      	ldr	r6, [pc, #356]	; (f0c <_spi_m_sync_init+0x1ac>)
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     da6:	07db      	lsls	r3, r3, #31
     da8:	d41a      	bmi.n	de0 <_spi_m_sync_init+0x80>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
     daa:	231c      	movs	r3, #28
     dac:	7822      	ldrb	r2, [r4, #0]

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     dae:	2103      	movs	r1, #3
     db0:	401a      	ands	r2, r3
     db2:	0028      	movs	r0, r5
     db4:	9201      	str	r2, [sp, #4]
     db6:	47b0      	blx	r6
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
     db8:	2202      	movs	r2, #2
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     dba:	682b      	ldr	r3, [r5, #0]
     dbc:	4213      	tst	r3, r2
     dbe:	d008      	beq.n	dd2 <_spi_m_sync_init+0x72>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     dc0:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     dc2:	2103      	movs	r1, #3
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     dc4:	4393      	bics	r3, r2
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     dc6:	0028      	movs	r0, r5
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     dc8:	602b      	str	r3, [r5, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     dca:	47b0      	blx	r6
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
     dcc:	2102      	movs	r1, #2
     dce:	0028      	movs	r0, r5
     dd0:	47b0      	blx	r6
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
     dd2:	2301      	movs	r3, #1
     dd4:	9a01      	ldr	r2, [sp, #4]

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     dd6:	2103      	movs	r1, #3
     dd8:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     dda:	602b      	str	r3, [r5, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     ddc:	0028      	movs	r0, r5
     dde:	47b0      	blx	r6
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
     de0:	2101      	movs	r1, #1
     de2:	0028      	movs	r0, r5
     de4:	47b0      	blx	r6

	dev->prvt = hw;

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
     de6:	221c      	movs	r2, #28
     de8:	7823      	ldrb	r3, [r4, #0]
	dev->prvt = hw;
     dea:	603d      	str	r5, [r7, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
     dec:	4013      	ands	r3, r2
     dee:	2b08      	cmp	r3, #8
     df0:	d148      	bne.n	e84 <_spi_m_sync_init+0x124>
	ASSERT(hw && regs);
     df2:	4a47      	ldr	r2, [pc, #284]	; (f10 <_spi_m_sync_init+0x1b0>)
     df4:	4944      	ldr	r1, [pc, #272]	; (f08 <_spi_m_sync_init+0x1a8>)
     df6:	2001      	movs	r0, #1
     df8:	4b40      	ldr	r3, [pc, #256]	; (efc <_spi_m_sync_init+0x19c>)
     dfa:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
     dfc:	7862      	ldrb	r2, [r4, #1]
     dfe:	7823      	ldrb	r3, [r4, #0]
     e00:	0212      	lsls	r2, r2, #8
     e02:	431a      	orrs	r2, r3
     e04:	78a3      	ldrb	r3, [r4, #2]
     e06:	2103      	movs	r1, #3
     e08:	041b      	lsls	r3, r3, #16
     e0a:	431a      	orrs	r2, r3
     e0c:	78e3      	ldrb	r3, [r4, #3]
     e0e:	0028      	movs	r0, r5
     e10:	061b      	lsls	r3, r3, #24
     e12:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
     e14:	4a3f      	ldr	r2, [pc, #252]	; (f14 <_spi_m_sync_init+0x1b4>)
     e16:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     e18:	602b      	str	r3, [r5, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     e1a:	47b0      	blx	r6
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
     e1c:	7962      	ldrb	r2, [r4, #5]
     e1e:	7923      	ldrb	r3, [r4, #4]
     e20:	0212      	lsls	r2, r2, #8
     e22:	431a      	orrs	r2, r3
     e24:	79a3      	ldrb	r3, [r4, #6]

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
     e26:	2107      	movs	r1, #7
     e28:	041b      	lsls	r3, r3, #16
     e2a:	431a      	orrs	r2, r3
     e2c:	79e3      	ldrb	r3, [r4, #7]
     e2e:	0028      	movs	r0, r5
     e30:	061b      	lsls	r3, r3, #24
     e32:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
     e34:	4a38      	ldr	r2, [pc, #224]	; (f18 <_spi_m_sync_init+0x1b8>)
     e36:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
     e38:	4a38      	ldr	r2, [pc, #224]	; (f1c <_spi_m_sync_init+0x1bc>)
     e3a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     e3c:	606b      	str	r3, [r5, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
     e3e:	47b0      	blx	r6
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
     e40:	7a62      	ldrb	r2, [r4, #9]
     e42:	7a23      	ldrb	r3, [r4, #8]
     e44:	0212      	lsls	r2, r2, #8
     e46:	431a      	orrs	r2, r3
     e48:	7aa3      	ldrb	r3, [r4, #10]
     e4a:	041b      	lsls	r3, r3, #16
     e4c:	431a      	orrs	r2, r3
     e4e:	7ae3      	ldrb	r3, [r4, #11]
     e50:	061b      	lsls	r3, r3, #24
     e52:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
     e54:	626b      	str	r3, [r5, #36]	; 0x24
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     e56:	002b      	movs	r3, r5
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     e58:	7b62      	ldrb	r2, [r4, #13]
     e5a:	3330      	adds	r3, #48	; 0x30
     e5c:	701a      	strb	r2, [r3, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     e5e:	69eb      	ldr	r3, [r5, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
     e60:	2b00      	cmp	r3, #0
     e62:	d1fc      	bne.n	e5e <_spi_m_sync_init+0xfe>
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     e64:	2207      	movs	r2, #7
     e66:	7923      	ldrb	r3, [r4, #4]

	dev->dummy_byte = regs->dummy_byte;

	return ERR_NONE;
     e68:	2000      	movs	r0, #0
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     e6a:	4013      	ands	r3, r2
     e6c:	1e5a      	subs	r2, r3, #1
     e6e:	4193      	sbcs	r3, r2
     e70:	3301      	adds	r3, #1
     e72:	713b      	strb	r3, [r7, #4]
	dev->dummy_byte = regs->dummy_byte;
     e74:	7be3      	ldrb	r3, [r4, #15]
     e76:	7ba2      	ldrb	r2, [r4, #14]
     e78:	021b      	lsls	r3, r3, #8
     e7a:	4313      	orrs	r3, r2
     e7c:	80fb      	strh	r3, [r7, #6]
}
     e7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sercomspi_regs[i].n == n) {
     e80:	2200      	movs	r2, #0
     e82:	e77c      	b.n	d7e <_spi_m_sync_init+0x1e>
	ASSERT(hw && regs);
     e84:	4a26      	ldr	r2, [pc, #152]	; (f20 <_spi_m_sync_init+0x1c0>)
     e86:	4920      	ldr	r1, [pc, #128]	; (f08 <_spi_m_sync_init+0x1a8>)
     e88:	2001      	movs	r0, #1
     e8a:	4b1c      	ldr	r3, [pc, #112]	; (efc <_spi_m_sync_init+0x19c>)
     e8c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
     e8e:	7862      	ldrb	r2, [r4, #1]
     e90:	7823      	ldrb	r3, [r4, #0]
     e92:	0212      	lsls	r2, r2, #8
     e94:	431a      	orrs	r2, r3
     e96:	78a3      	ldrb	r3, [r4, #2]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     e98:	0028      	movs	r0, r5
     e9a:	041b      	lsls	r3, r3, #16
     e9c:	431a      	orrs	r2, r3
     e9e:	78e3      	ldrb	r3, [r4, #3]
     ea0:	2103      	movs	r1, #3
     ea2:	061b      	lsls	r3, r3, #24
     ea4:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
     ea6:	4a1b      	ldr	r2, [pc, #108]	; (f14 <_spi_m_sync_init+0x1b4>)
     ea8:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     eaa:	602b      	str	r3, [r5, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     eac:	47b0      	blx	r6
	    (regs->ctrlb
     eae:	7962      	ldrb	r2, [r4, #5]
     eb0:	7923      	ldrb	r3, [r4, #4]
     eb2:	0212      	lsls	r2, r2, #8
     eb4:	431a      	orrs	r2, r3
     eb6:	79a3      	ldrb	r3, [r4, #6]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
     eb8:	0028      	movs	r0, r5
     eba:	041b      	lsls	r3, r3, #16
     ebc:	431a      	orrs	r2, r3
     ebe:	79e3      	ldrb	r3, [r4, #7]
     ec0:	2107      	movs	r1, #7
     ec2:	061b      	lsls	r3, r3, #24
     ec4:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
     ec6:	4a17      	ldr	r2, [pc, #92]	; (f24 <_spi_m_sync_init+0x1c4>)
     ec8:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
     eca:	2280      	movs	r2, #128	; 0x80
     ecc:	0292      	lsls	r2, r2, #10
     ece:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     ed0:	606b      	str	r3, [r5, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
     ed2:	47b0      	blx	r6
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
     ed4:	7b23      	ldrb	r3, [r4, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
     ed6:	732b      	strb	r3, [r5, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     ed8:	7b63      	ldrb	r3, [r4, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     eda:	3530      	adds	r5, #48	; 0x30
     edc:	702b      	strb	r3, [r5, #0]
     ede:	e7c1      	b.n	e64 <_spi_m_sync_init+0x104>
	return NULL;
     ee0:	2400      	movs	r4, #0
	ASSERT(dev && hw);
     ee2:	42a0      	cmp	r0, r4
     ee4:	d000      	beq.n	ee8 <_spi_m_sync_init+0x188>
     ee6:	e752      	b.n	d8e <_spi_m_sync_init+0x2e>
     ee8:	4a06      	ldr	r2, [pc, #24]	; (f04 <_spi_m_sync_init+0x1a4>)
     eea:	4907      	ldr	r1, [pc, #28]	; (f08 <_spi_m_sync_init+0x1a8>)
     eec:	0038      	movs	r0, r7
     eee:	4798      	blx	r3
		return ERR_INVALID_ARG;
     ef0:	200d      	movs	r0, #13
     ef2:	4240      	negs	r0, r0
     ef4:	e7c3      	b.n	e7e <_spi_m_sync_init+0x11e>
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	bdfff800 	.word	0xbdfff800
     efc:	00000bdd 	.word	0x00000bdd
     f00:	00002a00 	.word	0x00002a00
     f04:	00000925 	.word	0x00000925
     f08:	00002a3a 	.word	0x00002a3a
     f0c:	00000d59 	.word	0x00000d59
     f10:	00000903 	.word	0x00000903
     f14:	fffffefc 	.word	0xfffffefc
     f18:	fffdddbf 	.word	0xfffdddbf
     f1c:	00020240 	.word	0x00020240
     f20:	000008ef 	.word	0x000008ef
     f24:	fffd1dbf 	.word	0xfffd1dbf

00000f28 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
     f28:	b5f0      	push	{r4, r5, r6, r7, lr}
	void *                 hw   = dev->prvt;
     f2a:	6805      	ldr	r5, [r0, #0]
{
     f2c:	b085      	sub	sp, #20
     f2e:	9001      	str	r0, [sp, #4]
     f30:	9102      	str	r1, [sp, #8]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     f32:	7903      	ldrb	r3, [r0, #4]

	ASSERT(dev && hw);
     f34:	0028      	movs	r0, r5
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     f36:	9303      	str	r3, [sp, #12]
	ASSERT(dev && hw);
     f38:	1e43      	subs	r3, r0, #1
     f3a:	4198      	sbcs	r0, r3
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     f3c:	680f      	ldr	r7, [r1, #0]
     f3e:	684e      	ldr	r6, [r1, #4]
	ASSERT(dev && hw);
     f40:	b2c0      	uxtb	r0, r0
     f42:	4a2c      	ldr	r2, [pc, #176]	; (ff4 <_spi_m_sync_trans+0xcc>)
     f44:	492c      	ldr	r1, [pc, #176]	; (ff8 <_spi_m_sync_trans+0xd0>)
     f46:	4b2d      	ldr	r3, [pc, #180]	; (ffc <_spi_m_sync_trans+0xd4>)
     f48:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     f4a:	2007      	movs	r0, #7
     f4c:	69ec      	ldr	r4, [r5, #28]
     f4e:	4004      	ands	r4, r0

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
     f50:	d131      	bne.n	fb6 <_spi_m_sync_trans+0x8e>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
     f52:	4b2b      	ldr	r3, [pc, #172]	; (1000 <_spi_m_sync_trans+0xd8>)
     f54:	2103      	movs	r1, #3
     f56:	0028      	movs	r0, r5
     f58:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     f5a:	682b      	ldr	r3, [r5, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     f5c:	079b      	lsls	r3, r3, #30
     f5e:	d52d      	bpl.n	fbc <_spi_m_sync_trans+0x94>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     f60:	2301      	movs	r3, #1
     f62:	0021      	movs	r1, r4
     f64:	469c      	mov	ip, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     f66:	2304      	movs	r3, #4
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     f68:	7e2a      	ldrb	r2, [r5, #24]
     f6a:	b2d2      	uxtb	r2, r2
     f6c:	421a      	tst	r2, r3
     f6e:	d027      	beq.n	fc0 <_spi_m_sync_trans+0x98>
	return ((Sercom *)hw)->SPI.DATA.reg;
     f70:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (ctrl->rxbuf) {
     f72:	2e00      	cmp	r6, #0
     f74:	d004      	beq.n	f80 <_spi_m_sync_trans+0x58>
		if (ctrl->char_size > 1) {
     f76:	9803      	ldr	r0, [sp, #12]
		*ctrl->rxbuf++ = (uint8_t)data;
     f78:	7033      	strb	r3, [r6, #0]
		if (ctrl->char_size > 1) {
     f7a:	2801      	cmp	r0, #1
     f7c:	d812      	bhi.n	fa4 <_spi_m_sync_trans+0x7c>
		*ctrl->rxbuf++ = (uint8_t)data;
     f7e:	3601      	adds	r6, #1
	ctrl->rxcnt++;
     f80:	3101      	adds	r1, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     f82:	b252      	sxtb	r2, r2
     f84:	2a00      	cmp	r2, #0
     f86:	da2d      	bge.n	fe4 <_spi_m_sync_trans+0xbc>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
     f88:	2301      	movs	r3, #1
		return ERR_OVERFLOW;
     f8a:	2013      	movs	r0, #19
     f8c:	425b      	negs	r3, r3
     f8e:	836b      	strh	r3, [r5, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     f90:	3381      	adds	r3, #129	; 0x81
     f92:	762b      	strb	r3, [r5, #24]
     f94:	4240      	negs	r0, r0
	tmp &= mask;
     f96:	2303      	movs	r3, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
     f98:	7e2a      	ldrb	r2, [r5, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
     f9a:	421a      	tst	r2, r3
     f9c:	d0fc      	beq.n	f98 <_spi_m_sync_trans+0x70>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     f9e:	762b      	strb	r3, [r5, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
     fa0:	b005      	add	sp, #20
     fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
     fa4:	0a1b      	lsrs	r3, r3, #8
     fa6:	7073      	strb	r3, [r6, #1]
     fa8:	3602      	adds	r6, #2
     faa:	e7e9      	b.n	f80 <_spi_m_sync_trans+0x58>
			data |= (*ctrl->txbuf) << 8;
     fac:	787b      	ldrb	r3, [r7, #1]
			ctrl->txbuf++;
     fae:	3702      	adds	r7, #2
			data |= (*ctrl->txbuf) << 8;
     fb0:	021b      	lsls	r3, r3, #8
     fb2:	4303      	orrs	r3, r0
     fb4:	e013      	b.n	fde <_spi_m_sync_trans+0xb6>
		return ERR_BUSY;
     fb6:	2004      	movs	r0, #4
		return ERR_NOT_INITIALIZED;
     fb8:	4240      	negs	r0, r0
     fba:	e7f1      	b.n	fa0 <_spi_m_sync_trans+0x78>
     fbc:	2014      	movs	r0, #20
     fbe:	e7fb      	b.n	fb8 <_spi_m_sync_trans+0x90>
			if (ctrl.rxcnt >= ctrl.txcnt) {
     fc0:	42a1      	cmp	r1, r4
     fc2:	d3de      	bcc.n	f82 <_spi_m_sync_trans+0x5a>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     fc4:	4663      	mov	r3, ip
     fc6:	421a      	tst	r2, r3
     fc8:	d0db      	beq.n	f82 <_spi_m_sync_trans+0x5a>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     fca:	9b01      	ldr	r3, [sp, #4]
     fcc:	88db      	ldrh	r3, [r3, #6]
	if (ctrl->txbuf) {
     fce:	2f00      	cmp	r7, #0
     fd0:	d005      	beq.n	fde <_spi_m_sync_trans+0xb6>
		if (ctrl->char_size > 1) {
     fd2:	9b03      	ldr	r3, [sp, #12]
		data = *ctrl->txbuf++;
     fd4:	7838      	ldrb	r0, [r7, #0]
		if (ctrl->char_size > 1) {
     fd6:	2b01      	cmp	r3, #1
     fd8:	d8e8      	bhi.n	fac <_spi_m_sync_trans+0x84>
		data = *ctrl->txbuf++;
     fda:	0003      	movs	r3, r0
     fdc:	3701      	adds	r7, #1
	ctrl->txcnt++;
     fde:	3401      	adds	r4, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
     fe0:	62ab      	str	r3, [r5, #40]	; 0x28
     fe2:	e7ce      	b.n	f82 <_spi_m_sync_trans+0x5a>
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     fe4:	9b02      	ldr	r3, [sp, #8]
     fe6:	689b      	ldr	r3, [r3, #8]
     fe8:	429c      	cmp	r4, r3
     fea:	d3bc      	bcc.n	f66 <_spi_m_sync_trans+0x3e>
     fec:	4299      	cmp	r1, r3
     fee:	d3ba      	bcc.n	f66 <_spi_m_sync_trans+0x3e>
			rc = ctrl.txcnt;
     ff0:	0020      	movs	r0, r4
			break;
     ff2:	e7d0      	b.n	f96 <_spi_m_sync_trans+0x6e>
     ff4:	00000a85 	.word	0x00000a85
     ff8:	00002a3a 	.word	0x00002a3a
     ffc:	00000bdd 	.word	0x00000bdd
    1000:	00000d59 	.word	0x00000d59

00001004 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1004:	2202      	movs	r2, #2
    1006:	4b04      	ldr	r3, [pc, #16]	; (1018 <_sysctrl_init_sources+0x14>)
    1008:	6999      	ldr	r1, [r3, #24]
    100a:	430a      	orrs	r2, r1

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    100c:	211f      	movs	r1, #31
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    100e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1010:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1012:	400a      	ands	r2, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1014:	771a      	strb	r2, [r3, #28]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1016:	4770      	bx	lr
    1018:	40000800 	.word	0x40000800

0000101c <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    101c:	2382      	movs	r3, #130	; 0x82
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    101e:	2202      	movs	r2, #2
    1020:	4919      	ldr	r1, [pc, #100]	; (1088 <_sysctrl_init_referenced_generators+0x6c>)
    1022:	01db      	lsls	r3, r3, #7
    1024:	804b      	strh	r3, [r1, #2]
    1026:	4b19      	ldr	r3, [pc, #100]	; (108c <_sysctrl_init_referenced_generators+0x70>)
    1028:	849a      	strh	r2, [r3, #36]	; 0x24
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    102a:	320e      	adds	r2, #14
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    102c:	68d8      	ldr	r0, [r3, #12]
    102e:	4210      	tst	r0, r2
    1030:	d0fc      	beq.n	102c <_sysctrl_init_referenced_generators+0x10>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1032:	4a17      	ldr	r2, [pc, #92]	; (1090 <_sysctrl_init_referenced_generators+0x74>)
    1034:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1036:	4a17      	ldr	r2, [pc, #92]	; (1094 <_sysctrl_init_referenced_generators+0x78>)
    1038:	6812      	ldr	r2, [r2, #0]
    103a:	0e92      	lsrs	r2, r2, #26
    103c:	2a3f      	cmp	r2, #63	; 0x3f
    103e:	d00e      	beq.n	105e <_sysctrl_init_referenced_generators+0x42>
    1040:	2080      	movs	r0, #128	; 0x80
    1042:	0292      	lsls	r2, r2, #10
    1044:	0080      	lsls	r0, r0, #2
    1046:	4302      	orrs	r2, r0
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1048:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    104a:	2206      	movs	r2, #6
    104c:	849a      	strh	r2, [r3, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    104e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1050:	0752      	lsls	r2, r2, #29
    1052:	d407      	bmi.n	1064 <_sysctrl_init_referenced_generators+0x48>
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1054:	2210      	movs	r2, #16
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1056:	68d8      	ldr	r0, [r3, #12]
    1058:	4210      	tst	r0, r2
    105a:	d0fc      	beq.n	1056 <_sysctrl_init_referenced_generators+0x3a>
    105c:	e007      	b.n	106e <_sysctrl_init_referenced_generators+0x52>
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    105e:	22fc      	movs	r2, #252	; 0xfc
    1060:	01d2      	lsls	r2, r2, #7
    1062:	e7f1      	b.n	1048 <_sysctrl_init_referenced_generators+0x2c>
	tmp &= mask;
    1064:	20d0      	movs	r0, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1066:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    1068:	4002      	ands	r2, r0
		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    106a:	2ad0      	cmp	r2, #208	; 0xd0
    106c:	d1fb      	bne.n	1066 <_sysctrl_init_referenced_generators+0x4a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    106e:	2280      	movs	r2, #128	; 0x80
    1070:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    1072:	4302      	orrs	r2, r0
    1074:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1076:	784a      	ldrb	r2, [r1, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1078:	09d2      	lsrs	r2, r2, #7
    107a:	d1fc      	bne.n	1076 <_sysctrl_init_referenced_generators+0x5a>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    107c:	2102      	movs	r1, #2
    107e:	699a      	ldr	r2, [r3, #24]
    1080:	438a      	bics	r2, r1
    1082:	619a      	str	r2, [r3, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1084:	4770      	bx	lr
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	40000c00 	.word	0x40000c00
    108c:	40000800 	.word	0x40000800
    1090:	040105b9 	.word	0x040105b9
    1094:	00806024 	.word	0x00806024

00001098 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1098:	2000      	movs	r0, #0
    109a:	4770      	bx	lr

0000109c <_usb_d_dev_wait_dfll_rdy>:
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    109c:	4b07      	ldr	r3, [pc, #28]	; (10bc <_usb_d_dev_wait_dfll_rdy+0x20>)
    109e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    10a0:	0692      	lsls	r2, r2, #26
    10a2:	d405      	bmi.n	10b0 <_usb_d_dev_wait_dfll_rdy+0x14>
	tmp &= mask;
    10a4:	21d0      	movs	r1, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    10a6:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    10a8:	400a      	ands	r2, r1
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    10aa:	2ad0      	cmp	r2, #208	; 0xd0
    10ac:	d1fb      	bne.n	10a6 <_usb_d_dev_wait_dfll_rdy+0xa>
			;
	} else {
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
			;
	}
}
    10ae:	4770      	bx	lr
    10b0:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    10b2:	68d9      	ldr	r1, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    10b4:	4211      	tst	r1, r2
    10b6:	d0fc      	beq.n	10b2 <_usb_d_dev_wait_dfll_rdy+0x16>
    10b8:	e7f9      	b.n	10ae <_usb_d_dev_wait_dfll_rdy+0x12>
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	40000800 	.word	0x40000800

000010c0 <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    10c0:	2800      	cmp	r0, #0
    10c2:	d003      	beq.n	10cc <_usb_d_dev_ept+0xc>
    10c4:	2900      	cmp	r1, #0
    10c6:	d001      	beq.n	10cc <_usb_d_dev_ept+0xc>
    10c8:	3002      	adds	r0, #2
    10ca:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    10cc:	2314      	movs	r3, #20
    10ce:	3001      	adds	r0, #1
    10d0:	4343      	muls	r3, r0
    10d2:	4801      	ldr	r0, [pc, #4]	; (10d8 <_usb_d_dev_ept+0x18>)
    10d4:	18c0      	adds	r0, r0, r3
}
    10d6:	4770      	bx	lr
    10d8:	20000108 	.word	0x20000108

000010dc <_usb_d_dev_handle_setup>:
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    10dc:	230f      	movs	r3, #15
{
    10de:	b570      	push	{r4, r5, r6, lr}
    10e0:	0001      	movs	r1, r0
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    10e2:	7c80      	ldrb	r0, [r0, #18]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);

	if (!is_ctrl) {
    10e4:	2507      	movs	r5, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    10e6:	4003      	ands	r3, r0
    10e8:	001a      	movs	r2, r3
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    10ea:	7ccc      	ldrb	r4, [r1, #19]
    10ec:	3208      	adds	r2, #8
	if (!is_ctrl) {
    10ee:	4025      	ands	r5, r4
    10f0:	015b      	lsls	r3, r3, #5
    10f2:	2d01      	cmp	r5, #1
    10f4:	d008      	beq.n	1108 <_usb_d_dev_handle_setup+0x2c>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    10f6:	4914      	ldr	r1, [pc, #80]	; (1148 <_usb_d_dev_handle_setup+0x6c>)
    10f8:	0152      	lsls	r2, r2, #5
    10fa:	1852      	adds	r2, r2, r1
    10fc:	2110      	movs	r1, #16
    10fe:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1100:	4a12      	ldr	r2, [pc, #72]	; (114c <_usb_d_dev_handle_setup+0x70>)
    1102:	189b      	adds	r3, r3, r2
    1104:	7259      	strb	r1, [r3, #9]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    1106:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    1108:	2540      	movs	r5, #64	; 0x40
    110a:	422c      	tst	r4, r5
    110c:	d006      	beq.n	111c <_usb_d_dev_handle_setup+0x40>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    110e:	2680      	movs	r6, #128	; 0x80
		ept->flags.bits.is_busy = 0;
    1110:	43ac      	bics	r4, r5
    1112:	74cc      	strb	r4, [r1, #19]
    1114:	4c0d      	ldr	r4, [pc, #52]	; (114c <_usb_d_dev_handle_setup+0x70>)
    1116:	191c      	adds	r4, r3, r4
    1118:	7166      	strb	r6, [r4, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    111a:	71a5      	strb	r5, [r4, #6]
	ept->flags.bits.is_stalled = 0;
    111c:	2508      	movs	r5, #8
    111e:	7ccc      	ldrb	r4, [r1, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1120:	0152      	lsls	r2, r2, #5
    1122:	43ac      	bics	r4, r5
    1124:	74cc      	strb	r4, [r1, #19]
	bank->STATUS_BK.reg     = 0;
    1126:	2400      	movs	r4, #0
    1128:	4909      	ldr	r1, [pc, #36]	; (1150 <_usb_d_dev_handle_setup+0x74>)
    112a:	3148      	adds	r1, #72	; 0x48
    112c:	18c9      	adds	r1, r1, r3
    112e:	728c      	strb	r4, [r1, #10]
    1130:	768c      	strb	r4, [r1, #26]
    1132:	4905      	ldr	r1, [pc, #20]	; (1148 <_usb_d_dev_handle_setup+0x6c>)
    1134:	1852      	adds	r2, r2, r1
    1136:	216f      	movs	r1, #111	; 0x6f
    1138:	71d1      	strb	r1, [r2, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    113a:	4a04      	ldr	r2, [pc, #16]	; (114c <_usb_d_dev_handle_setup+0x70>)
    113c:	189b      	adds	r3, r3, r2
    113e:	7259      	strb	r1, [r3, #9]
	dev_inst.ep_callbacks.setup(ept->ep);
    1140:	4b04      	ldr	r3, [pc, #16]	; (1154 <_usb_d_dev_handle_setup+0x78>)
    1142:	689b      	ldr	r3, [r3, #8]
    1144:	4798      	blx	r3
    1146:	e7de      	b.n	1106 <_usb_d_dev_handle_setup+0x2a>
    1148:	41005000 	.word	0x41005000
    114c:	410050ff 	.word	0x410050ff
    1150:	20000188 	.word	0x20000188
    1154:	20000108 	.word	0x20000108

00001158 <_usb_d_dev_handle_stall>:
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1158:	2220      	movs	r2, #32
    115a:	230f      	movs	r3, #15
    115c:	408a      	lsls	r2, r1
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    115e:	b510      	push	{r4, lr}
    1160:	0004      	movs	r4, r0
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1162:	7c80      	ldrb	r0, [r0, #18]
    1164:	4905      	ldr	r1, [pc, #20]	; (117c <_usb_d_dev_handle_stall+0x24>)
    1166:	4003      	ands	r3, r0
    1168:	015b      	lsls	r3, r3, #5
    116a:	185b      	adds	r3, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    116c:	b2d2      	uxtb	r2, r2
    116e:	725a      	strb	r2, [r3, #9]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1170:	4b03      	ldr	r3, [pc, #12]	; (1180 <_usb_d_dev_handle_stall+0x28>)
    1172:	68a2      	ldr	r2, [r4, #8]
    1174:	691b      	ldr	r3, [r3, #16]
    1176:	2101      	movs	r1, #1
    1178:	4798      	blx	r3
}
    117a:	bd10      	pop	{r4, pc}
    117c:	410050ff 	.word	0x410050ff
    1180:	20000108 	.word	0x20000108

00001184 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1184:	b510      	push	{r4, lr}
    1186:	0003      	movs	r3, r0
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1188:	7c80      	ldrb	r0, [r0, #18]
    118a:	28ff      	cmp	r0, #255	; 0xff
    118c:	d009      	beq.n	11a2 <_usb_d_dev_trans_done+0x1e>
    118e:	2440      	movs	r4, #64	; 0x40
    1190:	7cda      	ldrb	r2, [r3, #19]
    1192:	4222      	tst	r2, r4
    1194:	d005      	beq.n	11a2 <_usb_d_dev_trans_done+0x1e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    1196:	43a2      	bics	r2, r4
    1198:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    119a:	4a02      	ldr	r2, [pc, #8]	; (11a4 <_usb_d_dev_trans_done+0x20>)
    119c:	6914      	ldr	r4, [r2, #16]
    119e:	689a      	ldr	r2, [r3, #8]
    11a0:	47a0      	blx	r4
}
    11a2:	bd10      	pop	{r4, pc}
    11a4:	20000108 	.word	0x20000108

000011a8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    11a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    11aa:	2425      	movs	r4, #37	; 0x25
    11ac:	ad01      	add	r5, sp, #4
	uint8_t epn = USB_EP_GET_N(ept->ep);
    11ae:	7c83      	ldrb	r3, [r0, #18]
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    11b0:	702c      	strb	r4, [r5, #0]
    11b2:	1924      	adds	r4, r4, r4
{
    11b4:	4694      	mov	ip, r2
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    11b6:	706c      	strb	r4, [r5, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    11b8:	2bff      	cmp	r3, #255	; 0xff
    11ba:	d01a      	beq.n	11f2 <_usb_d_dev_trans_stop+0x4a>
    11bc:	2740      	movs	r7, #64	; 0x40
    11be:	7cc4      	ldrb	r4, [r0, #19]
    11c0:	423c      	tst	r4, r7
    11c2:	d016      	beq.n	11f2 <_usb_d_dev_trans_stop+0x4a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    11c4:	240f      	movs	r4, #15
    11c6:	4023      	ands	r3, r4
    11c8:	001c      	movs	r4, r3
    11ca:	3408      	adds	r4, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    11cc:	0166      	lsls	r6, r4, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
    11ce:	2900      	cmp	r1, #0
    11d0:	d010      	beq.n	11f4 <_usb_d_dev_trans_stop+0x4c>
    11d2:	4f0a      	ldr	r7, [pc, #40]	; (11fc <_usb_d_dev_trans_stop+0x54>)
    11d4:	19f6      	adds	r6, r6, r7
    11d6:	2780      	movs	r7, #128	; 0x80
    11d8:	7137      	strb	r7, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    11da:	4a08      	ldr	r2, [pc, #32]	; (11fc <_usb_d_dev_trans_stop+0x54>)
    11dc:	0164      	lsls	r4, r4, #5
    11de:	18a4      	adds	r4, r4, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    11e0:	4a07      	ldr	r2, [pc, #28]	; (1200 <_usb_d_dev_trans_stop+0x58>)
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    11e2:	5c69      	ldrb	r1, [r5, r1]
    11e4:	015b      	lsls	r3, r3, #5
    11e6:	189b      	adds	r3, r3, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    11e8:	71e1      	strb	r1, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    11ea:	7259      	strb	r1, [r3, #9]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    11ec:	4661      	mov	r1, ip
    11ee:	4b05      	ldr	r3, [pc, #20]	; (1204 <_usb_d_dev_trans_stop+0x5c>)
    11f0:	4798      	blx	r3
}
    11f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    11f4:	4a01      	ldr	r2, [pc, #4]	; (11fc <_usb_d_dev_trans_stop+0x54>)
    11f6:	18b6      	adds	r6, r6, r2
    11f8:	7177      	strb	r7, [r6, #5]
    11fa:	e7ee      	b.n	11da <_usb_d_dev_trans_stop+0x32>
    11fc:	41005000 	.word	0x41005000
    1200:	410050ff 	.word	0x410050ff
    1204:	00001185 	.word	0x00001185

00001208 <_usb_d_dev_handle_trfail>:
{
    1208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    120a:	220f      	movs	r2, #15
    120c:	7c84      	ldrb	r4, [r0, #18]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    120e:	af01      	add	r7, sp, #4
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1210:	4014      	ands	r4, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1212:	3a0b      	subs	r2, #11
    1214:	703a      	strb	r2, [r7, #0]
    1216:	3204      	adds	r2, #4
    1218:	707a      	strb	r2, [r7, #1]
    121a:	0022      	movs	r2, r4
    121c:	3208      	adds	r2, #8
{
    121e:	000b      	movs	r3, r1
    1220:	4d2d      	ldr	r5, [pc, #180]	; (12d8 <_usb_d_dev_handle_trfail+0xd0>)
    1222:	0161      	lsls	r1, r4, #5

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1224:	0156      	lsls	r6, r2, #5
	uint8_t            eptype
    1226:	2b00      	cmp	r3, #0
    1228:	d024      	beq.n	1274 <_usb_d_dev_handle_trfail+0x6c>
    122a:	5dad      	ldrb	r5, [r5, r6]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    122c:	066d      	lsls	r5, r5, #25
    122e:	0f6d      	lsrs	r5, r5, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1230:	4e2a      	ldr	r6, [pc, #168]	; (12dc <_usb_d_dev_handle_trfail+0xd4>)
    1232:	3648      	adds	r6, #72	; 0x48
    1234:	46b4      	mov	ip, r6
    1236:	011e      	lsls	r6, r3, #4
    1238:	1876      	adds	r6, r6, r1
    123a:	44b4      	add	ip, r6
    123c:	4666      	mov	r6, ip
    123e:	7ab6      	ldrb	r6, [r6, #10]
    1240:	b2f6      	uxtb	r6, r6
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1242:	2d02      	cmp	r5, #2
    1244:	d11a      	bne.n	127c <_usb_d_dev_handle_trfail+0x74>
    1246:	3d01      	subs	r5, #1
    1248:	422e      	tst	r6, r5
    124a:	d017      	beq.n	127c <_usb_d_dev_handle_trfail+0x74>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    124c:	4664      	mov	r4, ip
    124e:	7aa4      	ldrb	r4, [r4, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1250:	0152      	lsls	r2, r2, #5
    1252:	43ac      	bics	r4, r5
    1254:	4665      	mov	r5, ip
    1256:	72ac      	strb	r4, [r5, #10]
    1258:	4d1f      	ldr	r5, [pc, #124]	; (12d8 <_usb_d_dev_handle_trfail+0xd0>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    125a:	5cfc      	ldrb	r4, [r7, r3]
    125c:	1952      	adds	r2, r2, r5
    125e:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1260:	4a1f      	ldr	r2, [pc, #124]	; (12e0 <_usb_d_dev_handle_trfail+0xd8>)
    1262:	1889      	adds	r1, r1, r2
    1264:	724c      	strb	r4, [r1, #9]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1266:	1e59      	subs	r1, r3, #1
    1268:	418b      	sbcs	r3, r1
    126a:	2204      	movs	r2, #4
    126c:	b2d9      	uxtb	r1, r3
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    126e:	4b1d      	ldr	r3, [pc, #116]	; (12e4 <_usb_d_dev_handle_trfail+0xdc>)
    1270:	4798      	blx	r3
}
    1272:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1274:	5dae      	ldrb	r6, [r5, r6]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1276:	2507      	movs	r5, #7
    1278:	4035      	ands	r5, r6
    127a:	e7d9      	b.n	1230 <_usb_d_dev_handle_trfail+0x28>
	} else if (st.bit.ERRORFLOW) {
    127c:	2502      	movs	r5, #2
    127e:	402e      	ands	r6, r5
    1280:	d019      	beq.n	12b6 <_usb_d_dev_handle_trfail+0xae>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1282:	4666      	mov	r6, ip
    1284:	7ab6      	ldrb	r6, [r6, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1286:	7cc4      	ldrb	r4, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1288:	43ae      	bics	r6, r5
    128a:	4665      	mov	r5, ip
    128c:	72ae      	strb	r6, [r5, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    128e:	4e12      	ldr	r6, [pc, #72]	; (12d8 <_usb_d_dev_handle_trfail+0xd0>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1290:	5cfd      	ldrb	r5, [r7, r3]
    1292:	0152      	lsls	r2, r2, #5
    1294:	1992      	adds	r2, r2, r6
    1296:	71d5      	strb	r5, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1298:	4a11      	ldr	r2, [pc, #68]	; (12e0 <_usb_d_dev_handle_trfail+0xd8>)
    129a:	1889      	adds	r1, r1, r2
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    129c:	2207      	movs	r2, #7
    129e:	724d      	strb	r5, [r1, #9]
    12a0:	4022      	ands	r2, r4
    12a2:	2a01      	cmp	r2, #1
    12a4:	d1e5      	bne.n	1272 <_usb_d_dev_handle_trfail+0x6a>
    12a6:	0662      	lsls	r2, r4, #25
    12a8:	d5e3      	bpl.n	1272 <_usb_d_dev_handle_trfail+0x6a>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    12aa:	7cc1      	ldrb	r1, [r0, #19]
    12ac:	09c9      	lsrs	r1, r1, #7
    12ae:	428b      	cmp	r3, r1
    12b0:	d0df      	beq.n	1272 <_usb_d_dev_handle_trfail+0x6a>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    12b2:	2200      	movs	r2, #0
    12b4:	e7db      	b.n	126e <_usb_d_dev_handle_trfail+0x66>
	bank->STATUS_BK.reg     = 0;
    12b6:	0060      	lsls	r0, r4, #1
    12b8:	4a08      	ldr	r2, [pc, #32]	; (12dc <_usb_d_dev_handle_trfail+0xd4>)
    12ba:	18c0      	adds	r0, r0, r3
    12bc:	3248      	adds	r2, #72	; 0x48
    12be:	0100      	lsls	r0, r0, #4
    12c0:	1812      	adds	r2, r2, r0
    12c2:	7296      	strb	r6, [r2, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    12c4:	4a08      	ldr	r2, [pc, #32]	; (12e8 <_usb_d_dev_handle_trfail+0xe0>)
    12c6:	0164      	lsls	r4, r4, #5
    12c8:	18a4      	adds	r4, r4, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    12ca:	4a05      	ldr	r2, [pc, #20]	; (12e0 <_usb_d_dev_handle_trfail+0xd8>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    12cc:	5cfb      	ldrb	r3, [r7, r3]
    12ce:	1889      	adds	r1, r1, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    12d0:	71e3      	strb	r3, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    12d2:	724b      	strb	r3, [r1, #9]
}
    12d4:	e7cd      	b.n	1272 <_usb_d_dev_handle_trfail+0x6a>
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	41005000 	.word	0x41005000
    12dc:	20000188 	.word	0x20000188
    12e0:	410050ff 	.word	0x410050ff
    12e4:	000011a9 	.word	0x000011a9
    12e8:	41005100 	.word	0x41005100

000012ec <_usb_d_dev_reset_epts>:
{
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	4d0a      	ldr	r5, [pc, #40]	; (1318 <_usb_d_dev_reset_epts+0x2c>)
		dev_inst.ep[i].ep       = 0xFF;
    12f0:	26ff      	movs	r6, #255	; 0xff
    12f2:	002c      	movs	r4, r5
    12f4:	35c8      	adds	r5, #200	; 0xc8
    12f6:	3414      	adds	r4, #20
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    12f8:	2103      	movs	r1, #3
    12fa:	0020      	movs	r0, r4
    12fc:	4b07      	ldr	r3, [pc, #28]	; (131c <_usb_d_dev_reset_epts+0x30>)
    12fe:	4798      	blx	r3
		dev_inst.ep[i].flags.u8 = 0;
    1300:	2100      	movs	r1, #0
		dev_inst.ep[i].ep       = 0xFF;
    1302:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1304:	74e1      	strb	r1, [r4, #19]
    1306:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1308:	42ac      	cmp	r4, r5
    130a:	d1f5      	bne.n	12f8 <_usb_d_dev_reset_epts+0xc>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    130c:	4804      	ldr	r0, [pc, #16]	; (1320 <_usb_d_dev_reset_epts+0x34>)
    130e:	2260      	movs	r2, #96	; 0x60
    1310:	4b04      	ldr	r3, [pc, #16]	; (1324 <_usb_d_dev_reset_epts+0x38>)
    1312:	3048      	adds	r0, #72	; 0x48
    1314:	4798      	blx	r3
}
    1316:	bd70      	pop	{r4, r5, r6, pc}
    1318:	20000108 	.word	0x20000108
    131c:	00001185 	.word	0x00001185
    1320:	20000188 	.word	0x20000188
    1324:	00002967 	.word	0x00002967

00001328 <_usb_d_dev_in_next>:
{
    1328:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    132a:	250f      	movs	r5, #15
{
    132c:	b085      	sub	sp, #20
    132e:	9100      	str	r1, [sp, #0]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1330:	7c83      	ldrb	r3, [r0, #18]
{
    1332:	0004      	movs	r4, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1334:	401d      	ands	r5, r3
    1336:	9301      	str	r3, [sp, #4]
    1338:	016b      	lsls	r3, r5, #5
    133a:	9302      	str	r3, [sp, #8]
    133c:	2300      	movs	r3, #0
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    133e:	4299      	cmp	r1, r3
    1340:	d006      	beq.n	1350 <_usb_d_dev_in_next+0x28>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1342:	4b4d      	ldr	r3, [pc, #308]	; (1478 <_usb_d_dev_in_next+0x150>)
    1344:	016a      	lsls	r2, r5, #5
    1346:	3348      	adds	r3, #72	; 0x48
    1348:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    134a:	695b      	ldr	r3, [r3, #20]
    134c:	049b      	lsls	r3, r3, #18
    134e:	0c9b      	lsrs	r3, r3, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1350:	8a26      	ldrh	r6, [r4, #16]
    1352:	4a4a      	ldr	r2, [pc, #296]	; (147c <_usb_d_dev_in_next+0x154>)
    1354:	9603      	str	r6, [sp, #12]
    1356:	4296      	cmp	r6, r2
    1358:	d002      	beq.n	1360 <_usb_d_dev_in_next+0x38>
    135a:	1e72      	subs	r2, r6, #1
    135c:	b292      	uxth	r2, r2
    135e:	9203      	str	r2, [sp, #12]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1360:	7ce2      	ldrb	r2, [r4, #19]
    1362:	4694      	mov	ip, r2
    1364:	2207      	movs	r2, #7
    1366:	4661      	mov	r1, ip
    1368:	4011      	ands	r1, r2
	if (isr) {
    136a:	9a00      	ldr	r2, [sp, #0]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    136c:	9102      	str	r1, [sp, #8]
	if (isr) {
    136e:	2a00      	cmp	r2, #0
    1370:	d004      	beq.n	137c <_usb_d_dev_in_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1372:	4943      	ldr	r1, [pc, #268]	; (1480 <_usb_d_dev_in_next+0x158>)
    1374:	016a      	lsls	r2, r5, #5
    1376:	1852      	adds	r2, r2, r1
    1378:	2102      	movs	r1, #2
    137a:	71d1      	strb	r1, [r2, #7]
	ept->trans_count += trans_count;
    137c:	68a2      	ldr	r2, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    137e:	6867      	ldr	r7, [r4, #4]
	ept->trans_count += trans_count;
    1380:	1899      	adds	r1, r3, r2
    1382:	60a1      	str	r1, [r4, #8]
    1384:	016a      	lsls	r2, r5, #5
	if (ept->trans_count < ept->trans_size) {
    1386:	42b9      	cmp	r1, r7
    1388:	d240      	bcs.n	140c <_usb_d_dev_in_next+0xe4>
		if (ept->flags.bits.use_cache) {
    138a:	4660      	mov	r0, ip
		trans_next = ept->trans_size - ept->trans_count;
    138c:	1a7f      	subs	r7, r7, r1
    138e:	b2bb      	uxth	r3, r7
    1390:	4f39      	ldr	r7, [pc, #228]	; (1478 <_usb_d_dev_in_next+0x150>)
		if (ept->flags.bits.use_cache) {
    1392:	0680      	lsls	r0, r0, #26
    1394:	d52e      	bpl.n	13f4 <_usb_d_dev_in_next+0xcc>
    1396:	1c32      	adds	r2, r6, #0
    1398:	429e      	cmp	r6, r3
    139a:	d900      	bls.n	139e <_usb_d_dev_in_next+0x76>
    139c:	1c1a      	adds	r2, r3, #0
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    139e:	6823      	ldr	r3, [r4, #0]
    13a0:	b296      	uxth	r6, r2
    13a2:	1859      	adds	r1, r3, r1
    13a4:	0032      	movs	r2, r6
    13a6:	4b37      	ldr	r3, [pc, #220]	; (1484 <_usb_d_dev_in_next+0x15c>)
    13a8:	68e0      	ldr	r0, [r4, #12]
    13aa:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    13ac:	4b32      	ldr	r3, [pc, #200]	; (1478 <_usb_d_dev_in_next+0x150>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    13ae:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    13b0:	0169      	lsls	r1, r5, #5
    13b2:	185b      	adds	r3, r3, r1
    13b4:	659a      	str	r2, [r3, #88]	; 0x58
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    13b6:	016b      	lsls	r3, r5, #5
    13b8:	18ff      	adds	r7, r7, r3
    13ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    13bc:	04b6      	lsls	r6, r6, #18
    13be:	0cb2      	lsrs	r2, r6, #18
    13c0:	0b9e      	lsrs	r6, r3, #14
    13c2:	03b6      	lsls	r6, r6, #14
    13c4:	4316      	orrs	r6, r2
    13c6:	65fe      	str	r6, [r7, #92]	; 0x5c
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    13c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    13ca:	4a2f      	ldr	r2, [pc, #188]	; (1488 <_usb_d_dev_in_next+0x160>)
    13cc:	4013      	ands	r3, r2
    13ce:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (!isr) {
    13d0:	9b00      	ldr	r3, [sp, #0]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d108      	bne.n	13e8 <_usb_d_dev_in_next+0xc0>
		if (is_ctrl) {
    13d6:	9b02      	ldr	r3, [sp, #8]
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    13d8:	224e      	movs	r2, #78	; 0x4e
		if (is_ctrl) {
    13da:	2b01      	cmp	r3, #1
    13dc:	d000      	beq.n	13e0 <_usb_d_dev_in_next+0xb8>
			inten = USB_D_BANK1_INT_FLAGS;
    13de:	3a04      	subs	r2, #4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    13e0:	492a      	ldr	r1, [pc, #168]	; (148c <_usb_d_dev_in_next+0x164>)
    13e2:	016b      	lsls	r3, r5, #5
    13e4:	185b      	adds	r3, r3, r1
    13e6:	729a      	strb	r2, [r3, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    13e8:	4b25      	ldr	r3, [pc, #148]	; (1480 <_usb_d_dev_in_next+0x158>)
    13ea:	016d      	lsls	r5, r5, #5
    13ec:	18ed      	adds	r5, r5, r3
    13ee:	2380      	movs	r3, #128	; 0x80
    13f0:	716b      	strb	r3, [r5, #5]
    13f2:	e03a      	b.n	146a <_usb_d_dev_in_next+0x142>
    13f4:	2080      	movs	r0, #128	; 0x80
    13f6:	1c1e      	adds	r6, r3, #0
    13f8:	0180      	lsls	r0, r0, #6
    13fa:	4283      	cmp	r3, r0
    13fc:	d900      	bls.n	1400 <_usb_d_dev_in_next+0xd8>
    13fe:	1c06      	adds	r6, r0, #0
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1400:	6823      	ldr	r3, [r4, #0]
	bank->ADDR.reg          = addr;
    1402:	18ba      	adds	r2, r7, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1404:	1859      	adds	r1, r3, r1
    1406:	b2b6      	uxth	r6, r6
	bank->ADDR.reg          = addr;
    1408:	6591      	str	r1, [r2, #88]	; 0x58
    140a:	e7d4      	b.n	13b6 <_usb_d_dev_in_next+0x8e>
	} else if (ept->flags.bits.need_zlp) {
    140c:	2710      	movs	r7, #16
    140e:	4660      	mov	r0, ip
    1410:	4238      	tst	r0, r7
    1412:	d00e      	beq.n	1432 <_usb_d_dev_in_next+0x10a>
		ept->flags.bits.need_zlp = 0;
    1414:	7ce3      	ldrb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1416:	016a      	lsls	r2, r5, #5
		ept->flags.bits.need_zlp = 0;
    1418:	43bb      	bics	r3, r7
    141a:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    141c:	4b16      	ldr	r3, [pc, #88]	; (1478 <_usb_d_dev_in_next+0x150>)
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    141e:	491a      	ldr	r1, [pc, #104]	; (1488 <_usb_d_dev_in_next+0x160>)
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1420:	189b      	adds	r3, r3, r2
    1422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    1424:	0b92      	lsrs	r2, r2, #14
    1426:	0392      	lsls	r2, r2, #14
    1428:	65da      	str	r2, [r3, #92]	; 0x5c
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    142a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    142c:	400a      	ands	r2, r1
    142e:	65da      	str	r2, [r3, #92]	; 0x5c
    1430:	e7ce      	b.n	13d0 <_usb_d_dev_in_next+0xa8>
	if (is_ctrl) {
    1432:	9802      	ldr	r0, [sp, #8]
    1434:	2801      	cmp	r0, #1
    1436:	d11a      	bne.n	146e <_usb_d_dev_in_next+0x146>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1438:	254b      	movs	r5, #75	; 0x4b
    143a:	4814      	ldr	r0, [pc, #80]	; (148c <_usb_d_dev_in_next+0x164>)
    143c:	1812      	adds	r2, r2, r0
    143e:	7255      	strb	r5, [r2, #9]
	if (last_pkt == ept->size) {
    1440:	9a03      	ldr	r2, [sp, #12]
    1442:	4013      	ands	r3, r2
    1444:	429e      	cmp	r6, r3
    1446:	d10c      	bne.n	1462 <_usb_d_dev_in_next+0x13a>
		ept->flags.bits.is_busy = 0;
    1448:	2540      	movs	r5, #64	; 0x40
    144a:	7ce3      	ldrb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    144c:	9801      	ldr	r0, [sp, #4]
		ept->flags.bits.is_busy = 0;
    144e:	43ab      	bics	r3, r5
    1450:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1452:	4b0f      	ldr	r3, [pc, #60]	; (1490 <_usb_d_dev_in_next+0x168>)
    1454:	68db      	ldr	r3, [r3, #12]
    1456:	4798      	blx	r3
    1458:	2800      	cmp	r0, #0
    145a:	d106      	bne.n	146a <_usb_d_dev_in_next+0x142>
		ept->flags.bits.is_busy = 1;
    145c:	7ce3      	ldrb	r3, [r4, #19]
    145e:	432b      	orrs	r3, r5
    1460:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1462:	2100      	movs	r1, #0
    1464:	0020      	movs	r0, r4
    1466:	4b0b      	ldr	r3, [pc, #44]	; (1494 <_usb_d_dev_in_next+0x16c>)
    1468:	4798      	blx	r3
}
    146a:	b005      	add	sp, #20
    146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    146e:	4807      	ldr	r0, [pc, #28]	; (148c <_usb_d_dev_in_next+0x164>)
    1470:	254a      	movs	r5, #74	; 0x4a
    1472:	1812      	adds	r2, r2, r0
    1474:	e7e3      	b.n	143e <_usb_d_dev_in_next+0x116>
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	20000188 	.word	0x20000188
    147c:	000003ff 	.word	0x000003ff
    1480:	41005100 	.word	0x41005100
    1484:	00002955 	.word	0x00002955
    1488:	f0003fff 	.word	0xf0003fff
    148c:	410050ff 	.word	0x410050ff
    1490:	20000108 	.word	0x20000108
    1494:	00001185 	.word	0x00001185

00001498 <_usb_d_dev_out_next>:
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1498:	230f      	movs	r3, #15
{
    149a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    149c:	7c82      	ldrb	r2, [r0, #18]
{
    149e:	b087      	sub	sp, #28
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    14a0:	401a      	ands	r2, r3
    14a2:	0153      	lsls	r3, r2, #5
{
    14a4:	0004      	movs	r4, r0
    14a6:	1e0d      	subs	r5, r1, #0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    14a8:	9201      	str	r2, [sp, #4]
    14aa:	9305      	str	r3, [sp, #20]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    14ac:	d068      	beq.n	1580 <_usb_d_dev_out_next+0xe8>
    14ae:	9a05      	ldr	r2, [sp, #20]
    14b0:	4b67      	ldr	r3, [pc, #412]	; (1650 <_usb_d_dev_out_next+0x1b8>)
    14b2:	189b      	adds	r3, r3, r2
    14b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    14b6:	0100      	lsls	r0, r0, #4
    14b8:	0c82      	lsrs	r2, r0, #18
    14ba:	9203      	str	r2, [sp, #12]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    14bc:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
    14be:	04bf      	lsls	r7, r7, #18
    14c0:	0cbf      	lsrs	r7, r7, #18
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    14c2:	8a23      	ldrh	r3, [r4, #16]
    14c4:	9302      	str	r3, [sp, #8]
    14c6:	9a02      	ldr	r2, [sp, #8]
    14c8:	4b62      	ldr	r3, [pc, #392]	; (1654 <_usb_d_dev_out_next+0x1bc>)
    14ca:	429a      	cmp	r2, r3
    14cc:	d003      	beq.n	14d6 <_usb_d_dev_out_next+0x3e>
    14ce:	0013      	movs	r3, r2
    14d0:	3b01      	subs	r3, #1
    14d2:	b29b      	uxth	r3, r3
    14d4:	9302      	str	r3, [sp, #8]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    14d6:	2307      	movs	r3, #7
    14d8:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
    14da:	9e02      	ldr	r6, [sp, #8]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    14dc:	4013      	ands	r3, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    14de:	403e      	ands	r6, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    14e0:	9304      	str	r3, [sp, #16]
	if (isr) {
    14e2:	2d00      	cmp	r5, #0
    14e4:	d005      	beq.n	14f2 <_usb_d_dev_out_next+0x5a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    14e6:	9b01      	ldr	r3, [sp, #4]
    14e8:	495b      	ldr	r1, [pc, #364]	; (1658 <_usb_d_dev_out_next+0x1c0>)
    14ea:	015b      	lsls	r3, r3, #5
    14ec:	185b      	adds	r3, r3, r1
    14ee:	2101      	movs	r1, #1
    14f0:	71d9      	strb	r1, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    14f2:	0693      	lsls	r3, r2, #26
    14f4:	d50d      	bpl.n	1512 <_usb_d_dev_out_next+0x7a>
    14f6:	6862      	ldr	r2, [r4, #4]
    14f8:	2a00      	cmp	r2, #0
    14fa:	d00a      	beq.n	1512 <_usb_d_dev_out_next+0x7a>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    14fc:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    14fe:	6823      	ldr	r3, [r4, #0]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1500:	1a12      	subs	r2, r2, r0
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1502:	b292      	uxth	r2, r2
    1504:	1818      	adds	r0, r3, r0
    1506:	68e1      	ldr	r1, [r4, #12]
    1508:	4296      	cmp	r6, r2
    150a:	d200      	bcs.n	150e <_usb_d_dev_out_next+0x76>
    150c:	0032      	movs	r2, r6
    150e:	4b53      	ldr	r3, [pc, #332]	; (165c <_usb_d_dev_out_next+0x1c4>)
    1510:	4798      	blx	r3
    1512:	9a01      	ldr	r2, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1514:	6863      	ldr	r3, [r4, #4]
    1516:	0151      	lsls	r1, r2, #5
    1518:	2b00      	cmp	r3, #0
    151a:	d134      	bne.n	1586 <_usb_d_dev_out_next+0xee>
    151c:	2010      	movs	r0, #16
    151e:	7ce2      	ldrb	r2, [r4, #19]
    1520:	4202      	tst	r2, r0
    1522:	d100      	bne.n	1526 <_usb_d_dev_out_next+0x8e>
    1524:	e08b      	b.n	163e <_usb_d_dev_out_next+0x1a6>
		ept->flags.bits.use_cache = 1;
    1526:	4382      	bics	r2, r0
    1528:	3320      	adds	r3, #32
    152a:	431a      	orrs	r2, r3
    152c:	74e2      	strb	r2, [r4, #19]
	bank->ADDR.reg          = addr;
    152e:	4b48      	ldr	r3, [pc, #288]	; (1650 <_usb_d_dev_out_next+0x1b8>)
    1530:	9a05      	ldr	r2, [sp, #20]
    1532:	68e1      	ldr	r1, [r4, #12]
    1534:	189b      	adds	r3, r3, r2
    1536:	6499      	str	r1, [r3, #72]	; 0x48
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1538:	8a21      	ldrh	r1, [r4, #16]
	bank->ADDR.reg          = addr;
    153a:	001a      	movs	r2, r3
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    153c:	4848      	ldr	r0, [pc, #288]	; (1660 <_usb_d_dev_out_next+0x1c8>)
    153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1540:	0489      	lsls	r1, r1, #18
    1542:	0909      	lsrs	r1, r1, #4
    1544:	4003      	ands	r3, r0
    1546:	430b      	orrs	r3, r1
    1548:	64d3      	str	r3, [r2, #76]	; 0x4c
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    154a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    154c:	0b9b      	lsrs	r3, r3, #14
    154e:	039b      	lsls	r3, r3, #14
    1550:	64d3      	str	r3, [r2, #76]	; 0x4c
	if (!isr) {
    1552:	2d00      	cmp	r5, #0
    1554:	d10d      	bne.n	1572 <_usb_d_dev_out_next+0xda>
    1556:	9b01      	ldr	r3, [sp, #4]
		if (is_ctrl) {
    1558:	9904      	ldr	r1, [sp, #16]
    155a:	015a      	lsls	r2, r3, #5
			inten = USB_D_BANK0_INT_FLAGS;
    155c:	2325      	movs	r3, #37	; 0x25
		if (is_ctrl) {
    155e:	2901      	cmp	r1, #1
    1560:	d104      	bne.n	156c <_usb_d_dev_out_next+0xd4>
	bank->STATUS_BK.reg     = 0;
    1562:	4b3b      	ldr	r3, [pc, #236]	; (1650 <_usb_d_dev_out_next+0x1b8>)
    1564:	3348      	adds	r3, #72	; 0x48
    1566:	189b      	adds	r3, r3, r2
    1568:	769d      	strb	r5, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    156a:	232d      	movs	r3, #45	; 0x2d
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    156c:	493d      	ldr	r1, [pc, #244]	; (1664 <_usb_d_dev_out_next+0x1cc>)
    156e:	1852      	adds	r2, r2, r1
    1570:	7293      	strb	r3, [r2, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1572:	9b01      	ldr	r3, [sp, #4]
    1574:	4a38      	ldr	r2, [pc, #224]	; (1658 <_usb_d_dev_out_next+0x1c0>)
    1576:	015b      	lsls	r3, r3, #5
    1578:	189b      	adds	r3, r3, r2
    157a:	2240      	movs	r2, #64	; 0x40
    157c:	711a      	strb	r2, [r3, #4]
    157e:	e01f      	b.n	15c0 <_usb_d_dev_out_next+0x128>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1580:	9103      	str	r1, [sp, #12]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1582:	000f      	movs	r7, r1
    1584:	e79d      	b.n	14c2 <_usb_d_dev_out_next+0x2a>
	} else if (isr && last_pkt < ept->size) {
    1586:	2d00      	cmp	r5, #0
    1588:	d01c      	beq.n	15c4 <_usb_d_dev_out_next+0x12c>
    158a:	8a22      	ldrh	r2, [r4, #16]
    158c:	42b2      	cmp	r2, r6
    158e:	d919      	bls.n	15c4 <_usb_d_dev_out_next+0x12c>
		ept->flags.bits.need_zlp = 0;
    1590:	2210      	movs	r2, #16
    1592:	7ce3      	ldrb	r3, [r4, #19]
    1594:	4393      	bics	r3, r2
    1596:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1598:	68a3      	ldr	r3, [r4, #8]
    159a:	19df      	adds	r7, r3, r7
    159c:	60a7      	str	r7, [r4, #8]
	if (is_ctrl) {
    159e:	9b04      	ldr	r3, [sp, #16]
    15a0:	2b01      	cmp	r3, #1
    15a2:	d148      	bne.n	1636 <_usb_d_dev_out_next+0x19e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    15a4:	4b2f      	ldr	r3, [pc, #188]	; (1664 <_usb_d_dev_out_next+0x1cc>)
    15a6:	18c9      	adds	r1, r1, r3
    15a8:	232d      	movs	r3, #45	; 0x2d
    15aa:	724b      	strb	r3, [r1, #9]
	if (0 == epn) {
    15ac:	9b01      	ldr	r3, [sp, #4]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d102      	bne.n	15b8 <_usb_d_dev_out_next+0x120>
	bank->ADDR.reg          = addr;
    15b2:	4b27      	ldr	r3, [pc, #156]	; (1650 <_usb_d_dev_out_next+0x1b8>)
    15b4:	68e2      	ldr	r2, [r4, #12]
    15b6:	649a      	str	r2, [r3, #72]	; 0x48
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    15b8:	2100      	movs	r1, #0
    15ba:	0020      	movs	r0, r4
    15bc:	4b2a      	ldr	r3, [pc, #168]	; (1668 <_usb_d_dev_out_next+0x1d0>)
    15be:	4798      	blx	r3
}
    15c0:	b007      	add	sp, #28
    15c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->trans_count += trans_size;
    15c4:	68a6      	ldr	r6, [r4, #8]
    15c6:	9a03      	ldr	r2, [sp, #12]
    15c8:	46b4      	mov	ip, r6
    15ca:	4462      	add	r2, ip
    15cc:	0010      	movs	r0, r2
    15ce:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    15d0:	4293      	cmp	r3, r2
    15d2:	d9e4      	bls.n	159e <_usb_d_dev_out_next+0x106>
			if (ept->flags.bits.use_cache) {
    15d4:	2620      	movs	r6, #32
			trans_next = ept->trans_size - ept->trans_count;
    15d6:	1a9b      	subs	r3, r3, r2
			if (ept->flags.bits.use_cache) {
    15d8:	7ce2      	ldrb	r2, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    15da:	b29b      	uxth	r3, r3
    15dc:	8a27      	ldrh	r7, [r4, #16]
			if (ept->flags.bits.use_cache) {
    15de:	4232      	tst	r2, r6
    15e0:	d012      	beq.n	1608 <_usb_d_dev_out_next+0x170>
    15e2:	1c38      	adds	r0, r7, #0
    15e4:	429f      	cmp	r7, r3
    15e6:	d900      	bls.n	15ea <_usb_d_dev_out_next+0x152>
    15e8:	1c18      	adds	r0, r3, #0
	bank->ADDR.reg          = addr;
    15ea:	9a01      	ldr	r2, [sp, #4]
    15ec:	b283      	uxth	r3, r0
    15ee:	0150      	lsls	r0, r2, #5
    15f0:	4a17      	ldr	r2, [pc, #92]	; (1650 <_usb_d_dev_out_next+0x1b8>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    15f2:	68e4      	ldr	r4, [r4, #12]
	bank->ADDR.reg          = addr;
    15f4:	1810      	adds	r0, r2, r0
    15f6:	6484      	str	r4, [r0, #72]	; 0x48
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    15f8:	4a15      	ldr	r2, [pc, #84]	; (1650 <_usb_d_dev_out_next+0x1b8>)
    15fa:	4819      	ldr	r0, [pc, #100]	; (1660 <_usb_d_dev_out_next+0x1c8>)
    15fc:	1852      	adds	r2, r2, r1
    15fe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    1600:	049b      	lsls	r3, r3, #18
    1602:	091b      	lsrs	r3, r3, #4
    1604:	4001      	ands	r1, r0
    1606:	e79e      	b.n	1546 <_usb_d_dev_out_next+0xae>
				if (trans_next > ept->size) {
    1608:	42bb      	cmp	r3, r7
    160a:	d90d      	bls.n	1628 <_usb_d_dev_out_next+0x190>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    160c:	2680      	movs	r6, #128	; 0x80
    160e:	01b6      	lsls	r6, r6, #6
    1610:	42b3      	cmp	r3, r6
    1612:	d80e      	bhi.n	1632 <_usb_d_dev_out_next+0x19a>
    1614:	9a02      	ldr	r2, [sp, #8]
    1616:	4393      	bics	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1618:	6824      	ldr	r4, [r4, #0]
	bank->ADDR.reg          = addr;
    161a:	9a01      	ldr	r2, [sp, #4]
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    161c:	1820      	adds	r0, r4, r0
	bank->ADDR.reg          = addr;
    161e:	0154      	lsls	r4, r2, #5
    1620:	4a0b      	ldr	r2, [pc, #44]	; (1650 <_usb_d_dev_out_next+0x1b8>)
    1622:	1914      	adds	r4, r2, r4
    1624:	64a0      	str	r0, [r4, #72]	; 0x48
    1626:	e7e7      	b.n	15f8 <_usb_d_dev_out_next+0x160>
				} else if (trans_next < ept->size) {
    1628:	42bb      	cmp	r3, r7
    162a:	d2f5      	bcs.n	1618 <_usb_d_dev_out_next+0x180>
					ept->flags.bits.use_cache = 1;
    162c:	4316      	orrs	r6, r2
    162e:	74e6      	strb	r6, [r4, #19]
    1630:	e7f2      	b.n	1618 <_usb_d_dev_out_next+0x180>
						trans_next = USB_D_DEV_TRANS_MAX;
    1632:	0033      	movs	r3, r6
    1634:	e7f0      	b.n	1618 <_usb_d_dev_out_next+0x180>
    1636:	4b0b      	ldr	r3, [pc, #44]	; (1664 <_usb_d_dev_out_next+0x1cc>)
    1638:	18c9      	adds	r1, r1, r3
    163a:	2325      	movs	r3, #37	; 0x25
    163c:	e7b5      	b.n	15aa <_usb_d_dev_out_next+0x112>
	} else if (isr && last_pkt < ept->size) {
    163e:	2d00      	cmp	r5, #0
    1640:	d1a3      	bne.n	158a <_usb_d_dev_out_next+0xf2>
		ept->trans_count += trans_size;
    1642:	68a2      	ldr	r2, [r4, #8]
    1644:	9b03      	ldr	r3, [sp, #12]
    1646:	4694      	mov	ip, r2
    1648:	4463      	add	r3, ip
    164a:	60a3      	str	r3, [r4, #8]
    164c:	e7a7      	b.n	159e <_usb_d_dev_out_next+0x106>
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	20000188 	.word	0x20000188
    1654:	000003ff 	.word	0x000003ff
    1658:	41005100 	.word	0x41005100
    165c:	00002955 	.word	0x00002955
    1660:	f0003fff 	.word	0xf0003fff
    1664:	410050ff 	.word	0x410050ff
    1668:	00001185 	.word	0x00001185

0000166c <_usbd_ep_pcksize_size>:
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    166c:	2380      	movs	r3, #128	; 0x80
{
    166e:	0002      	movs	r2, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1670:	009b      	lsls	r3, r3, #2
    1672:	2007      	movs	r0, #7
    1674:	429a      	cmp	r2, r3
    1676:	d814      	bhi.n	16a2 <_usbd_ep_pcksize_size+0x36>
    1678:	3b01      	subs	r3, #1
    167a:	3bff      	subs	r3, #255	; 0xff
    167c:	3801      	subs	r0, #1
    167e:	429a      	cmp	r2, r3
    1680:	d80f      	bhi.n	16a2 <_usbd_ep_pcksize_size+0x36>
    1682:	3801      	subs	r0, #1
    1684:	2a80      	cmp	r2, #128	; 0x80
    1686:	d80c      	bhi.n	16a2 <_usbd_ep_pcksize_size+0x36>
    1688:	3801      	subs	r0, #1
    168a:	2a40      	cmp	r2, #64	; 0x40
    168c:	d809      	bhi.n	16a2 <_usbd_ep_pcksize_size+0x36>
    168e:	3801      	subs	r0, #1
    1690:	2a20      	cmp	r2, #32
    1692:	d806      	bhi.n	16a2 <_usbd_ep_pcksize_size+0x36>
    1694:	3801      	subs	r0, #1
    1696:	2a10      	cmp	r2, #16
    1698:	d803      	bhi.n	16a2 <_usbd_ep_pcksize_size+0x36>
    169a:	3006      	adds	r0, #6
    169c:	4290      	cmp	r0, r2
    169e:	4180      	sbcs	r0, r0
    16a0:	4240      	negs	r0, r0
}
    16a2:	4770      	bx	lr

000016a4 <_usb_d_dev_init>:
{
    16a4:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    16a6:	4c2a      	ldr	r4, [pc, #168]	; (1750 <_usb_d_dev_init+0xac>)
    16a8:	78a3      	ldrb	r3, [r4, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    16aa:	07db      	lsls	r3, r3, #31
    16ac:	d40d      	bmi.n	16ca <_usb_d_dev_init+0x26>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16ae:	2303      	movs	r3, #3
    16b0:	78a2      	ldrb	r2, [r4, #2]
    16b2:	421a      	tst	r2, r3
    16b4:	d1fc      	bne.n	16b0 <_usb_d_dev_init+0xc>
static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
	tmp &= mask;
    16b6:	2202      	movs	r2, #2
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    16b8:	7823      	ldrb	r3, [r4, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    16ba:	4213      	tst	r3, r2
    16bc:	d13c      	bne.n	1738 <_usb_d_dev_init+0x94>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    16be:	2301      	movs	r3, #1
    16c0:	7023      	strb	r3, [r4, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16c2:	3302      	adds	r3, #2
    16c4:	78a2      	ldrb	r2, [r4, #2]
    16c6:	421a      	tst	r2, r3
    16c8:	d1fc      	bne.n	16c4 <_usb_d_dev_init+0x20>
    16ca:	2301      	movs	r3, #1
    16cc:	78a2      	ldrb	r2, [r4, #2]
    16ce:	421a      	tst	r2, r3
    16d0:	d1fc      	bne.n	16cc <_usb_d_dev_init+0x28>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    16d2:	4b20      	ldr	r3, [pc, #128]	; (1754 <_usb_d_dev_init+0xb0>)
    16d4:	4a20      	ldr	r2, [pc, #128]	; (1758 <_usb_d_dev_init+0xb4>)
    16d6:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    16d8:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    16da:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    16dc:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    16de:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    16e0:	4b1e      	ldr	r3, [pc, #120]	; (175c <_usb_d_dev_init+0xb8>)
    16e2:	4798      	blx	r3
	uint32_t pad_transn
    16e4:	201f      	movs	r0, #31
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    16e6:	4b1e      	ldr	r3, [pc, #120]	; (1760 <_usb_d_dev_init+0xbc>)
    16e8:	681a      	ldr	r2, [r3, #0]
    16ea:	0b53      	lsrs	r3, r2, #13
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    16ec:	0c91      	lsrs	r1, r2, #18
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    16ee:	0192      	lsls	r2, r2, #6
	uint32_t pad_transn
    16f0:	4003      	ands	r3, r0
	uint32_t pad_transp
    16f2:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    16f4:	0f52      	lsrs	r2, r2, #29
	if (pad_transn == 0x1F) {
    16f6:	4283      	cmp	r3, r0
    16f8:	d100      	bne.n	16fc <_usb_d_dev_init+0x58>
		pad_transn = 5;
    16fa:	2305      	movs	r3, #5
	if (pad_transp == 0x1F) {
    16fc:	291f      	cmp	r1, #31
    16fe:	d100      	bne.n	1702 <_usb_d_dev_init+0x5e>
		pad_transp = 29;
    1700:	3902      	subs	r1, #2
	if (pad_trim == 0x7) {
    1702:	2a07      	cmp	r2, #7
    1704:	d100      	bne.n	1708 <_usb_d_dev_init+0x64>
		pad_trim = 5;
    1706:	3a02      	subs	r2, #2
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1708:	019b      	lsls	r3, r3, #6
    170a:	430b      	orrs	r3, r1
    170c:	0312      	lsls	r2, r2, #12
    170e:	4313      	orrs	r3, r2
    1710:	8523      	strh	r3, [r4, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1712:	2303      	movs	r3, #3
    1714:	78e2      	ldrb	r2, [r4, #3]
    1716:	431a      	orrs	r2, r3
    1718:	70e2      	strb	r2, [r4, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    171a:	220c      	movs	r2, #12
    171c:	78e1      	ldrb	r1, [r4, #3]
    171e:	430a      	orrs	r2, r1
    1720:	70e2      	strb	r2, [r4, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1722:	2204      	movs	r2, #4
    1724:	7022      	strb	r2, [r4, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1726:	78a0      	ldrb	r0, [r4, #2]
    1728:	4018      	ands	r0, r3
    172a:	d1fc      	bne.n	1726 <_usb_d_dev_init+0x82>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    172c:	4b0d      	ldr	r3, [pc, #52]	; (1764 <_usb_d_dev_init+0xc0>)
    172e:	3348      	adds	r3, #72	; 0x48
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1730:	6263      	str	r3, [r4, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1732:	2301      	movs	r3, #1
    1734:	8123      	strh	r3, [r4, #8]
}
    1736:	bd10      	pop	{r4, pc}
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1738:	7823      	ldrb	r3, [r4, #0]
    173a:	4393      	bics	r3, r2
    173c:	7023      	strb	r3, [r4, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    173e:	2303      	movs	r3, #3
    1740:	78a2      	ldrb	r2, [r4, #2]
    1742:	421a      	tst	r2, r3
    1744:	d1fc      	bne.n	1740 <_usb_d_dev_init+0x9c>
    1746:	2302      	movs	r3, #2
    1748:	78a2      	ldrb	r2, [r4, #2]
    174a:	421a      	tst	r2, r3
    174c:	d1fc      	bne.n	1748 <_usb_d_dev_init+0xa4>
    174e:	e7b6      	b.n	16be <_usb_d_dev_init+0x1a>
    1750:	41005000 	.word	0x41005000
    1754:	20000108 	.word	0x20000108
    1758:	00001099 	.word	0x00001099
    175c:	000012ed 	.word	0x000012ed
    1760:	00806024 	.word	0x00806024
    1764:	20000188 	.word	0x20000188

00001768 <_usb_d_dev_enable>:
	tmp &= mask;
    1768:	2203      	movs	r2, #3
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    176a:	4b0e      	ldr	r3, [pc, #56]	; (17a4 <_usb_d_dev_enable+0x3c>)
    176c:	7899      	ldrb	r1, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    176e:	4211      	tst	r1, r2
    1770:	d115      	bne.n	179e <_usb_d_dev_enable+0x36>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1772:	7899      	ldrb	r1, [r3, #2]
    1774:	4211      	tst	r1, r2
    1776:	d1fc      	bne.n	1772 <_usb_d_dev_enable+0xa>
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1778:	2202      	movs	r2, #2
	return ((Usb *)hw)->HOST.CTRLA.reg;
    177a:	7819      	ldrb	r1, [r3, #0]
    177c:	b2c9      	uxtb	r1, r1
    177e:	4211      	tst	r1, r2
    1780:	d006      	beq.n	1790 <_usb_d_dev_enable+0x28>
    1782:	2180      	movs	r1, #128	; 0x80
	return ERR_NONE;
    1784:	2000      	movs	r0, #0
    1786:	4a08      	ldr	r2, [pc, #32]	; (17a8 <_usb_d_dev_enable+0x40>)
    1788:	6011      	str	r1, [r2, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    178a:	4a08      	ldr	r2, [pc, #32]	; (17ac <_usb_d_dev_enable+0x44>)
    178c:	831a      	strh	r2, [r3, #24]
}
    178e:	4770      	bx	lr
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1790:	430a      	orrs	r2, r1
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1792:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1794:	2203      	movs	r2, #3
    1796:	7899      	ldrb	r1, [r3, #2]
    1798:	4211      	tst	r1, r2
    179a:	d1fc      	bne.n	1796 <_usb_d_dev_enable+0x2e>
    179c:	e7f1      	b.n	1782 <_usb_d_dev_enable+0x1a>
		return -USB_ERR_DENIED;
    179e:	2011      	movs	r0, #17
    17a0:	4240      	negs	r0, r0
    17a2:	e7f4      	b.n	178e <_usb_d_dev_enable+0x26>
    17a4:	41005000 	.word	0x41005000
    17a8:	e000e100 	.word	0xe000e100
    17ac:	0000028d 	.word	0x0000028d

000017b0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    17b0:	2101      	movs	r1, #1
    17b2:	4a02      	ldr	r2, [pc, #8]	; (17bc <_usb_d_dev_attach+0xc>)
    17b4:	8913      	ldrh	r3, [r2, #8]
    17b6:	438b      	bics	r3, r1
    17b8:	8113      	strh	r3, [r2, #8]
}
    17ba:	4770      	bx	lr
    17bc:	41005000 	.word	0x41005000

000017c0 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    17c0:	2380      	movs	r3, #128	; 0x80
    17c2:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    17c4:	4b01      	ldr	r3, [pc, #4]	; (17cc <_usb_d_dev_set_address+0xc>)
    17c6:	7298      	strb	r0, [r3, #10]
}
    17c8:	4770      	bx	lr
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	41005000 	.word	0x41005000

000017d0 <_usb_d_dev_ep_init>:
{
    17d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    17d2:	2600      	movs	r6, #0
    17d4:	466b      	mov	r3, sp
	uint8_t               epn = USB_EP_GET_N(ep);
    17d6:	240f      	movs	r4, #15
{
    17d8:	9000      	str	r0, [sp, #0]
    17da:	9201      	str	r2, [sp, #4]
    17dc:	579e      	ldrsb	r6, [r3, r6]
	uint8_t               epn = USB_EP_GET_N(ep);
    17de:	4004      	ands	r4, r0
{
    17e0:	000f      	movs	r7, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    17e2:	4b2b      	ldr	r3, [pc, #172]	; (1890 <_usb_d_dev_ep_init+0xc0>)
    17e4:	0ff1      	lsrs	r1, r6, #31
    17e6:	0020      	movs	r0, r4
    17e8:	4798      	blx	r3
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    17ea:	2303      	movs	r3, #3
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    17ec:	0005      	movs	r5, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    17ee:	401f      	ands	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    17f0:	2c02      	cmp	r4, #2
    17f2:	d844      	bhi.n	187e <_usb_d_dev_ep_init+0xae>
	if (ept->ep != 0xFF) {
    17f4:	7c83      	ldrb	r3, [r0, #18]
    17f6:	2bff      	cmp	r3, #255	; 0xff
    17f8:	d144      	bne.n	1884 <_usb_d_dev_ep_init+0xb4>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    17fa:	2f00      	cmp	r7, #0
    17fc:	d10f      	bne.n	181e <_usb_d_dev_ep_init+0x4e>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    17fe:	43f1      	mvns	r1, r6
    1800:	4b23      	ldr	r3, [pc, #140]	; (1890 <_usb_d_dev_ep_init+0xc0>)
    1802:	0fc9      	lsrs	r1, r1, #31
    1804:	0020      	movs	r0, r4
    1806:	4798      	blx	r3
		if (ept_in->ep != 0xFF) {
    1808:	7c83      	ldrb	r3, [r0, #18]
    180a:	2bff      	cmp	r3, #255	; 0xff
    180c:	d13a      	bne.n	1884 <_usb_d_dev_ep_init+0xb4>
		if (pcfg->cache == NULL) {
    180e:	3bf3      	subs	r3, #243	; 0xf3
    1810:	4363      	muls	r3, r4
    1812:	4a20      	ldr	r2, [pc, #128]	; (1894 <_usb_d_dev_ep_init+0xc4>)
    1814:	589b      	ldr	r3, [r3, r2]
    1816:	2b00      	cmp	r3, #0
    1818:	d136      	bne.n	1888 <_usb_d_dev_ep_init+0xb8>
			return -USB_ERR_FUNC;
    181a:	2013      	movs	r0, #19
    181c:	e030      	b.n	1880 <_usb_d_dev_ep_init+0xb0>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    181e:	2e00      	cmp	r6, #0
    1820:	da16      	bge.n	1850 <_usb_d_dev_ep_init+0x80>
    1822:	220c      	movs	r2, #12
    1824:	4362      	muls	r2, r4
    1826:	4b1b      	ldr	r3, [pc, #108]	; (1894 <_usb_d_dev_ep_init+0xc4>)
    1828:	189b      	adds	r3, r3, r2
    182a:	685a      	ldr	r2, [r3, #4]
    182c:	2a00      	cmp	r2, #0
    182e:	d11b      	bne.n	1868 <_usb_d_dev_ep_init+0x98>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1830:	230c      	movs	r3, #12
    1832:	4363      	muls	r3, r4
    1834:	4c17      	ldr	r4, [pc, #92]	; (1894 <_usb_d_dev_ep_init+0xc4>)
    1836:	18e4      	adds	r4, r4, r3
    1838:	6863      	ldr	r3, [r4, #4]
    183a:	60eb      	str	r3, [r5, #12]
	ept->size     = max_pkt_siz;
    183c:	466b      	mov	r3, sp
    183e:	889b      	ldrh	r3, [r3, #4]
	return USB_OK;
    1840:	2000      	movs	r0, #0
	ept->size     = max_pkt_siz;
    1842:	822b      	strh	r3, [r5, #16]
	ept->ep       = ep;
    1844:	466b      	mov	r3, sp
    1846:	781b      	ldrb	r3, [r3, #0]
	ept->flags.u8 = (ep_type + 1);
    1848:	3701      	adds	r7, #1
    184a:	74ef      	strb	r7, [r5, #19]
	ept->ep       = ep;
    184c:	74ab      	strb	r3, [r5, #18]
}
    184e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1850:	230c      	movs	r3, #12
    1852:	4363      	muls	r3, r4
    1854:	4a0f      	ldr	r2, [pc, #60]	; (1894 <_usb_d_dev_ep_init+0xc4>)
    1856:	589b      	ldr	r3, [r3, r2]
    1858:	2b00      	cmp	r3, #0
    185a:	d00b      	beq.n	1874 <_usb_d_dev_ep_init+0xa4>
    185c:	220c      	movs	r2, #12
    185e:	4362      	muls	r2, r4
    1860:	4b0c      	ldr	r3, [pc, #48]	; (1894 <_usb_d_dev_ep_init+0xc4>)
    1862:	189b      	adds	r3, r3, r2
    1864:	891b      	ldrh	r3, [r3, #8]
    1866:	e000      	b.n	186a <_usb_d_dev_ep_init+0x9a>
    1868:	895b      	ldrh	r3, [r3, #10]
    186a:	9a01      	ldr	r2, [sp, #4]
    186c:	4293      	cmp	r3, r2
    186e:	dbd4      	blt.n	181a <_usb_d_dev_ep_init+0x4a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1870:	2e00      	cmp	r6, #0
    1872:	dbdd      	blt.n	1830 <_usb_d_dev_ep_init+0x60>
    1874:	230c      	movs	r3, #12
    1876:	435c      	muls	r4, r3
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <_usb_d_dev_ep_init+0xc4>)
    187a:	58e3      	ldr	r3, [r4, r3]
    187c:	e7dd      	b.n	183a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_PARAM;
    187e:	2012      	movs	r0, #18
			return -USB_ERR_FUNC;
    1880:	4240      	negs	r0, r0
    1882:	e7e4      	b.n	184e <_usb_d_dev_ep_init+0x7e>
		return -USB_ERR_REDO;
    1884:	2014      	movs	r0, #20
    1886:	e7fb      	b.n	1880 <_usb_d_dev_ep_init+0xb0>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1888:	2e00      	cmp	r6, #0
    188a:	dae7      	bge.n	185c <_usb_d_dev_ep_init+0x8c>
    188c:	e7c9      	b.n	1822 <_usb_d_dev_ep_init+0x52>
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	000010c1 	.word	0x000010c1
    1894:	00002a58 	.word	0x00002a58

00001898 <_usb_d_dev_ep_deinit>:
{
    1898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    189a:	250f      	movs	r5, #15
    189c:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    189e:	0fdf      	lsrs	r7, r3, #31
	uint8_t               epn = USB_EP_GET_N(ep);
    18a0:	4005      	ands	r5, r0
    18a2:	9301      	str	r3, [sp, #4]
{
    18a4:	0004      	movs	r4, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    18a6:	0039      	movs	r1, r7
    18a8:	0028      	movs	r0, r5
    18aa:	4b16      	ldr	r3, [pc, #88]	; (1904 <_usb_d_dev_ep_deinit+0x6c>)
    18ac:	4798      	blx	r3
    18ae:	0006      	movs	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    18b0:	2d02      	cmp	r5, #2
    18b2:	d814      	bhi.n	18de <_usb_d_dev_ep_deinit+0x46>
    18b4:	7c83      	ldrb	r3, [r0, #18]
    18b6:	2bff      	cmp	r3, #255	; 0xff
    18b8:	d011      	beq.n	18de <_usb_d_dev_ep_deinit+0x46>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    18ba:	2203      	movs	r2, #3
    18bc:	4b12      	ldr	r3, [pc, #72]	; (1908 <_usb_d_dev_ep_deinit+0x70>)
    18be:	0039      	movs	r1, r7
    18c0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    18c2:	2207      	movs	r2, #7
    18c4:	7cf3      	ldrb	r3, [r6, #19]
    18c6:	4013      	ands	r3, r2
    18c8:	2b01      	cmp	r3, #1
    18ca:	d109      	bne.n	18e0 <_usb_d_dev_ep_deinit+0x48>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    18cc:	2200      	movs	r2, #0
    18ce:	3408      	adds	r4, #8
    18d0:	4b0e      	ldr	r3, [pc, #56]	; (190c <_usb_d_dev_ep_deinit+0x74>)
    18d2:	0164      	lsls	r4, r4, #5
    18d4:	54e2      	strb	r2, [r4, r3]
	ept->flags.u8 = 0;
    18d6:	2300      	movs	r3, #0
    18d8:	74f3      	strb	r3, [r6, #19]
	ept->ep       = 0xFF;
    18da:	33ff      	adds	r3, #255	; 0xff
    18dc:	74b3      	strb	r3, [r6, #18]
}
    18de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	} else if (USB_EP_GET_DIR(ep)) {
    18e0:	b263      	sxtb	r3, r4
    18e2:	2b00      	cmp	r3, #0
    18e4:	da07      	bge.n	18f6 <_usb_d_dev_ep_deinit+0x5e>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    18e6:	2270      	movs	r2, #112	; 0x70
    18e8:	4b09      	ldr	r3, [pc, #36]	; (1910 <_usb_d_dev_ep_deinit+0x78>)
    18ea:	016d      	lsls	r5, r5, #5
    18ec:	18ed      	adds	r5, r5, r3
    18ee:	786b      	ldrb	r3, [r5, #1]
    18f0:	4393      	bics	r3, r2
    18f2:	706b      	strb	r3, [r5, #1]
    18f4:	e7ef      	b.n	18d6 <_usb_d_dev_ep_deinit+0x3e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    18f6:	4b06      	ldr	r3, [pc, #24]	; (1910 <_usb_d_dev_ep_deinit+0x78>)
    18f8:	0164      	lsls	r4, r4, #5
    18fa:	18e4      	adds	r4, r4, r3
    18fc:	7863      	ldrb	r3, [r4, #1]
    18fe:	4393      	bics	r3, r2
    1900:	7063      	strb	r3, [r4, #1]
    1902:	e7e8      	b.n	18d6 <_usb_d_dev_ep_deinit+0x3e>
    1904:	000010c1 	.word	0x000010c1
    1908:	000011a9 	.word	0x000011a9
    190c:	41005000 	.word	0x41005000
    1910:	410050ff 	.word	0x410050ff

00001914 <_usb_d_dev_ep_enable>:
{
    1914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    1916:	250f      	movs	r5, #15
    1918:	b244      	sxtb	r4, r0
    191a:	4005      	ands	r5, r0
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    191c:	0fe1      	lsrs	r1, r4, #31
    191e:	4b46      	ldr	r3, [pc, #280]	; (1a38 <_usb_d_dev_ep_enable+0x124>)
    1920:	0028      	movs	r0, r5
    1922:	4798      	blx	r3
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1924:	4b45      	ldr	r3, [pc, #276]	; (1a3c <_usb_d_dev_ep_enable+0x128>)
    1926:	0169      	lsls	r1, r5, #5
    1928:	18ce      	adds	r6, r1, r3
    192a:	7872      	ldrb	r2, [r6, #1]
    192c:	0007      	movs	r7, r0
    192e:	b2d2      	uxtb	r2, r2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1930:	2d02      	cmp	r5, #2
    1932:	d900      	bls.n	1936 <_usb_d_dev_ep_enable+0x22>
    1934:	e07b      	b.n	1a2e <_usb_d_dev_ep_enable+0x11a>
    1936:	7c83      	ldrb	r3, [r0, #18]
    1938:	9301      	str	r3, [sp, #4]
    193a:	2bff      	cmp	r3, #255	; 0xff
    193c:	d100      	bne.n	1940 <_usb_d_dev_ep_enable+0x2c>
    193e:	e076      	b.n	1a2e <_usb_d_dev_ep_enable+0x11a>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    1940:	4d3f      	ldr	r5, [pc, #252]	; (1a40 <_usb_d_dev_ep_enable+0x12c>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    1942:	7cc3      	ldrb	r3, [r0, #19]
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    1944:	3548      	adds	r5, #72	; 0x48
    1946:	186d      	adds	r5, r5, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    1948:	2007      	movs	r0, #7
    194a:	0019      	movs	r1, r3
    194c:	4001      	ands	r1, r0
    194e:	2901      	cmp	r1, #1
    1950:	d13b      	bne.n	19ca <_usb_d_dev_ep_enable+0xb6>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1952:	2477      	movs	r4, #119	; 0x77
    1954:	4014      	ands	r4, r2
    1956:	d000      	beq.n	195a <_usb_d_dev_ep_enable+0x46>
    1958:	e06c      	b.n	1a34 <_usb_d_dev_ep_enable+0x120>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    195a:	2311      	movs	r3, #17
    195c:	7073      	strb	r3, [r6, #1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    195e:	8a3b      	ldrh	r3, [r7, #16]
    1960:	9300      	str	r3, [sp, #0]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1962:	0018      	movs	r0, r3
    1964:	4b37      	ldr	r3, [pc, #220]	; (1a44 <_usb_d_dev_ep_enable+0x130>)
    1966:	4798      	blx	r3
    1968:	23e0      	movs	r3, #224	; 0xe0
    196a:	0700      	lsls	r0, r0, #28
    196c:	05db      	lsls	r3, r3, #23
    196e:	4018      	ands	r0, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1970:	9b00      	ldr	r3, [sp, #0]
    1972:	4a35      	ldr	r2, [pc, #212]	; (1a48 <_usb_d_dev_ep_enable+0x134>)
    1974:	039b      	lsls	r3, r3, #14
    1976:	4013      	ands	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1978:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    197a:	606b      	str	r3, [r5, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    197c:	9b00      	ldr	r3, [sp, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    197e:	2140      	movs	r1, #64	; 0x40
    1980:	049b      	lsls	r3, r3, #18
    1982:	0c9b      	lsrs	r3, r3, #18
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1984:	2280      	movs	r2, #128	; 0x80
    1986:	4318      	orrs	r0, r3
    1988:	6168      	str	r0, [r5, #20]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    198a:	200f      	movs	r0, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    198c:	71b1      	strb	r1, [r6, #6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    198e:	7172      	strb	r2, [r6, #5]
    1990:	9a01      	ldr	r2, [sp, #4]
	bank->STATUS_BK.reg     = 0;
    1992:	72ac      	strb	r4, [r5, #10]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1994:	4002      	ands	r2, r0
	bank->ADDR.reg          = addr;
    1996:	482a      	ldr	r0, [pc, #168]	; (1a40 <_usb_d_dev_ep_enable+0x12c>)
    1998:	0152      	lsls	r2, r2, #5
	bank->STATUS_BK.reg     = 0;
    199a:	76ac      	strb	r4, [r5, #26]
	bank->ADDR.reg          = addr;
    199c:	1885      	adds	r5, r0, r2
    199e:	0028      	movs	r0, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    19a0:	68fe      	ldr	r6, [r7, #12]
	bank->ADDR.reg          = addr;
    19a2:	64ae      	str	r6, [r5, #72]	; 0x48
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    19a4:	6ced      	ldr	r5, [r5, #76]	; 0x4c
    19a6:	039e      	lsls	r6, r3, #14
    19a8:	4b28      	ldr	r3, [pc, #160]	; (1a4c <_usb_d_dev_ep_enable+0x138>)
    19aa:	402b      	ands	r3, r5
    19ac:	4333      	orrs	r3, r6
    19ae:	64c3      	str	r3, [r0, #76]	; 0x4c
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    19b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    19b2:	0b9b      	lsrs	r3, r3, #14
    19b4:	039b      	lsls	r3, r3, #14
    19b6:	64c3      	str	r3, [r0, #76]	; 0x4c
    19b8:	4b20      	ldr	r3, [pc, #128]	; (1a3c <_usb_d_dev_ep_enable+0x128>)
    19ba:	18d3      	adds	r3, r2, r3
    19bc:	22b0      	movs	r2, #176	; 0xb0
    19be:	715a      	strb	r2, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    19c0:	3aa0      	subs	r2, #160	; 0xa0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19c2:	7199      	strb	r1, [r3, #6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    19c4:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    19c6:	0020      	movs	r0, r4
}
    19c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	} else if (dir) {
    19ca:	2c00      	cmp	r4, #0
    19cc:	da17      	bge.n	19fe <_usb_d_dev_ep_enable+0xea>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    19ce:	2070      	movs	r0, #112	; 0x70
    19d0:	0014      	movs	r4, r2
    19d2:	4004      	ands	r4, r0
    19d4:	d12e      	bne.n	1a34 <_usb_d_dev_ep_enable+0x120>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    19d6:	011b      	lsls	r3, r3, #4
    19d8:	4003      	ands	r3, r0
    19da:	4313      	orrs	r3, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    19dc:	7073      	strb	r3, [r6, #1]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19de:	8a3f      	ldrh	r7, [r7, #16]
    19e0:	4b18      	ldr	r3, [pc, #96]	; (1a44 <_usb_d_dev_ep_enable+0x130>)
    19e2:	0038      	movs	r0, r7
    19e4:	4798      	blx	r3
    19e6:	23e0      	movs	r3, #224	; 0xe0
    19e8:	0700      	lsls	r0, r0, #28
    19ea:	05db      	lsls	r3, r3, #23
    19ec:	4018      	ands	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    19ee:	2380      	movs	r3, #128	; 0x80
    19f0:	04bf      	lsls	r7, r7, #18
    19f2:	0cbf      	lsrs	r7, r7, #18
    19f4:	4338      	orrs	r0, r7
    19f6:	6168      	str	r0, [r5, #20]
    19f8:	7173      	strb	r3, [r6, #5]
	bank->STATUS_BK.reg     = 0;
    19fa:	76ac      	strb	r4, [r5, #26]
    19fc:	e7e3      	b.n	19c6 <_usb_d_dev_ep_enable+0xb2>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    19fe:	4010      	ands	r0, r2
    1a00:	1e04      	subs	r4, r0, #0
    1a02:	d117      	bne.n	1a34 <_usb_d_dev_ep_enable+0x120>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    1a04:	075b      	lsls	r3, r3, #29
    1a06:	0f5b      	lsrs	r3, r3, #29
    1a08:	4313      	orrs	r3, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1a0a:	7073      	strb	r3, [r6, #1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a0c:	8a3f      	ldrh	r7, [r7, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a0e:	4b0d      	ldr	r3, [pc, #52]	; (1a44 <_usb_d_dev_ep_enable+0x130>)
    1a10:	0038      	movs	r0, r7
    1a12:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a14:	4a0c      	ldr	r2, [pc, #48]	; (1a48 <_usb_d_dev_ep_enable+0x134>)
    1a16:	03bb      	lsls	r3, r7, #14
    1a18:	4013      	ands	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a1a:	22e0      	movs	r2, #224	; 0xe0
    1a1c:	0700      	lsls	r0, r0, #28
    1a1e:	05d2      	lsls	r2, r2, #23
    1a20:	4010      	ands	r0, r2
    1a22:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a24:	2340      	movs	r3, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a26:	6068      	str	r0, [r5, #4]
    1a28:	71b3      	strb	r3, [r6, #6]
	bank->STATUS_BK.reg     = 0;
    1a2a:	72ac      	strb	r4, [r5, #10]
    1a2c:	e7cb      	b.n	19c6 <_usb_d_dev_ep_enable+0xb2>
		return -USB_ERR_PARAM;
    1a2e:	2012      	movs	r0, #18
			return -USB_ERR_REDO;
    1a30:	4240      	negs	r0, r0
    1a32:	e7c9      	b.n	19c8 <_usb_d_dev_ep_enable+0xb4>
    1a34:	2014      	movs	r0, #20
    1a36:	e7fb      	b.n	1a30 <_usb_d_dev_ep_enable+0x11c>
    1a38:	000010c1 	.word	0x000010c1
    1a3c:	410050ff 	.word	0x410050ff
    1a40:	20000188 	.word	0x20000188
    1a44:	0000166d 	.word	0x0000166d
    1a48:	0fffc000 	.word	0x0fffc000
    1a4c:	f0003fff 	.word	0xf0003fff

00001a50 <_usb_d_dev_ep_stall>:
{
    1a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1a52:	0007      	movs	r7, r0
    1a54:	250f      	movs	r5, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    1a56:	09c4      	lsrs	r4, r0, #7
	uint8_t               epn = USB_EP_GET_N(ep);
    1a58:	402f      	ands	r7, r5
{
    1a5a:	000e      	movs	r6, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1a5c:	0038      	movs	r0, r7
    1a5e:	0021      	movs	r1, r4
    1a60:	4b2b      	ldr	r3, [pc, #172]	; (1b10 <_usb_d_dev_ep_stall+0xc0>)
    1a62:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    1a64:	2f02      	cmp	r7, #2
    1a66:	d84f      	bhi.n	1b08 <_usb_d_dev_ep_stall+0xb8>
	if (USB_EP_STALL_SET == ctrl) {
    1a68:	2e01      	cmp	r6, #1
    1a6a:	d115      	bne.n	1a98 <_usb_d_dev_ep_stall+0x48>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1a6c:	2210      	movs	r2, #16
    1a6e:	40a2      	lsls	r2, r4
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a70:	7c83      	ldrb	r3, [r0, #18]
    1a72:	4928      	ldr	r1, [pc, #160]	; (1b14 <_usb_d_dev_ep_stall+0xc4>)
    1a74:	401d      	ands	r5, r3
    1a76:	016b      	lsls	r3, r5, #5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1a78:	b2d2      	uxtb	r2, r2
    1a7a:	185b      	adds	r3, r3, r1
    1a7c:	715a      	strb	r2, [r3, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1a7e:	2320      	movs	r3, #32
    1a80:	40a3      	lsls	r3, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1a82:	4a25      	ldr	r2, [pc, #148]	; (1b18 <_usb_d_dev_ep_stall+0xc8>)
    1a84:	016d      	lsls	r5, r5, #5
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1a86:	b2db      	uxtb	r3, r3
    1a88:	18ad      	adds	r5, r5, r2
    1a8a:	72ab      	strb	r3, [r5, #10]
	ept->flags.bits.is_stalled = 1;
    1a8c:	2308      	movs	r3, #8
    1a8e:	7cc2      	ldrb	r2, [r0, #19]
    1a90:	4313      	orrs	r3, r2
    1a92:	74c3      	strb	r3, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1a94:	2000      	movs	r0, #0
}
    1a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1a98:	7c83      	ldrb	r3, [r0, #18]
	} else if (USB_EP_STALL_CLR == ctrl) {
    1a9a:	2e00      	cmp	r6, #0
    1a9c:	d129      	bne.n	1af2 <_usb_d_dev_ep_stall+0xa2>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1a9e:	402b      	ands	r3, r5
    1aa0:	4a1e      	ldr	r2, [pc, #120]	; (1b1c <_usb_d_dev_ep_stall+0xcc>)
    1aa2:	015b      	lsls	r3, r3, #5
    1aa4:	1899      	adds	r1, r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1aa6:	4a1c      	ldr	r2, [pc, #112]	; (1b18 <_usb_d_dev_ep_stall+0xc8>)
    1aa8:	189b      	adds	r3, r3, r2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1aaa:	2210      	movs	r2, #16
    1aac:	40a2      	lsls	r2, r4
    1aae:	79dd      	ldrb	r5, [r3, #7]
	if (!is_stalled) {
    1ab0:	422a      	tst	r2, r5
    1ab2:	d0ef      	beq.n	1a94 <_usb_d_dev_ep_stall+0x44>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1ab4:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1ab6:	715a      	strb	r2, [r3, #5]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1ab8:	2220      	movs	r2, #32
    1aba:	40a2      	lsls	r2, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1abc:	b2d5      	uxtb	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1abe:	725d      	strb	r5, [r3, #9]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1ac0:	7a1e      	ldrb	r6, [r3, #8]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1ac2:	4232      	tst	r2, r6
    1ac4:	d004      	beq.n	1ad0 <_usb_d_dev_ep_stall+0x80>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1ac6:	2201      	movs	r2, #1
    1ac8:	40a2      	lsls	r2, r4
    1aca:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1acc:	721d      	strb	r5, [r3, #8]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1ace:	715a      	strb	r2, [r3, #5]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1ad0:	2307      	movs	r3, #7
    1ad2:	7cc2      	ldrb	r2, [r0, #19]
    1ad4:	4013      	ands	r3, r2
    1ad6:	2b01      	cmp	r3, #1
    1ad8:	d108      	bne.n	1aec <_usb_d_dev_ep_stall+0x9c>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1ada:	31ff      	adds	r1, #255	; 0xff
    1adc:	79cb      	ldrb	r3, [r1, #7]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1ade:	2130      	movs	r1, #48	; 0x30
    1ae0:	400b      	ands	r3, r1
    1ae2:	d1d7      	bne.n	1a94 <_usb_d_dev_ep_stall+0x44>
			ept->flags.bits.is_stalled = 0;
    1ae4:	3928      	subs	r1, #40	; 0x28
    1ae6:	438a      	bics	r2, r1
		ept->flags.bits.is_stalled = 0;
    1ae8:	74c2      	strb	r2, [r0, #19]
    1aea:	e7d3      	b.n	1a94 <_usb_d_dev_ep_stall+0x44>
    1aec:	2308      	movs	r3, #8
    1aee:	439a      	bics	r2, r3
    1af0:	e7fa      	b.n	1ae8 <_usb_d_dev_ep_stall+0x98>
    1af2:	401d      	ands	r5, r3
    1af4:	4b07      	ldr	r3, [pc, #28]	; (1b14 <_usb_d_dev_ep_stall+0xc4>)
    1af6:	016d      	lsls	r5, r5, #5
    1af8:	18ed      	adds	r5, r5, r3
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1afa:	2310      	movs	r3, #16
    1afc:	40a3      	lsls	r3, r4
    1afe:	79a8      	ldrb	r0, [r5, #6]
    1b00:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    1b02:	1e43      	subs	r3, r0, #1
    1b04:	4198      	sbcs	r0, r3
    1b06:	e7c6      	b.n	1a96 <_usb_d_dev_ep_stall+0x46>
		return -USB_ERR_PARAM;
    1b08:	2012      	movs	r0, #18
    1b0a:	4240      	negs	r0, r0
    1b0c:	e7c3      	b.n	1a96 <_usb_d_dev_ep_stall+0x46>
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	000010c1 	.word	0x000010c1
    1b14:	41005100 	.word	0x41005100
    1b18:	410050ff 	.word	0x410050ff
    1b1c:	41005000 	.word	0x41005000

00001b20 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
    1b22:	230f      	movs	r3, #15
    1b24:	4018      	ands	r0, r3
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1b26:	4b11      	ldr	r3, [pc, #68]	; (1b6c <_usb_d_dev_ep_read_req+0x4c>)
    1b28:	0144      	lsls	r4, r0, #5
    1b2a:	3348      	adds	r3, #72	; 0x48
    1b2c:	191b      	adds	r3, r3, r4
{
    1b2e:	000f      	movs	r7, r1
	uint32_t           addr  = bank[0].ADDR.reg;
    1b30:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1b32:	685d      	ldr	r5, [r3, #4]
    1b34:	04ad      	lsls	r5, r5, #18
    1b36:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1b38:	2802      	cmp	r0, #2
    1b3a:	d812      	bhi.n	1b62 <_usb_d_dev_ep_read_req+0x42>
    1b3c:	2f00      	cmp	r7, #0
    1b3e:	d010      	beq.n	1b62 <_usb_d_dev_ep_read_req+0x42>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1b40:	4b0b      	ldr	r3, [pc, #44]	; (1b70 <_usb_d_dev_ep_read_req+0x50>)
    1b42:	18e4      	adds	r4, r4, r3
    1b44:	7863      	ldrb	r3, [r4, #1]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1b46:	2b11      	cmp	r3, #17
    1b48:	d10e      	bne.n	1b68 <_usb_d_dev_ep_read_req+0x48>
	tmp &= mask;
    1b4a:	2610      	movs	r6, #16
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1b4c:	7a23      	ldrb	r3, [r4, #8]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    1b4e:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    1b50:	4233      	tst	r3, r6
    1b52:	d005      	beq.n	1b60 <_usb_d_dev_ep_read_req+0x40>
	}
	memcpy(req_buf, (void *)addr, 8);
    1b54:	2208      	movs	r2, #8
    1b56:	0038      	movs	r0, r7
    1b58:	4b06      	ldr	r3, [pc, #24]	; (1b74 <_usb_d_dev_ep_read_req+0x54>)
    1b5a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);

	return bytes;
    1b5c:	0028      	movs	r0, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b5e:	7226      	strb	r6, [r4, #8]
}
    1b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_PARAM;
    1b62:	2012      	movs	r0, #18
		return -USB_ERR_FUNC;
    1b64:	4240      	negs	r0, r0
    1b66:	e7fb      	b.n	1b60 <_usb_d_dev_ep_read_req+0x40>
    1b68:	2013      	movs	r0, #19
    1b6a:	e7fb      	b.n	1b64 <_usb_d_dev_ep_read_req+0x44>
    1b6c:	20000188 	.word	0x20000188
    1b70:	410050ff 	.word	0x410050ff
    1b74:	00002955 	.word	0x00002955

00001b78 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1b78:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1b7a:	250f      	movs	r5, #15
    1b7c:	7a03      	ldrb	r3, [r0, #8]
{
    1b7e:	b087      	sub	sp, #28
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1b80:	401d      	ands	r5, r3
    1b82:	b25b      	sxtb	r3, r3
    1b84:	9301      	str	r3, [sp, #4]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1b86:	0fdb      	lsrs	r3, r3, #31
    1b88:	9303      	str	r3, [sp, #12]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1b8a:	0019      	movs	r1, r3
{
    1b8c:	0007      	movs	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1b8e:	4b38      	ldr	r3, [pc, #224]	; (1c70 <_usb_d_dev_ep_trans+0xf8>)
    1b90:	0028      	movs	r0, r5
    1b92:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1b94:	4a37      	ldr	r2, [pc, #220]	; (1c74 <_usb_d_dev_ep_trans+0xfc>)
    1b96:	8a03      	ldrh	r3, [r0, #16]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1b98:	0004      	movs	r4, r0
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1b9a:	001e      	movs	r6, r3
    1b9c:	4293      	cmp	r3, r2
    1b9e:	d001      	beq.n	1ba4 <_usb_d_dev_ep_trans+0x2c>
    1ba0:	1e5e      	subs	r6, r3, #1
    1ba2:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    1ba4:	687a      	ldr	r2, [r7, #4]
    1ba6:	4016      	ands	r6, r2
    1ba8:	9602      	str	r6, [sp, #8]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1baa:	2d02      	cmp	r5, #2
    1bac:	d85d      	bhi.n	1c6a <_usb_d_dev_ep_trans+0xf2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1bae:	683d      	ldr	r5, [r7, #0]
    1bb0:	4931      	ldr	r1, [pc, #196]	; (1c78 <_usb_d_dev_ep_trans+0x100>)
    1bb2:	428d      	cmp	r5, r1
    1bb4:	d90b      	bls.n	1bce <_usb_d_dev_ep_trans+0x56>
    1bb6:	4831      	ldr	r0, [pc, #196]	; (1c7c <_usb_d_dev_ep_trans+0x104>)
    1bb8:	1951      	adds	r1, r2, r5
    1bba:	4281      	cmp	r1, r0
    1bbc:	d807      	bhi.n	1bce <_usb_d_dev_ep_trans+0x56>
    1bbe:	2103      	movs	r1, #3
    1bc0:	400d      	ands	r5, r1
    1bc2:	d104      	bne.n	1bce <_usb_d_dev_ep_trans+0x56>
	    || (!dir && (trans->size < ept->size))) {
    1bc4:	9901      	ldr	r1, [sp, #4]
    1bc6:	2900      	cmp	r1, #0
    1bc8:	db0e      	blt.n	1be8 <_usb_d_dev_ep_trans+0x70>
    1bca:	429a      	cmp	r2, r3
    1bcc:	d206      	bcs.n	1bdc <_usb_d_dev_ep_trans+0x64>
		if (!ept->cache) {
    1bce:	68e3      	ldr	r3, [r4, #12]
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    1bd0:	2501      	movs	r5, #1
		if (!ept->cache) {
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d108      	bne.n	1be8 <_usb_d_dev_ep_trans+0x70>
			return -USB_ERR_FUNC;
    1bd6:	2013      	movs	r0, #19
		return -USB_ERR_PARAM;
    1bd8:	4240      	negs	r0, r0
    1bda:	e015      	b.n	1c08 <_usb_d_dev_ep_trans+0x90>
	}
	if (!dir && size_n_aligned) {
    1bdc:	9b02      	ldr	r3, [sp, #8]
    1bde:	2b00      	cmp	r3, #0
    1be0:	d014      	beq.n	1c0c <_usb_d_dev_ep_trans+0x94>
		if (!ept->cache) {
    1be2:	68e3      	ldr	r3, [r4, #12]
    1be4:	2b00      	cmp	r3, #0
    1be6:	d040      	beq.n	1c6a <_usb_d_dev_ep_trans+0xf2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1be8:	7ce3      	ldrb	r3, [r4, #19]
		return USB_HALTED;
    1bea:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1bec:	071b      	lsls	r3, r3, #28
    1bee:	d40b      	bmi.n	1c08 <_usb_d_dev_ep_trans+0x90>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    1bf0:	4b23      	ldr	r3, [pc, #140]	; (1c80 <_usb_d_dev_ep_trans+0x108>)
    1bf2:	a805      	add	r0, sp, #20
    1bf4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1bf6:	7ce1      	ldrb	r1, [r4, #19]
    1bf8:	2340      	movs	r3, #64	; 0x40
    1bfa:	000e      	movs	r6, r1
    1bfc:	4a21      	ldr	r2, [pc, #132]	; (1c84 <_usb_d_dev_ep_trans+0x10c>)
    1bfe:	401e      	ands	r6, r3
    1c00:	d006      	beq.n	1c10 <_usb_d_dev_ep_trans+0x98>
		atomic_leave_critical(&flags);
    1c02:	a805      	add	r0, sp, #20
    1c04:	4790      	blx	r2
		return USB_BUSY;
    1c06:	2001      	movs	r0, #1
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1c08:	b007      	add	sp, #28
    1c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    1c0c:	9d02      	ldr	r5, [sp, #8]
    1c0e:	e7eb      	b.n	1be8 <_usb_d_dev_ep_trans+0x70>
	ept->flags.bits.is_busy = 1;
    1c10:	430b      	orrs	r3, r1
    1c12:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    1c14:	a805      	add	r0, sp, #20
    1c16:	4790      	blx	r2
	ept->flags.bits.dir       = dir;
    1c18:	217f      	movs	r1, #127	; 0x7f
	ept->trans_buf   = trans->buf;
    1c1a:	683b      	ldr	r3, [r7, #0]
    1c1c:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    1c1e:	687b      	ldr	r3, [r7, #4]
	ept->trans_count = 0;
    1c20:	60a6      	str	r6, [r4, #8]
	ept->trans_size  = trans->size;
    1c22:	6063      	str	r3, [r4, #4]
	ept->flags.bits.dir       = dir;
    1c24:	9b03      	ldr	r3, [sp, #12]
    1c26:	01da      	lsls	r2, r3, #7
    1c28:	7ce3      	ldrb	r3, [r4, #19]
    1c2a:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1c2c:	4313      	orrs	r3, r2
    1c2e:	0169      	lsls	r1, r5, #5
    1c30:	001d      	movs	r5, r3
    1c32:	2320      	movs	r3, #32
    1c34:	439d      	bics	r5, r3
    1c36:	430d      	orrs	r5, r1
    1c38:	74e5      	strb	r5, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1c3a:	7a7b      	ldrb	r3, [r7, #9]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d003      	beq.n	1c48 <_usb_d_dev_ep_trans+0xd0>
    1c40:	9e02      	ldr	r6, [sp, #8]
    1c42:	4273      	negs	r3, r6
    1c44:	415e      	adcs	r6, r3
    1c46:	b2f6      	uxtb	r6, r6
    1c48:	2210      	movs	r2, #16
    1c4a:	7ce3      	ldrb	r3, [r4, #19]
    1c4c:	0136      	lsls	r6, r6, #4
    1c4e:	4393      	bics	r3, r2
    1c50:	431e      	orrs	r6, r3
	if (dir) {
    1c52:	9b01      	ldr	r3, [sp, #4]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1c54:	74e6      	strb	r6, [r4, #19]
		_usb_d_dev_in_next(ept, false);
    1c56:	2100      	movs	r1, #0
    1c58:	0020      	movs	r0, r4
	if (dir) {
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	da03      	bge.n	1c66 <_usb_d_dev_ep_trans+0xee>
		_usb_d_dev_in_next(ept, false);
    1c5e:	4b0a      	ldr	r3, [pc, #40]	; (1c88 <_usb_d_dev_ep_trans+0x110>)
		_usb_d_dev_out_next(ept, false);
    1c60:	4798      	blx	r3
	return ERR_NONE;
    1c62:	2000      	movs	r0, #0
    1c64:	e7d0      	b.n	1c08 <_usb_d_dev_ep_trans+0x90>
		_usb_d_dev_out_next(ept, false);
    1c66:	4b09      	ldr	r3, [pc, #36]	; (1c8c <_usb_d_dev_ep_trans+0x114>)
    1c68:	e7fa      	b.n	1c60 <_usb_d_dev_ep_trans+0xe8>
		return -USB_ERR_PARAM;
    1c6a:	2012      	movs	r0, #18
    1c6c:	e7b4      	b.n	1bd8 <_usb_d_dev_ep_trans+0x60>
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	000010c1 	.word	0x000010c1
    1c74:	000003ff 	.word	0x000003ff
    1c78:	1fffffff 	.word	0x1fffffff
    1c7c:	20007fff 	.word	0x20007fff
    1c80:	00000575 	.word	0x00000575
    1c84:	00000583 	.word	0x00000583
    1c88:	00001329 	.word	0x00001329
    1c8c:	00001499 	.word	0x00001499

00001c90 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1c90:	2900      	cmp	r1, #0
    1c92:	d100      	bne.n	1c96 <_usb_d_dev_register_callback+0x6>
    1c94:	4905      	ldr	r1, [pc, #20]	; (1cac <_usb_d_dev_register_callback+0x1c>)
	if (type == USB_D_CB_EVENT) {
    1c96:	2801      	cmp	r0, #1
    1c98:	d102      	bne.n	1ca0 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1c9a:	4b05      	ldr	r3, [pc, #20]	; (1cb0 <_usb_d_dev_register_callback+0x20>)
    1c9c:	6059      	str	r1, [r3, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    1c9e:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    1ca0:	2800      	cmp	r0, #0
    1ca2:	d1fc      	bne.n	1c9e <_usb_d_dev_register_callback+0xe>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1ca4:	4b02      	ldr	r3, [pc, #8]	; (1cb0 <_usb_d_dev_register_callback+0x20>)
    1ca6:	6019      	str	r1, [r3, #0]
}
    1ca8:	e7f9      	b.n	1c9e <_usb_d_dev_register_callback+0xe>
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	00001099 	.word	0x00001099
    1cb0:	20000108 	.word	0x20000108

00001cb4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1cb4:	2900      	cmp	r1, #0
    1cb6:	d100      	bne.n	1cba <_usb_d_dev_register_ep_callback+0x6>
    1cb8:	4907      	ldr	r1, [pc, #28]	; (1cd8 <_usb_d_dev_register_ep_callback+0x24>)
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1cba:	2800      	cmp	r0, #0
    1cbc:	d102      	bne.n	1cc4 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1cbe:	4b07      	ldr	r3, [pc, #28]	; (1cdc <_usb_d_dev_register_ep_callback+0x28>)
    1cc0:	6099      	str	r1, [r3, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    1cc2:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1cc4:	2801      	cmp	r0, #1
    1cc6:	d102      	bne.n	1cce <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1cc8:	4b04      	ldr	r3, [pc, #16]	; (1cdc <_usb_d_dev_register_ep_callback+0x28>)
    1cca:	60d9      	str	r1, [r3, #12]
    1ccc:	e7f9      	b.n	1cc2 <_usb_d_dev_register_ep_callback+0xe>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1cce:	2802      	cmp	r0, #2
    1cd0:	d1f7      	bne.n	1cc2 <_usb_d_dev_register_ep_callback+0xe>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1cd2:	4b02      	ldr	r3, [pc, #8]	; (1cdc <_usb_d_dev_register_ep_callback+0x28>)
    1cd4:	6119      	str	r1, [r3, #16]
}
    1cd6:	e7f4      	b.n	1cc2 <_usb_d_dev_register_ep_callback+0xe>
    1cd8:	00001099 	.word	0x00001099
    1cdc:	20000108 	.word	0x20000108

00001ce0 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    1ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1ce2:	4b65      	ldr	r3, [pc, #404]	; (1e78 <USB_Handler+0x198>)
    1ce4:	4d65      	ldr	r5, [pc, #404]	; (1e7c <USB_Handler+0x19c>)
    1ce6:	8c1a      	ldrh	r2, [r3, #32]
    1ce8:	b292      	uxth	r2, r2
    1cea:	9201      	str	r2, [sp, #4]
	if (0 == epint) {
    1cec:	2a00      	cmp	r2, #0
    1cee:	d157      	bne.n	1da0 <USB_Handler+0xc0>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1cf0:	8b9a      	ldrh	r2, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1cf2:	8b1f      	ldrh	r7, [r3, #24]
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1cf4:	2004      	movs	r0, #4
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1cf6:	4017      	ands	r7, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1cf8:	003a      	movs	r2, r7
    1cfa:	4002      	ands	r2, r0
    1cfc:	d003      	beq.n	1d06 <USB_Handler+0x26>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1cfe:	8398      	strh	r0, [r3, #28]
	dev_inst.callbacks.sof();
    1d00:	682b      	ldr	r3, [r5, #0]
    1d02:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1d04:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1d06:	2180      	movs	r1, #128	; 0x80
    1d08:	0089      	lsls	r1, r1, #2
    1d0a:	4039      	ands	r1, r7
    1d0c:	d020      	beq.n	1d50 <USB_Handler+0x70>
    1d0e:	495c      	ldr	r1, [pc, #368]	; (1e80 <USB_Handler+0x1a0>)
    1d10:	8399      	strh	r1, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1d12:	8299      	strh	r1, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d14:	3992      	subs	r1, #146	; 0x92
    1d16:	39ff      	subs	r1, #255	; 0xff
    1d18:	8319      	strh	r1, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1d1a:	4b5a      	ldr	r3, [pc, #360]	; (1e84 <USB_Handler+0x1a4>)
    1d1c:	0018      	movs	r0, r3
    1d1e:	3048      	adds	r0, #72	; 0x48
    1d20:	8901      	ldrh	r1, [r0, #8]
    1d22:	0709      	lsls	r1, r1, #28
    1d24:	0f09      	lsrs	r1, r1, #28
    1d26:	2903      	cmp	r1, #3
    1d28:	d006      	beq.n	1d38 <USB_Handler+0x58>
    1d2a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
	uint32_t lpm_variable = 0;
    1d2c:	0011      	movs	r1, r2
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1d2e:	0700      	lsls	r0, r0, #28
    1d30:	0f00      	lsrs	r0, r0, #28
    1d32:	2803      	cmp	r0, #3
    1d34:	d108      	bne.n	1d48 <USB_Handler+0x68>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1d36:	2201      	movs	r2, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1d38:	3348      	adds	r3, #72	; 0x48
    1d3a:	0152      	lsls	r2, r2, #5
    1d3c:	189a      	adds	r2, r3, r2
			bank->EXTREG.reg = 0;
    1d3e:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1d40:	8911      	ldrh	r1, [r2, #8]
			bank->EXTREG.reg = 0;
    1d42:	8113      	strh	r3, [r2, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1d44:	0449      	lsls	r1, r1, #17
    1d46:	0d49      	lsrs	r1, r1, #21
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1d48:	2003      	movs	r0, #3
    1d4a:	686b      	ldr	r3, [r5, #4]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1d4c:	4798      	blx	r3
    1d4e:	e7d9      	b.n	1d04 <USB_Handler+0x24>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1d50:	2280      	movs	r2, #128	; 0x80
    1d52:	003e      	movs	r6, r7
    1d54:	4016      	ands	r6, r2
    1d56:	d003      	beq.n	1d60 <USB_Handler+0x80>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1d58:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1d5a:	686b      	ldr	r3, [r5, #4]
    1d5c:	2005      	movs	r0, #5
    1d5e:	e7f5      	b.n	1d4c <USB_Handler+0x6c>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1d60:	2270      	movs	r2, #112	; 0x70
    1d62:	003c      	movs	r4, r7
    1d64:	4014      	ands	r4, r2
    1d66:	d009      	beq.n	1d7c <USB_Handler+0x9c>
    1d68:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1d6a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d6c:	4a44      	ldr	r2, [pc, #272]	; (1e80 <USB_Handler+0x1a0>)
    1d6e:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    1d70:	4b45      	ldr	r3, [pc, #276]	; (1e88 <USB_Handler+0x1a8>)
    1d72:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1d74:	686b      	ldr	r3, [r5, #4]
    1d76:	0031      	movs	r1, r6
    1d78:	2002      	movs	r0, #2
    1d7a:	e7e7      	b.n	1d4c <USB_Handler+0x6c>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1d7c:	2608      	movs	r6, #8
    1d7e:	0039      	movs	r1, r7
    1d80:	4031      	ands	r1, r6
    1d82:	d00b      	beq.n	1d9c <USB_Handler+0xbc>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1d84:	4941      	ldr	r1, [pc, #260]	; (1e8c <USB_Handler+0x1ac>)
    1d86:	704c      	strb	r4, [r1, #1]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1d88:	839e      	strh	r6, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1d8a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d8c:	4a3c      	ldr	r2, [pc, #240]	; (1e80 <USB_Handler+0x1a0>)
    1d8e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1d90:	4b3f      	ldr	r3, [pc, #252]	; (1e90 <USB_Handler+0x1b0>)
    1d92:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1d94:	686b      	ldr	r3, [r5, #4]
    1d96:	0021      	movs	r1, r4
    1d98:	2001      	movs	r0, #1
    1d9a:	e7d7      	b.n	1d4c <USB_Handler+0x6c>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1d9c:	07fc      	lsls	r4, r7, #31
    1d9e:	d426      	bmi.n	1dee <USB_Handler+0x10e>
    1da0:	002c      	movs	r4, r5
	uint32_t lpm_variable = 0;
    1da2:	2700      	movs	r7, #0
	if (!(epint & (1u << epn))) {
    1da4:	2601      	movs	r6, #1
    1da6:	3414      	adds	r4, #20
		if (ept->ep == 0xFF) {
    1da8:	7ca2      	ldrb	r2, [r4, #18]
    1daa:	2aff      	cmp	r2, #255	; 0xff
    1dac:	d03e      	beq.n	1e2c <USB_Handler+0x14c>
	if (!(epint & (1u << epn))) {
    1dae:	230f      	movs	r3, #15
    1db0:	401a      	ands	r2, r3
    1db2:	0033      	movs	r3, r6
    1db4:	4093      	lsls	r3, r2
    1db6:	9901      	ldr	r1, [sp, #4]
    1db8:	4219      	tst	r1, r3
    1dba:	d037      	beq.n	1e2c <USB_Handler+0x14c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1dbc:	4935      	ldr	r1, [pc, #212]	; (1e94 <USB_Handler+0x1b4>)
    1dbe:	0153      	lsls	r3, r2, #5
    1dc0:	185b      	adds	r3, r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1dc2:	4932      	ldr	r1, [pc, #200]	; (1e8c <USB_Handler+0x1ac>)
    1dc4:	0152      	lsls	r2, r2, #5
    1dc6:	1852      	adds	r2, r2, r1
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1dc8:	781b      	ldrb	r3, [r3, #0]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1dca:	7a92      	ldrb	r2, [r2, #10]
	flags &= mask;
    1dcc:	4013      	ands	r3, r2
	if (flags) {
    1dce:	d02d      	beq.n	1e2c <USB_Handler+0x14c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1dd0:	2214      	movs	r2, #20
    1dd2:	2147      	movs	r1, #71	; 0x47
    1dd4:	437a      	muls	r2, r7
    1dd6:	18aa      	adds	r2, r5, r2
    1dd8:	3210      	adds	r2, #16
    1dda:	7dd2      	ldrb	r2, [r2, #23]
    1ddc:	4011      	ands	r1, r2
    1dde:	2901      	cmp	r1, #1
    1de0:	d115      	bne.n	1e0e <USB_Handler+0x12e>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1de2:	06da      	lsls	r2, r3, #27
    1de4:	d509      	bpl.n	1dfa <USB_Handler+0x11a>
			_usb_d_dev_handle_setup(ept);
    1de6:	0020      	movs	r0, r4
    1de8:	4b2b      	ldr	r3, [pc, #172]	; (1e98 <USB_Handler+0x1b8>)
    1dea:	4798      	blx	r3
    1dec:	e01e      	b.n	1e2c <USB_Handler+0x14c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1dee:	4c24      	ldr	r4, [pc, #144]	; (1e80 <USB_Handler+0x1a0>)
    1df0:	839c      	strh	r4, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1df2:	829c      	strh	r4, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1df4:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1df6:	686b      	ldr	r3, [r5, #4]
    1df8:	e7a8      	b.n	1d4c <USB_Handler+0x6c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1dfa:	2140      	movs	r1, #64	; 0x40
    1dfc:	4019      	ands	r1, r3
    1dfe:	d001      	beq.n	1e04 <USB_Handler+0x124>
		_usb_d_dev_handle_stall(ept, 1);
    1e00:	0031      	movs	r1, r6
    1e02:	e001      	b.n	1e08 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1e04:	069b      	lsls	r3, r3, #26
    1e06:	d511      	bpl.n	1e2c <USB_Handler+0x14c>
		_usb_d_dev_handle_stall(ept, 0);
    1e08:	0020      	movs	r0, r4
    1e0a:	4b24      	ldr	r3, [pc, #144]	; (1e9c <USB_Handler+0x1bc>)
    1e0c:	e00d      	b.n	1e2a <USB_Handler+0x14a>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1e0e:	b251      	sxtb	r1, r2
    1e10:	2900      	cmp	r1, #0
    1e12:	da1a      	bge.n	1e4a <USB_Handler+0x16a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1e14:	0659      	lsls	r1, r3, #25
    1e16:	d4f3      	bmi.n	1e00 <USB_Handler+0x120>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1e18:	0719      	lsls	r1, r3, #28
    1e1a:	d501      	bpl.n	1e20 <USB_Handler+0x140>
			_usb_d_dev_handle_trfail(ept, 1);
    1e1c:	0031      	movs	r1, r6
    1e1e:	e01b      	b.n	1e58 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1e20:	0799      	lsls	r1, r3, #30
    1e22:	d508      	bpl.n	1e36 <USB_Handler+0x156>
		_usb_d_dev_in_next(ept, true);
    1e24:	0031      	movs	r1, r6
    1e26:	0020      	movs	r0, r4
    1e28:	4b1d      	ldr	r3, [pc, #116]	; (1ea0 <USB_Handler+0x1c0>)
			_usb_d_dev_handle_trfail(ept, 1);
    1e2a:	4798      	blx	r3
    1e2c:	3701      	adds	r7, #1
    1e2e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1e30:	2f09      	cmp	r7, #9
    1e32:	d1b9      	bne.n	1da8 <USB_Handler+0xc8>
    1e34:	e766      	b.n	1d04 <USB_Handler+0x24>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1e36:	2107      	movs	r1, #7
    1e38:	400a      	ands	r2, r1
    1e3a:	2a01      	cmp	r2, #1
    1e3c:	d1f6      	bne.n	1e2c <USB_Handler+0x14c>
			_usb_d_dev_handle_trfail(ept, 0);
    1e3e:	2100      	movs	r1, #0
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1e40:	075a      	lsls	r2, r3, #29
    1e42:	d409      	bmi.n	1e58 <USB_Handler+0x178>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1e44:	06db      	lsls	r3, r3, #27
    1e46:	d5f1      	bpl.n	1e2c <USB_Handler+0x14c>
    1e48:	e7cd      	b.n	1de6 <USB_Handler+0x106>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1e4a:	2120      	movs	r1, #32
    1e4c:	4019      	ands	r1, r3
    1e4e:	d001      	beq.n	1e54 <USB_Handler+0x174>
		_usb_d_dev_handle_stall(ept, 0);
    1e50:	2100      	movs	r1, #0
    1e52:	e7d9      	b.n	1e08 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1e54:	0758      	lsls	r0, r3, #29
    1e56:	d502      	bpl.n	1e5e <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    1e58:	0020      	movs	r0, r4
    1e5a:	4b12      	ldr	r3, [pc, #72]	; (1ea4 <USB_Handler+0x1c4>)
    1e5c:	e7e5      	b.n	1e2a <USB_Handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1e5e:	4233      	tst	r3, r6
    1e60:	d003      	beq.n	1e6a <USB_Handler+0x18a>
		_usb_d_dev_out_next(ept, true);
    1e62:	0031      	movs	r1, r6
    1e64:	0020      	movs	r0, r4
    1e66:	4b10      	ldr	r3, [pc, #64]	; (1ea8 <USB_Handler+0x1c8>)
    1e68:	e7df      	b.n	1e2a <USB_Handler+0x14a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1e6a:	2107      	movs	r1, #7
    1e6c:	400a      	ands	r2, r1
    1e6e:	2a01      	cmp	r2, #1
    1e70:	d1dc      	bne.n	1e2c <USB_Handler+0x14c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1e72:	071a      	lsls	r2, r3, #28
    1e74:	d5e6      	bpl.n	1e44 <USB_Handler+0x164>
    1e76:	e7d1      	b.n	1e1c <USB_Handler+0x13c>
    1e78:	41005000 	.word	0x41005000
    1e7c:	20000108 	.word	0x20000108
    1e80:	00000201 	.word	0x00000201
    1e84:	20000188 	.word	0x20000188
    1e88:	0000109d 	.word	0x0000109d
    1e8c:	410050ff 	.word	0x410050ff
    1e90:	000012ed 	.word	0x000012ed
    1e94:	41005107 	.word	0x41005107
    1e98:	000010dd 	.word	0x000010dd
    1e9c:	00001159 	.word	0x00001159
    1ea0:	00001329 	.word	0x00001329
    1ea4:	00001209 	.word	0x00001209
    1ea8:	00001499 	.word	0x00001499

00001eac <main>:
3. If check_start_application detects BOOT_DOUBLE_TAP or was reset by bossac then stay in the bootloader and enter the sam_ba_monitor indefinitely**
4. If check_start_application fails, then stay in bootloader and enter the sam_ba_monitor indefinitly**                                                                     
************************************************************************/

int main( void )
{
    1eac:	b510      	push	{r4, lr}
    /* Initializes MCU, drivers and middle ware */
    atmel_start_init();
    1eae:	4b03      	ldr	r3, [pc, #12]	; (1ebc <main+0x10>)
    1eb0:	4798      	blx	r3

    cdcd_acm_example();
    1eb2:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <main+0x14>)
    1eb4:	4798      	blx	r3
}
    1eb6:	2000      	movs	r0, #0
    1eb8:	bd10      	pop	{r4, pc}
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	00000115 	.word	0x00000115
    1ec0:	000028a5 	.word	0x000028a5

00001ec4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec6:	0016      	movs	r6, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1ec8:	780a      	ldrb	r2, [r1, #0]
{
    1eca:	b085      	sub	sp, #20
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1ecc:	0653      	lsls	r3, r2, #25
{
    1ece:	9001      	str	r0, [sp, #4]
    1ed0:	000c      	movs	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1ed2:	0f9b      	lsrs	r3, r3, #30
    1ed4:	2b01      	cmp	r3, #1
    1ed6:	d156      	bne.n	1f86 <cdcdf_acm_req+0xc2>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    1ed8:	7963      	ldrb	r3, [r4, #5]
    1eda:	7909      	ldrb	r1, [r1, #4]
    1edc:	4d2c      	ldr	r5, [pc, #176]	; (1f90 <cdcdf_acm_req+0xcc>)
    1ede:	021b      	lsls	r3, r3, #8
    1ee0:	430b      	orrs	r3, r1
    1ee2:	7829      	ldrb	r1, [r5, #0]
    1ee4:	4299      	cmp	r1, r3
    1ee6:	d002      	beq.n	1eee <cdcdf_acm_req+0x2a>
    1ee8:	7869      	ldrb	r1, [r5, #1]
    1eea:	4299      	cmp	r1, r3
    1eec:	d14b      	bne.n	1f86 <cdcdf_acm_req+0xc2>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    1eee:	b252      	sxtb	r2, r2
    1ef0:	2a00      	cmp	r2, #0
    1ef2:	da12      	bge.n	1f1a <cdcdf_acm_req+0x56>
		return ERR_NONE;
    1ef4:	2000      	movs	r0, #0
	if (USB_DATA_STAGE == stage) {
    1ef6:	2e01      	cmp	r6, #1
    1ef8:	d00d      	beq.n	1f16 <cdcdf_acm_req+0x52>
	switch (req->bRequest) {
    1efa:	7863      	ldrb	r3, [r4, #1]
    1efc:	2b21      	cmp	r3, #33	; 0x21
    1efe:	d118      	bne.n	1f32 <cdcdf_acm_req+0x6e>
	uint16_t len = req->wLength;
    1f00:	79e2      	ldrb	r2, [r4, #7]
    1f02:	79a3      	ldrb	r3, [r4, #6]
    1f04:	0212      	lsls	r2, r2, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1f06:	431a      	orrs	r2, r3
    1f08:	2a07      	cmp	r2, #7
    1f0a:	d13f      	bne.n	1f8c <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    1f0c:	0003      	movs	r3, r0
    1f0e:	1da9      	adds	r1, r5, #6
			return usbdc_xfer(ep, ctrl_buf, len, false);
    1f10:	9801      	ldr	r0, [sp, #4]
    1f12:	4c20      	ldr	r4, [pc, #128]	; (1f94 <cdcdf_acm_req+0xd0>)
    1f14:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    1f16:	b005      	add	sp, #20
    1f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t                   len      = req->wLength;
    1f1a:	79e3      	ldrb	r3, [r4, #7]
    1f1c:	79a7      	ldrb	r7, [r4, #6]
    1f1e:	021b      	lsls	r3, r3, #8
    1f20:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    1f22:	4b1d      	ldr	r3, [pc, #116]	; (1f98 <cdcdf_acm_req+0xd4>)
    1f24:	4798      	blx	r3
	switch (req->bRequest) {
    1f26:	7863      	ldrb	r3, [r4, #1]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    1f28:	0001      	movs	r1, r0
	switch (req->bRequest) {
    1f2a:	2b20      	cmp	r3, #32
    1f2c:	d003      	beq.n	1f36 <cdcdf_acm_req+0x72>
    1f2e:	2b22      	cmp	r3, #34	; 0x22
    1f30:	d01a      	beq.n	1f68 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    1f32:	200d      	movs	r0, #13
    1f34:	e028      	b.n	1f88 <cdcdf_acm_req+0xc4>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1f36:	2f07      	cmp	r7, #7
    1f38:	d128      	bne.n	1f8c <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    1f3a:	2e00      	cmp	r6, #0
    1f3c:	d102      	bne.n	1f44 <cdcdf_acm_req+0x80>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    1f3e:	0033      	movs	r3, r6
    1f40:	003a      	movs	r2, r7
    1f42:	e7e5      	b.n	1f10 <cdcdf_acm_req+0x4c>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    1f44:	003a      	movs	r2, r7
    1f46:	a802      	add	r0, sp, #8
    1f48:	4c14      	ldr	r4, [pc, #80]	; (1f9c <cdcdf_acm_req+0xd8>)
    1f4a:	47a0      	blx	r4
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1f4c:	692b      	ldr	r3, [r5, #16]
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d105      	bne.n	1f5e <cdcdf_acm_req+0x9a>
				usbd_cdc_line_coding = line_coding_tmp;
    1f52:	1da8      	adds	r0, r5, #6
    1f54:	2207      	movs	r2, #7
    1f56:	a902      	add	r1, sp, #8
    1f58:	47a0      	blx	r4
		return ERR_NONE;
    1f5a:	2000      	movs	r0, #0
    1f5c:	e7db      	b.n	1f16 <cdcdf_acm_req+0x52>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1f5e:	a802      	add	r0, sp, #8
    1f60:	4798      	blx	r3
    1f62:	2800      	cmp	r0, #0
    1f64:	d1f5      	bne.n	1f52 <cdcdf_acm_req+0x8e>
    1f66:	e7f8      	b.n	1f5a <cdcdf_acm_req+0x96>
		usbdc_xfer(0, NULL, 0, 0);
    1f68:	2300      	movs	r3, #0
    1f6a:	4e0a      	ldr	r6, [pc, #40]	; (1f94 <cdcdf_acm_req+0xd0>)
    1f6c:	001a      	movs	r2, r3
    1f6e:	0019      	movs	r1, r3
    1f70:	0018      	movs	r0, r3
    1f72:	47b0      	blx	r6
		if (NULL != cdcdf_acm_notify_state) {
    1f74:	696b      	ldr	r3, [r5, #20]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d0ef      	beq.n	1f5a <cdcdf_acm_req+0x96>
			cdcdf_acm_notify_state(req->wValue);
    1f7a:	78e0      	ldrb	r0, [r4, #3]
    1f7c:	78a2      	ldrb	r2, [r4, #2]
    1f7e:	0200      	lsls	r0, r0, #8
    1f80:	4310      	orrs	r0, r2
    1f82:	4798      	blx	r3
    1f84:	e7e9      	b.n	1f5a <cdcdf_acm_req+0x96>
		return ERR_NOT_FOUND;
    1f86:	200a      	movs	r0, #10
			return ERR_INVALID_DATA;
    1f88:	4240      	negs	r0, r0
    1f8a:	e7c4      	b.n	1f16 <cdcdf_acm_req+0x52>
    1f8c:	2001      	movs	r0, #1
    1f8e:	e7fb      	b.n	1f88 <cdcdf_acm_req+0xc4>
    1f90:	200002f0 	.word	0x200002f0
    1f94:	00002321 	.word	0x00002321
    1f98:	00002741 	.word	0x00002741
    1f9c:	00002955 	.word	0x00002955

00001fa0 <cdcdf_acm_ctrl>:
{
    1fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1fa2:	0015      	movs	r5, r2
	switch (ctrl) {
    1fa4:	2901      	cmp	r1, #1
    1fa6:	d050      	beq.n	204a <STACK_SIZE+0x4a>
    1fa8:	2900      	cmp	r1, #0
    1faa:	d004      	beq.n	1fb6 <cdcdf_acm_ctrl+0x16>
		return ERR_UNSUPPORTED_OP;
    1fac:	201b      	movs	r0, #27
	switch (ctrl) {
    1fae:	2902      	cmp	r1, #2
    1fb0:	d00a      	beq.n	1fc8 <cdcdf_acm_ctrl+0x28>
		return ERR_INVALID_ARG;
    1fb2:	200d      	movs	r0, #13
    1fb4:	e008      	b.n	1fc8 <cdcdf_acm_ctrl+0x28>
    1fb6:	6883      	ldr	r3, [r0, #8]
	ifc = desc->sod;
    1fb8:	6810      	ldr	r0, [r2, #0]
    1fba:	9300      	str	r3, [sp, #0]
    1fbc:	001e      	movs	r6, r3
    1fbe:	3302      	adds	r3, #2
    1fc0:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    1fc2:	2800      	cmp	r0, #0
    1fc4:	d102      	bne.n	1fcc <cdcdf_acm_ctrl+0x2c>
			return ERR_NOT_FOUND;
    1fc6:	200a      	movs	r0, #10
				return ERR_NOT_INITIALIZED;
    1fc8:	4240      	negs	r0, r0
    1fca:	e020      	b.n	200e <STACK_SIZE+0xe>
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    1fcc:	2108      	movs	r1, #8
    1fce:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    1fd0:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    1fd2:	438b      	bics	r3, r1
    1fd4:	2b02      	cmp	r3, #2
    1fd6:	d1f6      	bne.n	1fc6 <cdcdf_acm_ctrl+0x26>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    1fd8:	7833      	ldrb	r3, [r6, #0]
    1fda:	429a      	cmp	r2, r3
    1fdc:	d05f      	beq.n	209e <STACK_SIZE+0x9e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    1fde:	2bff      	cmp	r3, #255	; 0xff
    1fe0:	d15f      	bne.n	20a2 <STACK_SIZE+0xa2>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    1fe2:	7032      	strb	r2, [r6, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    1fe4:	6869      	ldr	r1, [r5, #4]
    1fe6:	2205      	movs	r2, #5
    1fe8:	4b30      	ldr	r3, [pc, #192]	; (20ac <STACK_SIZE+0xac>)
    1fea:	4798      	blx	r3
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    1fec:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    1fee:	d10f      	bne.n	2010 <STACK_SIZE+0x10>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    1ff0:	6828      	ldr	r0, [r5, #0]
    1ff2:	2204      	movs	r2, #4
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    1ff4:	7803      	ldrb	r3, [r0, #0]
    1ff6:	6869      	ldr	r1, [r5, #4]
    1ff8:	18c0      	adds	r0, r0, r3
    1ffa:	4b2c      	ldr	r3, [pc, #176]	; (20ac <STACK_SIZE+0xac>)
    1ffc:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    1ffe:	9b01      	ldr	r3, [sp, #4]
    2000:	3601      	adds	r6, #1
    2002:	42b3      	cmp	r3, r6
    2004:	d1dd      	bne.n	1fc2 <cdcdf_acm_ctrl+0x22>
	_cdcdf_acm_funcd.enabled = true;
    2006:	2201      	movs	r2, #1
	return ERR_NONE;
    2008:	0020      	movs	r0, r4
	_cdcdf_acm_funcd.enabled = true;
    200a:	4b29      	ldr	r3, [pc, #164]	; (20b0 <STACK_SIZE+0xb0>)
    200c:	715a      	strb	r2, [r3, #5]
}
    200e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	return (ptr[0] + (ptr[1] << 8));
    2010:	7963      	ldrb	r3, [r4, #5]
    2012:	7922      	ldrb	r2, [r4, #4]
    2014:	021b      	lsls	r3, r3, #8
			ep_desc.bEndpointAddress = ep[2];
    2016:	78a7      	ldrb	r7, [r4, #2]
    2018:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    201a:	b292      	uxth	r2, r2
    201c:	78e1      	ldrb	r1, [r4, #3]
    201e:	0038      	movs	r0, r7
    2020:	4b24      	ldr	r3, [pc, #144]	; (20b4 <STACK_SIZE+0xb4>)
    2022:	4798      	blx	r3
    2024:	2800      	cmp	r0, #0
    2026:	d13e      	bne.n	20a6 <STACK_SIZE+0xa6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2028:	b27b      	sxtb	r3, r7
    202a:	4a23      	ldr	r2, [pc, #140]	; (20b8 <STACK_SIZE+0xb8>)
    202c:	2b00      	cmp	r3, #0
    202e:	da09      	bge.n	2044 <STACK_SIZE+0x44>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2030:	70b7      	strb	r7, [r6, #2]
				usb_d_ep_enable(func_data->func_ep_out);
    2032:	0038      	movs	r0, r7
    2034:	4790      	blx	r2
			desc->sod = ep;
    2036:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    2038:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    203a:	6869      	ldr	r1, [r5, #4]
    203c:	1820      	adds	r0, r4, r0
    203e:	4b1f      	ldr	r3, [pc, #124]	; (20bc <STACK_SIZE+0xbc>)
    2040:	4798      	blx	r3
    2042:	e7d3      	b.n	1fec <cdcdf_acm_ctrl+0x4c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2044:	9b00      	ldr	r3, [sp, #0]
    2046:	711f      	strb	r7, [r3, #4]
    2048:	e7f3      	b.n	2032 <STACK_SIZE+0x32>
    204a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    204c:	2a00      	cmp	r2, #0
    204e:	d005      	beq.n	205c <STACK_SIZE+0x5c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2050:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2052:	2208      	movs	r2, #8
    2054:	795b      	ldrb	r3, [r3, #5]
    2056:	4393      	bics	r3, r2
    2058:	2b02      	cmp	r3, #2
    205a:	d1b4      	bne.n	1fc6 <cdcdf_acm_ctrl+0x26>
		if (func_data->func_iface[i] == 0xFF) {
    205c:	7823      	ldrb	r3, [r4, #0]
    205e:	2bff      	cmp	r3, #255	; 0xff
    2060:	d007      	beq.n	2072 <STACK_SIZE+0x72>
			func_data->func_iface[i] = 0xFF;
    2062:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    2064:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    2066:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2068:	42a8      	cmp	r0, r5
    206a:	d002      	beq.n	2072 <STACK_SIZE+0x72>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    206c:	4b14      	ldr	r3, [pc, #80]	; (20c0 <STACK_SIZE+0xc0>)
    206e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2070:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2072:	7863      	ldrb	r3, [r4, #1]
    2074:	2bff      	cmp	r3, #255	; 0xff
    2076:	d007      	beq.n	2088 <STACK_SIZE+0x88>
			func_data->func_iface[i] = 0xFF;
    2078:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    207a:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    207c:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    207e:	42a8      	cmp	r0, r5
    2080:	d002      	beq.n	2088 <STACK_SIZE+0x88>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2082:	4b0f      	ldr	r3, [pc, #60]	; (20c0 <STACK_SIZE+0xc0>)
    2084:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2086:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2088:	7920      	ldrb	r0, [r4, #4]
    208a:	28ff      	cmp	r0, #255	; 0xff
    208c:	d003      	beq.n	2096 <STACK_SIZE+0x96>
		usb_d_ep_deinit(func_data->func_ep_out);
    208e:	4b0c      	ldr	r3, [pc, #48]	; (20c0 <STACK_SIZE+0xc0>)
    2090:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2092:	23ff      	movs	r3, #255	; 0xff
    2094:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2096:	2000      	movs	r0, #0
    2098:	4b05      	ldr	r3, [pc, #20]	; (20b0 <STACK_SIZE+0xb0>)
    209a:	7158      	strb	r0, [r3, #5]
    209c:	e7b7      	b.n	200e <STACK_SIZE+0xe>
				return ERR_ALREADY_INITIALIZED;
    209e:	2012      	movs	r0, #18
    20a0:	e792      	b.n	1fc8 <cdcdf_acm_ctrl+0x28>
				return ERR_NO_RESOURCE;
    20a2:	201c      	movs	r0, #28
    20a4:	e790      	b.n	1fc8 <cdcdf_acm_ctrl+0x28>
				return ERR_NOT_INITIALIZED;
    20a6:	2014      	movs	r0, #20
    20a8:	e78e      	b.n	1fc8 <cdcdf_acm_ctrl+0x28>
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	00002761 	.word	0x00002761
    20b0:	200002f0 	.word	0x200002f0
    20b4:	00000969 	.word	0x00000969
    20b8:	000009f9 	.word	0x000009f9
    20bc:	0000277b 	.word	0x0000277b
    20c0:	000009cd 	.word	0x000009cd

000020c4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    20c4:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    20c6:	4b0a      	ldr	r3, [pc, #40]	; (20f0 <cdcdf_acm_init+0x2c>)
    20c8:	4798      	blx	r3
    20ca:	2801      	cmp	r0, #1
    20cc:	d80c      	bhi.n	20e8 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    20ce:	4809      	ldr	r0, [pc, #36]	; (20f4 <cdcdf_acm_init+0x30>)
    20d0:	4b09      	ldr	r3, [pc, #36]	; (20f8 <cdcdf_acm_init+0x34>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    20d2:	6200      	str	r0, [r0, #32]
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    20d4:	61c3      	str	r3, [r0, #28]

	usbdc_register_function(&_cdcdf_acm);
    20d6:	3018      	adds	r0, #24
    20d8:	4b08      	ldr	r3, [pc, #32]	; (20fc <cdcdf_acm_init+0x38>)
    20da:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    20dc:	2001      	movs	r0, #1
    20de:	4908      	ldr	r1, [pc, #32]	; (2100 <cdcdf_acm_init+0x3c>)
    20e0:	4b08      	ldr	r3, [pc, #32]	; (2104 <cdcdf_acm_init+0x40>)
    20e2:	4798      	blx	r3
	return ERR_NONE;
    20e4:	2000      	movs	r0, #0
}
    20e6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    20e8:	2011      	movs	r0, #17
    20ea:	4240      	negs	r0, r0
    20ec:	e7fb      	b.n	20e6 <cdcdf_acm_init+0x22>
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	0000274d 	.word	0x0000274d
    20f4:	200002f0 	.word	0x200002f0
    20f8:	00001fa1 	.word	0x00001fa1
    20fc:	000026e9 	.word	0x000026e9
    2100:	20000000 	.word	0x20000000
    2104:	00002659 	.word	0x00002659

00002108 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    2108:	b510      	push	{r4, lr}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    210a:	4b07      	ldr	r3, [pc, #28]	; (2128 <cdcdf_acm_read+0x20>)
{
    210c:	000a      	movs	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    210e:	7959      	ldrb	r1, [r3, #5]
{
    2110:	0004      	movs	r4, r0
	if (!cdcdf_acm_is_enabled()) {
    2112:	2900      	cmp	r1, #0
    2114:	d005      	beq.n	2122 <cdcdf_acm_read+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    2116:	7918      	ldrb	r0, [r3, #4]
    2118:	0021      	movs	r1, r4
    211a:	2300      	movs	r3, #0
    211c:	4c03      	ldr	r4, [pc, #12]	; (212c <cdcdf_acm_read+0x24>)
    211e:	47a0      	blx	r4
}
    2120:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2122:	2011      	movs	r0, #17
    2124:	4240      	negs	r0, r0
    2126:	e7fb      	b.n	2120 <cdcdf_acm_read+0x18>
    2128:	200002f0 	.word	0x200002f0
    212c:	00002321 	.word	0x00002321

00002130 <cdcdf_acm_write>:
{
    2130:	b510      	push	{r4, lr}
	return _cdcdf_acm_funcd.enabled;
    2132:	4b07      	ldr	r3, [pc, #28]	; (2150 <cdcdf_acm_write+0x20>)
{
    2134:	000a      	movs	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    2136:	7959      	ldrb	r1, [r3, #5]
{
    2138:	0004      	movs	r4, r0
	if (!cdcdf_acm_is_enabled()) {
    213a:	2900      	cmp	r1, #0
    213c:	d005      	beq.n	214a <cdcdf_acm_write+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    213e:	78d8      	ldrb	r0, [r3, #3]
    2140:	0021      	movs	r1, r4
    2142:	2301      	movs	r3, #1
    2144:	4c03      	ldr	r4, [pc, #12]	; (2154 <cdcdf_acm_write+0x24>)
    2146:	47a0      	blx	r4
}
    2148:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    214a:	2011      	movs	r0, #17
    214c:	4240      	negs	r0, r0
    214e:	e7fb      	b.n	2148 <cdcdf_acm_write+0x18>
    2150:	200002f0 	.word	0x200002f0
    2154:	00002321 	.word	0x00002321

00002158 <cdcdf_acm_register_callback>:
{
    2158:	b510      	push	{r4, lr}
    215a:	000a      	movs	r2, r1
	switch (cb_type) {
    215c:	2803      	cmp	r0, #3
    215e:	d810      	bhi.n	2182 <cdcdf_acm_register_callback+0x2a>
    2160:	4b09      	ldr	r3, [pc, #36]	; (2188 <cdcdf_acm_register_callback+0x30>)
    2162:	f000 fbbf 	bl	28e4 <__gnu_thumb1_case_uqi>
    2166:	0802      	.short	0x0802
    2168:	0c0a      	.short	0x0c0a
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    216a:	7918      	ldrb	r0, [r3, #4]
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    216c:	2102      	movs	r1, #2
    216e:	4b07      	ldr	r3, [pc, #28]	; (218c <cdcdf_acm_register_callback+0x34>)
    2170:	4798      	blx	r3
	return ERR_NONE;
    2172:	2000      	movs	r0, #0
}
    2174:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2176:	78d8      	ldrb	r0, [r3, #3]
    2178:	e7f8      	b.n	216c <cdcdf_acm_register_callback+0x14>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    217a:	6119      	str	r1, [r3, #16]
    217c:	e7f9      	b.n	2172 <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    217e:	6159      	str	r1, [r3, #20]
    2180:	e7f7      	b.n	2172 <cdcdf_acm_register_callback+0x1a>
		return ERR_INVALID_ARG;
    2182:	200d      	movs	r0, #13
    2184:	4240      	negs	r0, r0
    2186:	e7f5      	b.n	2174 <cdcdf_acm_register_callback+0x1c>
    2188:	200002f0 	.word	0x200002f0
    218c:	00000b91 	.word	0x00000b91

00002190 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    2190:	4b01      	ldr	r3, [pc, #4]	; (2198 <cdcdf_acm_is_enabled+0x8>)
    2192:	7958      	ldrb	r0, [r3, #5]
}
    2194:	4770      	bx	lr
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	200002f0 	.word	0x200002f0

0000219c <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    219c:	4b06      	ldr	r3, [pc, #24]	; (21b8 <usbdc_unconfig+0x1c>)
{
    219e:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    21a0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    21a2:	2c00      	cmp	r4, #0
    21a4:	d100      	bne.n	21a8 <usbdc_unconfig+0xc>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
    21a6:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
    21a8:	0020      	movs	r0, r4
    21aa:	6863      	ldr	r3, [r4, #4]
    21ac:	2200      	movs	r2, #0
    21ae:	2101      	movs	r1, #1
    21b0:	4798      	blx	r3
		func = func->next;
    21b2:	6824      	ldr	r4, [r4, #0]
    21b4:	e7f5      	b.n	21a2 <usbdc_unconfig+0x6>
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	20000314 	.word	0x20000314

000021bc <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    21bc:	b570      	push	{r4, r5, r6, lr}
    21be:	0005      	movs	r5, r0
    21c0:	000e      	movs	r6, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    21c2:	4b06      	ldr	r3, [pc, #24]	; (21dc <usbdc_change_notify+0x20>)
    21c4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    21c6:	2c00      	cmp	r4, #0
    21c8:	d100      	bne.n	21cc <usbdc_change_notify+0x10>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    21ca:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
    21cc:	6863      	ldr	r3, [r4, #4]
    21ce:	2b00      	cmp	r3, #0
    21d0:	d002      	beq.n	21d8 <usbdc_change_notify+0x1c>
			cg->cb(change, value);
    21d2:	0031      	movs	r1, r6
    21d4:	0028      	movs	r0, r5
    21d6:	4798      	blx	r3
		cg = cg->next;
    21d8:	6824      	ldr	r4, [r4, #0]
    21da:	e7f4      	b.n	21c6 <usbdc_change_notify+0xa>
    21dc:	20000314 	.word	0x20000314

000021e0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    21e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21e2:	0005      	movs	r5, r0
    21e4:	000e      	movs	r6, r1
    21e6:	0017      	movs	r7, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    21e8:	4b0b      	ldr	r3, [pc, #44]	; (2218 <usbdc_request_handler+0x38>)
    21ea:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    21ec:	2c00      	cmp	r4, #0
    21ee:	d101      	bne.n	21f4 <usbdc_request_handler+0x14>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    21f0:	0020      	movs	r0, r4
}
    21f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
    21f4:	6863      	ldr	r3, [r4, #4]
    21f6:	2b00      	cmp	r3, #0
    21f8:	d101      	bne.n	21fe <usbdc_request_handler+0x1e>
		h = h->next;
    21fa:	6824      	ldr	r4, [r4, #0]
    21fc:	e7f6      	b.n	21ec <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
    21fe:	003a      	movs	r2, r7
    2200:	0031      	movs	r1, r6
    2202:	0028      	movs	r0, r5
    2204:	4798      	blx	r3
			if (0 == rc) {
    2206:	2800      	cmp	r0, #0
    2208:	d004      	beq.n	2214 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    220a:	300a      	adds	r0, #10
    220c:	d0f5      	beq.n	21fa <usbdc_request_handler+0x1a>
				return -1;
    220e:	2001      	movs	r0, #1
    2210:	4240      	negs	r0, r0
    2212:	e7ee      	b.n	21f2 <usbdc_request_handler+0x12>
				return true;
    2214:	2001      	movs	r0, #1
    2216:	e7ec      	b.n	21f2 <usbdc_request_handler+0x12>
    2218:	20000314 	.word	0x20000314

0000221c <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    221c:	4b05      	ldr	r3, [pc, #20]	; (2234 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    221e:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2220:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2222:	2c00      	cmp	r4, #0
    2224:	d100      	bne.n	2228 <usbd_sof_cb+0xc>
	usbdc_sof_notify();
}
    2226:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
    2228:	6863      	ldr	r3, [r4, #4]
    222a:	2b00      	cmp	r3, #0
    222c:	d000      	beq.n	2230 <usbd_sof_cb+0x14>
			sof->cb();
    222e:	4798      	blx	r3
		sof = sof->next;
    2230:	6824      	ldr	r4, [r4, #0]
    2232:	e7f6      	b.n	2222 <usbd_sof_cb+0x6>
    2234:	20000314 	.word	0x20000314

00002238 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2238:	b510      	push	{r4, lr}
    223a:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    223c:	2900      	cmp	r1, #0
    223e:	d003      	beq.n	2248 <usbdc_cb_ctl_done+0x10>
    2240:	2901      	cmp	r1, #1
    2242:	d023      	beq.n	228c <usbdc_cb_ctl_done+0x54>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2244:	2000      	movs	r0, #0
    2246:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2248:	7813      	ldrb	r3, [r2, #0]
    224a:	2b00      	cmp	r3, #0
    224c:	d1fa      	bne.n	2244 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    224e:	7853      	ldrb	r3, [r2, #1]
    2250:	2b05      	cmp	r3, #5
    2252:	d00f      	beq.n	2274 <usbdc_cb_ctl_done+0x3c>
    2254:	2b09      	cmp	r3, #9
    2256:	d1f5      	bne.n	2244 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2258:	78d1      	ldrb	r1, [r2, #3]
    225a:	7893      	ldrb	r3, [r2, #2]
    225c:	0209      	lsls	r1, r1, #8
    225e:	4319      	orrs	r1, r3
    2260:	4b0d      	ldr	r3, [pc, #52]	; (2298 <usbdc_cb_ctl_done+0x60>)
    2262:	76d9      	strb	r1, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2264:	1e4a      	subs	r2, r1, #1
    2266:	4191      	sbcs	r1, r2
    2268:	3103      	adds	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    226a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    226c:	2001      	movs	r0, #1
    226e:	4b0b      	ldr	r3, [pc, #44]	; (229c <usbdc_cb_ctl_done+0x64>)
    2270:	4798      	blx	r3
    2272:	e7e7      	b.n	2244 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2274:	4b0a      	ldr	r3, [pc, #40]	; (22a0 <usbdc_cb_ctl_done+0x68>)
    2276:	7890      	ldrb	r0, [r2, #2]
    2278:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    227a:	78e1      	ldrb	r1, [r4, #3]
    227c:	78a3      	ldrb	r3, [r4, #2]
    227e:	0209      	lsls	r1, r1, #8
    2280:	4319      	orrs	r1, r3
    2282:	1e4b      	subs	r3, r1, #1
    2284:	4199      	sbcs	r1, r3
    2286:	4b04      	ldr	r3, [pc, #16]	; (2298 <usbdc_cb_ctl_done+0x60>)
    2288:	3102      	adds	r1, #2
    228a:	e7ee      	b.n	226a <usbdc_cb_ctl_done+0x32>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    228c:	000a      	movs	r2, r1
    228e:	4b05      	ldr	r3, [pc, #20]	; (22a4 <usbdc_cb_ctl_done+0x6c>)
    2290:	0021      	movs	r1, r4
    2292:	2000      	movs	r0, #0
    2294:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2296:	e7d5      	b.n	2244 <usbdc_cb_ctl_done+0xc>
    2298:	20000314 	.word	0x20000314
    229c:	000021bd 	.word	0x000021bd
    22a0:	0000095d 	.word	0x0000095d
    22a4:	000021e1 	.word	0x000021e1

000022a8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    22a8:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();

	usbdc.state       = USBD_S_DEFAULT;
	usbdc.cfg_value   = 0;
    22aa:	2400      	movs	r4, #0
	usbdc.state       = USBD_S_DEFAULT;
    22ac:	2602      	movs	r6, #2
	usbdc_unconfig();
    22ae:	4b0c      	ldr	r3, [pc, #48]	; (22e0 <usbdc_reset+0x38>)
    22b0:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
    22b2:	4d0c      	ldr	r5, [pc, #48]	; (22e4 <usbdc_reset+0x3c>)
	usbdc.ifc_alt_map = 0;

	// Setup EP0
	usb_d_ep_deinit(0);
    22b4:	0020      	movs	r0, r4
    22b6:	4b0c      	ldr	r3, [pc, #48]	; (22e8 <usbdc_reset+0x40>)
	usbdc.state       = USBD_S_DEFAULT;
    22b8:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    22ba:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    22bc:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
    22be:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    22c0:	4b0a      	ldr	r3, [pc, #40]	; (22ec <usbdc_reset+0x44>)
    22c2:	7f28      	ldrb	r0, [r5, #28]
    22c4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    22c6:	4d0a      	ldr	r5, [pc, #40]	; (22f0 <usbdc_reset+0x48>)
    22c8:	0021      	movs	r1, r4
    22ca:	0020      	movs	r0, r4
    22cc:	4a09      	ldr	r2, [pc, #36]	; (22f4 <usbdc_reset+0x4c>)
    22ce:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    22d0:	0031      	movs	r1, r6
    22d2:	4a09      	ldr	r2, [pc, #36]	; (22f8 <usbdc_reset+0x50>)
    22d4:	0020      	movs	r0, r4
    22d6:	47a8      	blx	r5
	usb_d_ep_enable(0);
    22d8:	0020      	movs	r0, r4
    22da:	4b08      	ldr	r3, [pc, #32]	; (22fc <usbdc_reset+0x54>)
    22dc:	4798      	blx	r3
}
    22de:	bd70      	pop	{r4, r5, r6, pc}
    22e0:	0000219d 	.word	0x0000219d
    22e4:	20000314 	.word	0x20000314
    22e8:	000009cd 	.word	0x000009cd
    22ec:	000009b9 	.word	0x000009b9
    22f0:	00000b91 	.word	0x00000b91
    22f4:	0000233d 	.word	0x0000233d
    22f8:	00002239 	.word	0x00002239
    22fc:	000009f9 	.word	0x000009f9

00002300 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2300:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    2302:	2800      	cmp	r0, #0
    2304:	d002      	beq.n	230c <usbd_event_cb+0xc>
    2306:	2801      	cmp	r0, #1
    2308:	d003      	beq.n	2312 <usbd_event_cb+0x12>
		break;

	default:
		break;
	}
}
    230a:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    230c:	4b02      	ldr	r3, [pc, #8]	; (2318 <usbd_event_cb+0x18>)
    230e:	4798      	blx	r3
		break;
    2310:	e7fb      	b.n	230a <usbd_event_cb+0xa>
		usbdc_reset();
    2312:	4b02      	ldr	r3, [pc, #8]	; (231c <usbd_event_cb+0x1c>)
    2314:	4798      	blx	r3
}
    2316:	e7f8      	b.n	230a <usbd_event_cb+0xa>
    2318:	000021bd 	.word	0x000021bd
    231c:	000022a9 	.word	0x000022a9

00002320 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2322:	ac01      	add	r4, sp, #4
    2324:	7220      	strb	r0, [r4, #8]
    2326:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    2328:	0020      	movs	r0, r4
    232a:	4b03      	ldr	r3, [pc, #12]	; (2338 <usbdc_xfer+0x18>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    232c:	9101      	str	r1, [sp, #4]
    232e:	9202      	str	r2, [sp, #8]
	return usb_d_ep_transfer(&xfer);
    2330:	4798      	blx	r3
}
    2332:	b004      	add	sp, #16
    2334:	bd10      	pop	{r4, pc}
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	00000a39 	.word	0x00000a39

0000233c <usbdc_cb_ctl_req>:
{
    233c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    233e:	4bb3      	ldr	r3, [pc, #716]	; (260c <usbdc_cb_ctl_req+0x2d0>)
    2340:	2200      	movs	r2, #0
{
    2342:	0004      	movs	r4, r0
    2344:	000d      	movs	r5, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2346:	4798      	blx	r3
		return false;
    2348:	2200      	movs	r2, #0
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    234a:	1c43      	adds	r3, r0, #1
    234c:	d100      	bne.n	2350 <usbdc_cb_ctl_req+0x14>
    234e:	e15a      	b.n	2606 <usbdc_cb_ctl_req+0x2ca>
		return true;
    2350:	3201      	adds	r2, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2352:	4290      	cmp	r0, r2
    2354:	d100      	bne.n	2358 <usbdc_cb_ctl_req+0x1c>
    2356:	e156      	b.n	2606 <usbdc_cb_ctl_req+0x2ca>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2358:	7829      	ldrb	r1, [r5, #0]
    235a:	231f      	movs	r3, #31
    235c:	000a      	movs	r2, r1
    235e:	439a      	bics	r2, r3
    2360:	d004      	beq.n	236c <usbdc_cb_ctl_req+0x30>
    2362:	2a80      	cmp	r2, #128	; 0x80
    2364:	d100      	bne.n	2368 <usbdc_cb_ctl_req+0x2c>
    2366:	e0b1      	b.n	24cc <usbdc_cb_ctl_req+0x190>
	return false;
    2368:	2200      	movs	r2, #0
    236a:	e14c      	b.n	2606 <usbdc_cb_ctl_req+0x2ca>
	switch (req->bRequest) {
    236c:	7868      	ldrb	r0, [r5, #1]
    236e:	3801      	subs	r0, #1
    2370:	280a      	cmp	r0, #10
    2372:	d8f9      	bhi.n	2368 <usbdc_cb_ctl_req+0x2c>
    2374:	f000 faac 	bl	28d0 <__gnu_thumb1_case_sqi>
    2378:	f854f842 	.word	0xf854f842
    237c:	f8f8f80b 	.word	0xf8f8f80b
    2380:	f806      	.short	0xf806
    2382:	5e          	.byte	0x5e
    2383:	00          	.byte	0x00
		if (!usbdc_set_config(req->wValue)) {
    2384:	78aa      	ldrb	r2, [r5, #2]
	if (cfg_value == 0) {
    2386:	2a00      	cmp	r2, #0
    2388:	d105      	bne.n	2396 <usbdc_cb_ctl_req+0x5a>
		usbdc_unconfig();
    238a:	4ba1      	ldr	r3, [pc, #644]	; (2610 <usbdc_cb_ctl_req+0x2d4>)
    238c:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    238e:	2200      	movs	r2, #0
    2390:	2301      	movs	r3, #1
    2392:	0011      	movs	r1, r2
    2394:	e0cb      	b.n	252e <usbdc_cb_ctl_req+0x1f2>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2396:	4d9f      	ldr	r5, [pc, #636]	; (2614 <usbdc_cb_ctl_req+0x2d8>)
    2398:	682b      	ldr	r3, [r5, #0]
    239a:	cb03      	ldmia	r3!, {r0, r1}
    239c:	4b9e      	ldr	r3, [pc, #632]	; (2618 <usbdc_cb_ctl_req+0x2dc>)
    239e:	4798      	blx	r3
			return false;
    23a0:	1e02      	subs	r2, r0, #0
	if (NULL == cfg_desc) {
    23a2:	d100      	bne.n	23a6 <usbdc_cb_ctl_req+0x6a>
    23a4:	e12f      	b.n	2606 <usbdc_cb_ctl_req+0x2ca>
	return (ptr[0] + (ptr[1] << 8));
    23a6:	78c3      	ldrb	r3, [r0, #3]
    23a8:	7881      	ldrb	r1, [r0, #2]
    23aa:	021b      	lsls	r3, r3, #8
    23ac:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    23ae:	b289      	uxth	r1, r1
    23b0:	1841      	adds	r1, r0, r1
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    23b2:	4b9a      	ldr	r3, [pc, #616]	; (261c <usbdc_cb_ctl_req+0x2e0>)
    23b4:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    23b6:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    23b8:	4798      	blx	r3
	uint8_t                 last_iface = 0xFF;
    23ba:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    23bc:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    23be:	9a00      	ldr	r2, [sp, #0]
    23c0:	2a00      	cmp	r2, #0
    23c2:	d0e4      	beq.n	238e <usbdc_cb_ctl_req+0x52>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    23c4:	7896      	ldrb	r6, [r2, #2]
    23c6:	429e      	cmp	r6, r3
    23c8:	d016      	beq.n	23f8 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    23ca:	692f      	ldr	r7, [r5, #16]
			while (NULL != func) {
    23cc:	2f00      	cmp	r7, #0
    23ce:	d10a      	bne.n	23e6 <usbdc_cb_ctl_req+0xaa>
		desc.sod = usb_desc_next(desc.sod);
    23d0:	9800      	ldr	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    23d2:	2204      	movs	r2, #4
	return (desc + usb_desc_len(desc));
    23d4:	7803      	ldrb	r3, [r0, #0]
    23d6:	9901      	ldr	r1, [sp, #4]
    23d8:	18c0      	adds	r0, r0, r3
    23da:	4b90      	ldr	r3, [pc, #576]	; (261c <usbdc_cb_ctl_req+0x2e0>)
		desc.sod = usb_desc_next(desc.sod);
    23dc:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    23de:	4798      	blx	r3
    23e0:	0033      	movs	r3, r6
    23e2:	9000      	str	r0, [sp, #0]
    23e4:	e7eb      	b.n	23be <usbdc_cb_ctl_req+0x82>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    23e6:	466a      	mov	r2, sp
    23e8:	2100      	movs	r1, #0
    23ea:	0038      	movs	r0, r7
    23ec:	687b      	ldr	r3, [r7, #4]
    23ee:	4798      	blx	r3
    23f0:	2800      	cmp	r0, #0
    23f2:	d0ed      	beq.n	23d0 <usbdc_cb_ctl_req+0x94>
					func = func->next;
    23f4:	683f      	ldr	r7, [r7, #0]
    23f6:	e7e9      	b.n	23cc <usbdc_cb_ctl_req+0x90>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    23f8:	001e      	movs	r6, r3
    23fa:	e7e9      	b.n	23d0 <usbdc_cb_ctl_req+0x94>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    23fc:	2902      	cmp	r1, #2
    23fe:	d1b3      	bne.n	2368 <usbdc_cb_ctl_req+0x2c>
		if (req->wLength != 0) {
    2400:	79ee      	ldrb	r6, [r5, #7]
    2402:	79ab      	ldrb	r3, [r5, #6]
    2404:	0236      	lsls	r6, r6, #8
    2406:	431e      	orrs	r6, r3
    2408:	d1ae      	bne.n	2368 <usbdc_cb_ctl_req+0x2c>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    240a:	0031      	movs	r1, r6
    240c:	7928      	ldrb	r0, [r5, #4]
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    240e:	4b84      	ldr	r3, [pc, #528]	; (2620 <usbdc_cb_ctl_req+0x2e4>)
    2410:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2412:	2301      	movs	r3, #1
    2414:	0032      	movs	r2, r6
    2416:	0031      	movs	r1, r6
    2418:	0020      	movs	r0, r4
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    241a:	4c82      	ldr	r4, [pc, #520]	; (2624 <usbdc_cb_ctl_req+0x2e8>)
    241c:	47a0      	blx	r4
    241e:	e0f1      	b.n	2604 <usbdc_cb_ctl_req+0x2c8>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2420:	2902      	cmp	r1, #2
    2422:	d1a1      	bne.n	2368 <usbdc_cb_ctl_req+0x2c>
		if (req->wLength != 0) {
    2424:	79eb      	ldrb	r3, [r5, #7]
    2426:	79ae      	ldrb	r6, [r5, #6]
    2428:	021b      	lsls	r3, r3, #8
    242a:	431e      	orrs	r6, r3
    242c:	d19c      	bne.n	2368 <usbdc_cb_ctl_req+0x2c>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    242e:	7928      	ldrb	r0, [r5, #4]
    2430:	3901      	subs	r1, #1
    2432:	e7ec      	b.n	240e <usbdc_cb_ctl_req+0xd2>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2434:	78ec      	ldrb	r4, [r5, #3]
    2436:	78ab      	ldrb	r3, [r5, #2]
    2438:	0224      	lsls	r4, r4, #8
    243a:	431c      	orrs	r4, r3
    243c:	792b      	ldrb	r3, [r5, #4]
    243e:	796d      	ldrb	r5, [r5, #5]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2440:	4e74      	ldr	r6, [pc, #464]	; (2614 <usbdc_cb_ctl_req+0x2d8>)
		return usbdc_set_interface(req->wValue, req->wIndex);
    2442:	022d      	lsls	r5, r5, #8
    2444:	431d      	orrs	r5, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2446:	6833      	ldr	r3, [r6, #0]
    2448:	7ef2      	ldrb	r2, [r6, #27]
    244a:	cb03      	ldmia	r3!, {r0, r1}
    244c:	4b72      	ldr	r3, [pc, #456]	; (2618 <usbdc_cb_ctl_req+0x2dc>)
    244e:	4798      	blx	r3
	if (NULL == ifc) {
    2450:	2800      	cmp	r0, #0
    2452:	d089      	beq.n	2368 <usbdc_cb_ctl_req+0x2c>
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2454:	2204      	movs	r2, #4
	desc.sod = ifc;
    2456:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2458:	78c3      	ldrb	r3, [r0, #3]
    245a:	7881      	ldrb	r1, [r0, #2]
    245c:	021b      	lsls	r3, r3, #8
    245e:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2460:	b289      	uxth	r1, r1
    2462:	1841      	adds	r1, r0, r1
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2464:	4f6d      	ldr	r7, [pc, #436]	; (261c <usbdc_cb_ctl_req+0x2e0>)
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2466:	9101      	str	r1, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2468:	47b8      	blx	r7
		if (NULL == ifc) {
    246a:	2800      	cmp	r0, #0
    246c:	d100      	bne.n	2470 <usbdc_cb_ctl_req+0x134>
    246e:	e77b      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2470:	7883      	ldrb	r3, [r0, #2]
    2472:	42ab      	cmp	r3, r5
    2474:	d110      	bne.n	2498 <usbdc_cb_ctl_req+0x15c>
    2476:	78c3      	ldrb	r3, [r0, #3]
    2478:	42a3      	cmp	r3, r4
    247a:	d10d      	bne.n	2498 <usbdc_cb_ctl_req+0x15c>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    247c:	6937      	ldr	r7, [r6, #16]
	desc.sod = ifc;
    247e:	9000      	str	r0, [sp, #0]
	while (NULL != func) {
    2480:	2f00      	cmp	r7, #0
    2482:	d100      	bne.n	2486 <usbdc_cb_ctl_req+0x14a>
    2484:	e770      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2486:	2101      	movs	r1, #1
    2488:	466a      	mov	r2, sp
    248a:	0038      	movs	r0, r7
    248c:	687b      	ldr	r3, [r7, #4]
    248e:	4798      	blx	r3
    2490:	1e01      	subs	r1, r0, #0
    2492:	d008      	beq.n	24a6 <usbdc_cb_ctl_req+0x16a>
			func = func->next;
    2494:	683f      	ldr	r7, [r7, #0]
    2496:	e7f3      	b.n	2480 <usbdc_cb_ctl_req+0x144>
		desc.sod = usb_desc_next(desc.sod);
    2498:	9800      	ldr	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    249a:	2204      	movs	r2, #4
	return (desc + usb_desc_len(desc));
    249c:	7803      	ldrb	r3, [r0, #0]
    249e:	9901      	ldr	r1, [sp, #4]
    24a0:	18c0      	adds	r0, r0, r3
		desc.sod = usb_desc_next(desc.sod);
    24a2:	9000      	str	r0, [sp, #0]
    24a4:	e7e0      	b.n	2468 <usbdc_cb_ctl_req+0x12c>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	466a      	mov	r2, sp
    24aa:	0038      	movs	r0, r7
    24ac:	4798      	blx	r3
    24ae:	2800      	cmp	r0, #0
    24b0:	d000      	beq.n	24b4 <usbdc_cb_ctl_req+0x178>
    24b2:	e759      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
			if (alt_set) {
    24b4:	2c00      	cmp	r4, #0
    24b6:	d004      	beq.n	24c2 <usbdc_cb_ctl_req+0x186>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    24b8:	2201      	movs	r2, #1
    24ba:	40aa      	lsls	r2, r5
    24bc:	7f73      	ldrb	r3, [r6, #29]
    24be:	4313      	orrs	r3, r2
    24c0:	7773      	strb	r3, [r6, #29]
			usbdc_xfer(0, NULL, 0, 0);
    24c2:	2300      	movs	r3, #0
    24c4:	001a      	movs	r2, r3
    24c6:	0019      	movs	r1, r3
    24c8:	0018      	movs	r0, r3
    24ca:	e7a6      	b.n	241a <usbdc_cb_ctl_req+0xde>
	switch (req->bRequest) {
    24cc:	7868      	ldrb	r0, [r5, #1]
    24ce:	280a      	cmp	r0, #10
    24d0:	d900      	bls.n	24d4 <usbdc_cb_ctl_req+0x198>
    24d2:	e749      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
    24d4:	f000 fa10 	bl	28f8 <__gnu_thumb1_case_shi>
    24d8:	ff480068 	.word	0xff480068
    24dc:	ff48ff48 	.word	0xff48ff48
    24e0:	ff48ff48 	.word	0xff48ff48
    24e4:	ff48000b 	.word	0xff48000b
    24e8:	ff480060 	.word	0xff480060
    24ec:	0085      	.short	0x0085
	uint8_t type = (uint8_t)(req->wValue >> 8);
    24ee:	78e9      	ldrb	r1, [r5, #3]
    24f0:	78aa      	ldrb	r2, [r5, #2]
    24f2:	0209      	lsls	r1, r1, #8
    24f4:	4311      	orrs	r1, r2
	switch (type) {
    24f6:	0a0b      	lsrs	r3, r1, #8
    24f8:	2b02      	cmp	r3, #2
    24fa:	d01f      	beq.n	253c <usbdc_cb_ctl_req+0x200>
    24fc:	2b03      	cmp	r3, #3
    24fe:	d03b      	beq.n	2578 <usbdc_cb_ctl_req+0x23c>
    2500:	2b01      	cmp	r3, #1
    2502:	d000      	beq.n	2506 <usbdc_cb_ctl_req+0x1ca>
    2504:	e730      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
	uint16_t length   = req->wLength;
    2506:	79eb      	ldrb	r3, [r5, #7]
    2508:	79aa      	ldrb	r2, [r5, #6]
    250a:	021b      	lsls	r3, r3, #8
    250c:	4313      	orrs	r3, r2
    250e:	1c1d      	adds	r5, r3, #0
    2510:	2b12      	cmp	r3, #18
    2512:	d900      	bls.n	2516 <usbdc_cb_ctl_req+0x1da>
    2514:	2512      	movs	r5, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2516:	4b3f      	ldr	r3, [pc, #252]	; (2614 <usbdc_cb_ctl_req+0x2d8>)
    2518:	2201      	movs	r2, #1
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	b2ad      	uxth	r5, r5
    251e:	cb03      	ldmia	r3!, {r0, r1}
    2520:	4b3e      	ldr	r3, [pc, #248]	; (261c <usbdc_cb_ctl_req+0x2e0>)
    2522:	4798      	blx	r3
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2524:	2300      	movs	r3, #0
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2526:	1e01      	subs	r1, r0, #0
	if (!dev_desc) {
    2528:	d100      	bne.n	252c <usbdc_cb_ctl_req+0x1f0>
    252a:	e71d      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    252c:	002a      	movs	r2, r5
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    252e:	0020      	movs	r0, r4
    2530:	4c3c      	ldr	r4, [pc, #240]	; (2624 <usbdc_cb_ctl_req+0x2e8>)
    2532:	47a0      	blx	r4
    2534:	4242      	negs	r2, r0
    2536:	4142      	adcs	r2, r0
    2538:	b2d2      	uxtb	r2, r2
    253a:	e064      	b.n	2606 <usbdc_cb_ctl_req+0x2ca>
	uint16_t length   = req->wLength;
    253c:	79ab      	ldrb	r3, [r5, #6]
    253e:	79ed      	ldrb	r5, [r5, #7]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2540:	3101      	adds	r1, #1
	uint16_t length   = req->wLength;
    2542:	022d      	lsls	r5, r5, #8
    2544:	431d      	orrs	r5, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2546:	4b33      	ldr	r3, [pc, #204]	; (2614 <usbdc_cb_ctl_req+0x2d8>)
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2548:	b2ca      	uxtb	r2, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    254a:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    254c:	681b      	ldr	r3, [r3, #0]
    254e:	cb03      	ldmia	r3!, {r0, r1}
    2550:	4b31      	ldr	r3, [pc, #196]	; (2618 <usbdc_cb_ctl_req+0x2dc>)
    2552:	4798      	blx	r3
    2554:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    2556:	d100      	bne.n	255a <usbdc_cb_ctl_req+0x21e>
    2558:	e706      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
	return (ptr[0] + (ptr[1] << 8));
    255a:	78c3      	ldrb	r3, [r0, #3]
    255c:	7882      	ldrb	r2, [r0, #2]
    255e:	021b      	lsls	r3, r3, #8
    2560:	18d2      	adds	r2, r2, r3
    2562:	b292      	uxth	r2, r2
		need_zlp = false;
    2564:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    2566:	4295      	cmp	r5, r2
    2568:	d9e0      	bls.n	252c <usbdc_cb_ctl_req+0x1f0>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    256a:	3e01      	subs	r6, #1
    256c:	4035      	ands	r5, r6
    256e:	426b      	negs	r3, r5
    2570:	416b      	adcs	r3, r5
    2572:	0015      	movs	r5, r2
    2574:	b2db      	uxtb	r3, r3
    2576:	e7d9      	b.n	252c <usbdc_cb_ctl_req+0x1f0>
	uint16_t length   = req->wLength;
    2578:	79ab      	ldrb	r3, [r5, #6]
    257a:	79ed      	ldrb	r5, [r5, #7]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    257c:	b2ca      	uxtb	r2, r1
	uint16_t length   = req->wLength;
    257e:	022d      	lsls	r5, r5, #8
    2580:	431d      	orrs	r5, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2582:	4b24      	ldr	r3, [pc, #144]	; (2614 <usbdc_cb_ctl_req+0x2d8>)
    2584:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2586:	681b      	ldr	r3, [r3, #0]
    2588:	cb03      	ldmia	r3!, {r0, r1}
    258a:	4b27      	ldr	r3, [pc, #156]	; (2628 <usbdc_cb_ctl_req+0x2ec>)
    258c:	4798      	blx	r3
    258e:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    2590:	d100      	bne.n	2594 <usbdc_cb_ctl_req+0x258>
    2592:	e6e9      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
	if (length <= str_desc[0]) {
    2594:	7802      	ldrb	r2, [r0, #0]
    2596:	e7e5      	b.n	2564 <usbdc_cb_ctl_req+0x228>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2598:	491e      	ldr	r1, [pc, #120]	; (2614 <usbdc_cb_ctl_req+0x2d8>)
    259a:	7ecb      	ldrb	r3, [r1, #27]
    259c:	694a      	ldr	r2, [r1, #20]
    259e:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    25a0:	6949      	ldr	r1, [r1, #20]
    25a2:	2300      	movs	r3, #0
    25a4:	2201      	movs	r2, #1
    25a6:	e737      	b.n	2418 <usbdc_cb_ctl_req+0xdc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    25a8:	231f      	movs	r3, #31
    25aa:	4019      	ands	r1, r3
    25ac:	2901      	cmp	r1, #1
    25ae:	d90c      	bls.n	25ca <usbdc_cb_ctl_req+0x28e>
    25b0:	2902      	cmp	r1, #2
    25b2:	d000      	beq.n	25b6 <usbdc_cb_ctl_req+0x27a>
    25b4:	e6d8      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    25b6:	7928      	ldrb	r0, [r5, #4]
    25b8:	4b19      	ldr	r3, [pc, #100]	; (2620 <usbdc_cb_ctl_req+0x2e4>)
    25ba:	4798      	blx	r3
			return false;
    25bc:	2200      	movs	r2, #0
		if (st < 0) {
    25be:	4290      	cmp	r0, r2
    25c0:	db21      	blt.n	2606 <usbdc_cb_ctl_req+0x2ca>
		st = st & 0x1;
    25c2:	2301      	movs	r3, #1
    25c4:	4018      	ands	r0, r3
    25c6:	9000      	str	r0, [sp, #0]
    25c8:	e001      	b.n	25ce <usbdc_cb_ctl_req+0x292>
		st = 0;
    25ca:	2300      	movs	r3, #0
    25cc:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    25ce:	4d11      	ldr	r5, [pc, #68]	; (2614 <usbdc_cb_ctl_req+0x2d8>)
    25d0:	2202      	movs	r2, #2
    25d2:	4669      	mov	r1, sp
    25d4:	4b15      	ldr	r3, [pc, #84]	; (262c <usbdc_cb_ctl_req+0x2f0>)
    25d6:	6968      	ldr	r0, [r5, #20]
    25d8:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    25da:	2300      	movs	r3, #0
    25dc:	2202      	movs	r2, #2
    25de:	6969      	ldr	r1, [r5, #20]
    25e0:	e71a      	b.n	2418 <usbdc_cb_ctl_req+0xdc>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    25e2:	4e0c      	ldr	r6, [pc, #48]	; (2614 <usbdc_cb_ctl_req+0x2d8>)
    25e4:	796b      	ldrb	r3, [r5, #5]
    25e6:	792a      	ldrb	r2, [r5, #4]
    25e8:	7f70      	ldrb	r0, [r6, #29]
    25ea:	021b      	lsls	r3, r3, #8
    25ec:	4313      	orrs	r3, r2
    25ee:	4118      	asrs	r0, r3
    25f0:	2401      	movs	r4, #1
    25f2:	4020      	ands	r0, r4
    25f4:	d12e      	bne.n	2654 <usbdc_cb_ctl_req+0x318>
		usbdc.ctrl_buf[0] = 0;
    25f6:	6973      	ldr	r3, [r6, #20]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    25f8:	0022      	movs	r2, r4
		usbdc.ctrl_buf[0] = 0;
    25fa:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    25fc:	6971      	ldr	r1, [r6, #20]
    25fe:	0003      	movs	r3, r0
    2600:	4d08      	ldr	r5, [pc, #32]	; (2624 <usbdc_cb_ctl_req+0x2e8>)
    2602:	47a8      	blx	r5
			return true;
    2604:	2201      	movs	r2, #1
}
    2606:	0010      	movs	r0, r2
    2608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	000021e1 	.word	0x000021e1
    2610:	0000219d 	.word	0x0000219d
    2614:	20000314 	.word	0x20000314
    2618:	00002799 	.word	0x00002799
    261c:	00002761 	.word	0x00002761
    2620:	00000b31 	.word	0x00000b31
    2624:	00002321 	.word	0x00002321
    2628:	000027d5 	.word	0x000027d5
    262c:	00002955 	.word	0x00002955
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2630:	002a      	movs	r2, r5
    2632:	2102      	movs	r1, #2
    2634:	0020      	movs	r0, r4
    2636:	6863      	ldr	r3, [r4, #4]
    2638:	4798      	blx	r3
    263a:	2800      	cmp	r0, #0
    263c:	da03      	bge.n	2646 <usbdc_cb_ctl_req+0x30a>
			func = func->next;
    263e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2640:	2c00      	cmp	r4, #0
    2642:	d1f5      	bne.n	2630 <usbdc_cb_ctl_req+0x2f4>
    2644:	e690      	b.n	2368 <usbdc_cb_ctl_req+0x2c>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2646:	6973      	ldr	r3, [r6, #20]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2648:	2201      	movs	r2, #1
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    264a:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    264c:	2300      	movs	r3, #0
    264e:	6971      	ldr	r1, [r6, #20]
    2650:	0018      	movs	r0, r3
    2652:	e6e2      	b.n	241a <usbdc_cb_ctl_req+0xde>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2654:	6934      	ldr	r4, [r6, #16]
    2656:	e7f3      	b.n	2640 <usbdc_cb_ctl_req+0x304>

00002658 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2658:	b510      	push	{r4, lr}
	switch (type) {
    265a:	2801      	cmp	r0, #1
    265c:	d009      	beq.n	2672 <usbdc_register_handler+0x1a>
    265e:	2800      	cmp	r0, #0
    2660:	d002      	beq.n	2668 <usbdc_register_handler+0x10>
    2662:	2802      	cmp	r0, #2
    2664:	d008      	beq.n	2678 <usbdc_register_handler+0x20>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    2666:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2668:	4805      	ldr	r0, [pc, #20]	; (2680 <usbdc_register_handler+0x28>)
    266a:	3004      	adds	r0, #4
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    266c:	4b05      	ldr	r3, [pc, #20]	; (2684 <usbdc_register_handler+0x2c>)
    266e:	4798      	blx	r3
}
    2670:	e7f9      	b.n	2666 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2672:	4803      	ldr	r0, [pc, #12]	; (2680 <usbdc_register_handler+0x28>)
    2674:	3008      	adds	r0, #8
    2676:	e7f9      	b.n	266c <usbdc_register_handler+0x14>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2678:	4801      	ldr	r0, [pc, #4]	; (2680 <usbdc_register_handler+0x28>)
    267a:	300c      	adds	r0, #12
    267c:	e7f6      	b.n	266c <usbdc_register_handler+0x14>
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	20000314 	.word	0x20000314
    2684:	00000bf5 	.word	0x00000bf5

00002688 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2688:	b570      	push	{r4, r5, r6, lr}
    268a:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    268c:	1e43      	subs	r3, r0, #1
    268e:	4198      	sbcs	r0, r3
    2690:	4a0c      	ldr	r2, [pc, #48]	; (26c4 <usbdc_init+0x3c>)
    2692:	4b0d      	ldr	r3, [pc, #52]	; (26c8 <usbdc_init+0x40>)
    2694:	b2c0      	uxtb	r0, r0
    2696:	490d      	ldr	r1, [pc, #52]	; (26cc <usbdc_init+0x44>)
    2698:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    269a:	4b0d      	ldr	r3, [pc, #52]	; (26d0 <usbdc_init+0x48>)
    269c:	4798      	blx	r3
	if (rc < 0) {
    269e:	2800      	cmp	r0, #0
    26a0:	db0e      	blt.n	26c0 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    26a2:	4d0c      	ldr	r5, [pc, #48]	; (26d4 <usbdc_init+0x4c>)
    26a4:	2220      	movs	r2, #32
    26a6:	4b0c      	ldr	r3, [pc, #48]	; (26d8 <usbdc_init+0x50>)
    26a8:	2100      	movs	r1, #0
    26aa:	0028      	movs	r0, r5
    26ac:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    26ae:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    26b0:	490a      	ldr	r1, [pc, #40]	; (26dc <usbdc_init+0x54>)
    26b2:	2000      	movs	r0, #0
    26b4:	4c0a      	ldr	r4, [pc, #40]	; (26e0 <usbdc_init+0x58>)
    26b6:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    26b8:	2001      	movs	r0, #1
    26ba:	490a      	ldr	r1, [pc, #40]	; (26e4 <usbdc_init+0x5c>)
    26bc:	47a0      	blx	r4

	return 0;
    26be:	2000      	movs	r0, #0
}
    26c0:	bd70      	pop	{r4, r5, r6, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	00000355 	.word	0x00000355
    26c8:	00000bdd 	.word	0x00000bdd
    26cc:	00002a7c 	.word	0x00002a7c
    26d0:	000008d1 	.word	0x000008d1
    26d4:	20000314 	.word	0x20000314
    26d8:	00002967 	.word	0x00002967
    26dc:	0000221d 	.word	0x0000221d
    26e0:	00000939 	.word	0x00000939
    26e4:	00002301 	.word	0x00002301

000026e8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    26e8:	b510      	push	{r4, lr}
    26ea:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    26ec:	4802      	ldr	r0, [pc, #8]	; (26f8 <usbdc_register_function+0x10>)
    26ee:	4b03      	ldr	r3, [pc, #12]	; (26fc <usbdc_register_function+0x14>)
    26f0:	3010      	adds	r0, #16
    26f2:	4798      	blx	r3
}
    26f4:	bd10      	pop	{r4, pc}
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	20000314 	.word	0x20000314
    26fc:	00000bf5 	.word	0x00000bf5

00002700 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2700:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2702:	4b0a      	ldr	r3, [pc, #40]	; (272c <usbdc_start+0x2c>)
    2704:	7e9c      	ldrb	r4, [r3, #26]
    2706:	2c00      	cmp	r4, #0
    2708:	d10b      	bne.n	2722 <usbdc_start+0x22>
		return ERR_BUSY;
	}

	if (desces) {
    270a:	2800      	cmp	r0, #0
    270c:	d00c      	beq.n	2728 <usbdc_start+0x28>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    270e:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    2710:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    2712:	79d2      	ldrb	r2, [r2, #7]
    2714:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2716:	2201      	movs	r2, #1
    2718:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    271a:	4b05      	ldr	r3, [pc, #20]	; (2730 <usbdc_start+0x30>)
    271c:	4798      	blx	r3
	return ERR_NONE;
    271e:	0020      	movs	r0, r4
}
    2720:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2722:	2004      	movs	r0, #4
		return ERR_BAD_DATA;
    2724:	4240      	negs	r0, r0
    2726:	e7fb      	b.n	2720 <usbdc_start+0x20>
    2728:	2009      	movs	r0, #9
    272a:	e7fb      	b.n	2724 <usbdc_start+0x24>
    272c:	20000314 	.word	0x20000314
    2730:	00000945 	.word	0x00000945

00002734 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2734:	b510      	push	{r4, lr}
	usb_d_attach();
    2736:	4b01      	ldr	r3, [pc, #4]	; (273c <usbdc_attach+0x8>)
    2738:	4798      	blx	r3
}
    273a:	bd10      	pop	{r4, pc}
    273c:	00000951 	.word	0x00000951

00002740 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    2740:	4b01      	ldr	r3, [pc, #4]	; (2748 <usbdc_get_ctrl_buffer+0x8>)
    2742:	6958      	ldr	r0, [r3, #20]
}
    2744:	4770      	bx	lr
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	20000314 	.word	0x20000314

0000274c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    274c:	4b03      	ldr	r3, [pc, #12]	; (275c <usbdc_get_state+0x10>)
    274e:	7e98      	ldrb	r0, [r3, #26]
    2750:	2310      	movs	r3, #16
    2752:	4218      	tst	r0, r3
    2754:	d000      	beq.n	2758 <usbdc_get_state+0xc>
		return USBD_S_SUSPEND;
    2756:	0018      	movs	r0, r3
	}
	return usbdc.state;
}
    2758:	4770      	bx	lr
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	20000314 	.word	0x20000314

00002760 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    2760:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2762:	4288      	cmp	r0, r1
    2764:	d301      	bcc.n	276a <usb_find_desc+0xa>
		_desc_len_check();
    2766:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    2768:	bd10      	pop	{r4, pc}
    276a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    276c:	2b01      	cmp	r3, #1
    276e:	d9fa      	bls.n	2766 <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
    2770:	7844      	ldrb	r4, [r0, #1]
    2772:	4294      	cmp	r4, r2
    2774:	d0f8      	beq.n	2768 <usb_find_desc+0x8>
	return (desc + usb_desc_len(desc));
    2776:	18c0      	adds	r0, r0, r3
    2778:	e7f3      	b.n	2762 <usb_find_desc+0x2>

0000277a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    277a:	4288      	cmp	r0, r1
    277c:	d301      	bcc.n	2782 <usb_find_ep_desc+0x8>
		_desc_len_check();
    277e:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    2780:	4770      	bx	lr
    2782:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2784:	2b01      	cmp	r3, #1
    2786:	d9fa      	bls.n	277e <usb_find_ep_desc+0x4>
	return desc[1];
    2788:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    278a:	2a04      	cmp	r2, #4
    278c:	d0f7      	beq.n	277e <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    278e:	2a05      	cmp	r2, #5
    2790:	d0f6      	beq.n	2780 <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
    2792:	18c0      	adds	r0, r0, r3
    2794:	e7f1      	b.n	277a <usb_find_ep_desc>
	...

00002798 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2798:	b570      	push	{r4, r5, r6, lr}
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    279a:	4b0d      	ldr	r3, [pc, #52]	; (27d0 <usb_find_cfg_desc+0x38>)
{
    279c:	0015      	movs	r5, r2
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    279e:	2202      	movs	r2, #2
{
    27a0:	000c      	movs	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    27a2:	4798      	blx	r3
	if (!desc) {
    27a4:	2800      	cmp	r0, #0
    27a6:	d10f      	bne.n	27c8 <usb_find_cfg_desc+0x30>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    27a8:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    27aa:	7803      	ldrb	r3, [r0, #0]
    27ac:	2b01      	cmp	r3, #1
    27ae:	d90d      	bls.n	27cc <usb_find_cfg_desc+0x34>
		if (desc[1] != USB_DT_CONFIG) {
    27b0:	7843      	ldrb	r3, [r0, #1]
    27b2:	2b02      	cmp	r3, #2
    27b4:	d10a      	bne.n	27cc <usb_find_cfg_desc+0x34>
		if (desc[5] == cfg_value) {
    27b6:	7943      	ldrb	r3, [r0, #5]
    27b8:	42ab      	cmp	r3, r5
    27ba:	d0f5      	beq.n	27a8 <usb_find_cfg_desc+0x10>
	return (ptr[0] + (ptr[1] << 8));
    27bc:	78c2      	ldrb	r2, [r0, #3]
    27be:	7883      	ldrb	r3, [r0, #2]
    27c0:	0212      	lsls	r2, r2, #8
    27c2:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    27c4:	b29b      	uxth	r3, r3
    27c6:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    27c8:	42a0      	cmp	r0, r4
    27ca:	d3ee      	bcc.n	27aa <usb_find_cfg_desc+0x12>
		return NULL;
    27cc:	2000      	movs	r0, #0
    27ce:	e7eb      	b.n	27a8 <usb_find_cfg_desc+0x10>
    27d0:	00002761 	.word	0x00002761

000027d4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    27d4:	b570      	push	{r4, r5, r6, lr}
    27d6:	000d      	movs	r5, r1
    27d8:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    27da:	2400      	movs	r4, #0
    27dc:	42a8      	cmp	r0, r5
    27de:	d301      	bcc.n	27e4 <usb_find_str_desc+0x10>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    27e0:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    27e2:	bd70      	pop	{r4, r5, r6, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    27e4:	2203      	movs	r2, #3
    27e6:	0029      	movs	r1, r5
    27e8:	4b05      	ldr	r3, [pc, #20]	; (2800 <usb_find_str_desc+0x2c>)
    27ea:	4798      	blx	r3
		if (desc) {
    27ec:	2800      	cmp	r0, #0
    27ee:	d0f8      	beq.n	27e2 <usb_find_str_desc+0xe>
    27f0:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    27f2:	2b01      	cmp	r3, #1
    27f4:	d9f4      	bls.n	27e0 <usb_find_str_desc+0xc>
			if (i == str_index) {
    27f6:	42b4      	cmp	r4, r6
    27f8:	d0f3      	beq.n	27e2 <usb_find_str_desc+0xe>
	return (desc + usb_desc_len(desc));
    27fa:	18c0      	adds	r0, r0, r3
    27fc:	3401      	adds	r4, #1
    27fe:	e7ed      	b.n	27dc <usb_find_str_desc+0x8>
    2800:	00002761 	.word	0x00002761

00002804 <usb_device_cb_bulk_in>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool usb_device_cb_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    2804:	b510      	push	{r4, lr}
	/* Echo data. */
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    2806:	2140      	movs	r1, #64	; 0x40
    2808:	4802      	ldr	r0, [pc, #8]	; (2814 <usb_device_cb_bulk_in+0x10>)
    280a:	4b03      	ldr	r3, [pc, #12]	; (2818 <usb_device_cb_bulk_in+0x14>)
    280c:	4798      	blx	r3

	/* No error. */
	return false;
}
    280e:	2000      	movs	r0, #0
    2810:	bd10      	pop	{r4, pc}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	20000334 	.word	0x20000334
    2818:	00002109 	.word	0x00002109

0000281c <usb_device_cb_bulk_out>:
{
    281c:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    281e:	0011      	movs	r1, r2
    2820:	4802      	ldr	r0, [pc, #8]	; (282c <usb_device_cb_bulk_out+0x10>)
    2822:	4b03      	ldr	r3, [pc, #12]	; (2830 <usb_device_cb_bulk_out+0x14>)
    2824:	4798      	blx	r3
}
    2826:	2000      	movs	r0, #0
    2828:	bd10      	pop	{r4, pc}
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	20000334 	.word	0x20000334
    2830:	00002131 	.word	0x00002131

00002834 <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    2834:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (state.rs232.DTR) {
    2836:	2501      	movs	r5, #1
{
    2838:	aa01      	add	r2, sp, #4
    283a:	1c03      	adds	r3, r0, #0
    283c:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    283e:	421d      	tst	r5, r3
    2840:	d00a      	beq.n	2858 <usb_device_cb_state_c+0x24>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    2842:	4906      	ldr	r1, [pc, #24]	; (285c <usb_device_cb_state_c+0x28>)
    2844:	4c06      	ldr	r4, [pc, #24]	; (2860 <usb_device_cb_state_c+0x2c>)
    2846:	2000      	movs	r0, #0
    2848:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    284a:	4906      	ldr	r1, [pc, #24]	; (2864 <usb_device_cb_state_c+0x30>)
    284c:	0028      	movs	r0, r5
    284e:	47a0      	blx	r4
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    2850:	2140      	movs	r1, #64	; 0x40
    2852:	4805      	ldr	r0, [pc, #20]	; (2868 <usb_device_cb_state_c+0x34>)
    2854:	4b05      	ldr	r3, [pc, #20]	; (286c <usb_device_cb_state_c+0x38>)
    2856:	4798      	blx	r3
	}

	/* No error. */
	return false;
}
    2858:	2000      	movs	r0, #0
    285a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    285c:	0000281d 	.word	0x0000281d
    2860:	00002159 	.word	0x00002159
    2864:	00002805 	.word	0x00002805
    2868:	20000334 	.word	0x20000334
    286c:	00002109 	.word	0x00002109

00002870 <cdc_device_acm_init>:
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2870:	4806      	ldr	r0, [pc, #24]	; (288c <cdc_device_acm_init+0x1c>)
{
    2872:	b510      	push	{r4, lr}
	usbdc_init(ctrl_buffer);
    2874:	4b06      	ldr	r3, [pc, #24]	; (2890 <cdc_device_acm_init+0x20>)
    2876:	3040      	adds	r0, #64	; 0x40
    2878:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    287a:	4b06      	ldr	r3, [pc, #24]	; (2894 <cdc_device_acm_init+0x24>)
    287c:	4798      	blx	r3

	usbdc_start(single_desc);
    287e:	4b06      	ldr	r3, [pc, #24]	; (2898 <cdc_device_acm_init+0x28>)
    2880:	4806      	ldr	r0, [pc, #24]	; (289c <cdc_device_acm_init+0x2c>)
    2882:	4798      	blx	r3
	usbdc_attach();
    2884:	4b06      	ldr	r3, [pc, #24]	; (28a0 <cdc_device_acm_init+0x30>)
    2886:	4798      	blx	r3
}
    2888:	bd10      	pop	{r4, pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	20000334 	.word	0x20000334
    2890:	00002689 	.word	0x00002689
    2894:	000020c5 	.word	0x000020c5
    2898:	00002701 	.word	0x00002701
    289c:	20000008 	.word	0x20000008
    28a0:	00002735 	.word	0x00002735

000028a4 <cdcd_acm_example>:
 * The application will behave as a virtual COM.
 * - Open a HyperTerminal or other COM tools in PC side.
 * - Send out a character or string and it will echo the content received.
 */
void cdcd_acm_example(void)
{
    28a4:	b510      	push	{r4, lr}
	while (!cdcdf_acm_is_enabled()) {
    28a6:	4b04      	ldr	r3, [pc, #16]	; (28b8 <cdcd_acm_example+0x14>)
    28a8:	4798      	blx	r3
    28aa:	2800      	cmp	r0, #0
    28ac:	d0fb      	beq.n	28a6 <cdcd_acm_example+0x2>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    28ae:	4903      	ldr	r1, [pc, #12]	; (28bc <cdcd_acm_example+0x18>)
    28b0:	2003      	movs	r0, #3
    28b2:	4b03      	ldr	r3, [pc, #12]	; (28c0 <cdcd_acm_example+0x1c>)
    28b4:	4798      	blx	r3
    28b6:	e7fe      	b.n	28b6 <cdcd_acm_example+0x12>
    28b8:	00002191 	.word	0x00002191
    28bc:	00002835 	.word	0x00002835
    28c0:	00002159 	.word	0x00002159

000028c4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    28c4:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    28c6:	4b01      	ldr	r3, [pc, #4]	; (28cc <usb_init+0x8>)
    28c8:	4798      	blx	r3
}
    28ca:	bd10      	pop	{r4, pc}
    28cc:	00002871 	.word	0x00002871

000028d0 <__gnu_thumb1_case_sqi>:
    28d0:	b402      	push	{r1}
    28d2:	4671      	mov	r1, lr
    28d4:	0849      	lsrs	r1, r1, #1
    28d6:	0049      	lsls	r1, r1, #1
    28d8:	5609      	ldrsb	r1, [r1, r0]
    28da:	0049      	lsls	r1, r1, #1
    28dc:	448e      	add	lr, r1
    28de:	bc02      	pop	{r1}
    28e0:	4770      	bx	lr
    28e2:	46c0      	nop			; (mov r8, r8)

000028e4 <__gnu_thumb1_case_uqi>:
    28e4:	b402      	push	{r1}
    28e6:	4671      	mov	r1, lr
    28e8:	0849      	lsrs	r1, r1, #1
    28ea:	0049      	lsls	r1, r1, #1
    28ec:	5c09      	ldrb	r1, [r1, r0]
    28ee:	0049      	lsls	r1, r1, #1
    28f0:	448e      	add	lr, r1
    28f2:	bc02      	pop	{r1}
    28f4:	4770      	bx	lr
    28f6:	46c0      	nop			; (mov r8, r8)

000028f8 <__gnu_thumb1_case_shi>:
    28f8:	b403      	push	{r0, r1}
    28fa:	4671      	mov	r1, lr
    28fc:	0849      	lsrs	r1, r1, #1
    28fe:	0040      	lsls	r0, r0, #1
    2900:	0049      	lsls	r1, r1, #1
    2902:	5e09      	ldrsh	r1, [r1, r0]
    2904:	0049      	lsls	r1, r1, #1
    2906:	448e      	add	lr, r1
    2908:	bc03      	pop	{r0, r1}
    290a:	4770      	bx	lr

0000290c <__libc_init_array>:
    290c:	b570      	push	{r4, r5, r6, lr}
    290e:	2600      	movs	r6, #0
    2910:	4d0c      	ldr	r5, [pc, #48]	; (2944 <__libc_init_array+0x38>)
    2912:	4c0d      	ldr	r4, [pc, #52]	; (2948 <__libc_init_array+0x3c>)
    2914:	1b64      	subs	r4, r4, r5
    2916:	10a4      	asrs	r4, r4, #2
    2918:	42a6      	cmp	r6, r4
    291a:	d109      	bne.n	2930 <__libc_init_array+0x24>
    291c:	2600      	movs	r6, #0
    291e:	f000 f8b9 	bl	2a94 <_init>
    2922:	4d0a      	ldr	r5, [pc, #40]	; (294c <__libc_init_array+0x40>)
    2924:	4c0a      	ldr	r4, [pc, #40]	; (2950 <__libc_init_array+0x44>)
    2926:	1b64      	subs	r4, r4, r5
    2928:	10a4      	asrs	r4, r4, #2
    292a:	42a6      	cmp	r6, r4
    292c:	d105      	bne.n	293a <__libc_init_array+0x2e>
    292e:	bd70      	pop	{r4, r5, r6, pc}
    2930:	00b3      	lsls	r3, r6, #2
    2932:	58eb      	ldr	r3, [r5, r3]
    2934:	4798      	blx	r3
    2936:	3601      	adds	r6, #1
    2938:	e7ee      	b.n	2918 <__libc_init_array+0xc>
    293a:	00b3      	lsls	r3, r6, #2
    293c:	58eb      	ldr	r3, [r5, r3]
    293e:	4798      	blx	r3
    2940:	3601      	adds	r6, #1
    2942:	e7f2      	b.n	292a <__libc_init_array+0x1e>
    2944:	00002aa0 	.word	0x00002aa0
    2948:	00002aa0 	.word	0x00002aa0
    294c:	00002aa0 	.word	0x00002aa0
    2950:	00002aa4 	.word	0x00002aa4

00002954 <memcpy>:
    2954:	2300      	movs	r3, #0
    2956:	b510      	push	{r4, lr}
    2958:	429a      	cmp	r2, r3
    295a:	d100      	bne.n	295e <memcpy+0xa>
    295c:	bd10      	pop	{r4, pc}
    295e:	5ccc      	ldrb	r4, [r1, r3]
    2960:	54c4      	strb	r4, [r0, r3]
    2962:	3301      	adds	r3, #1
    2964:	e7f8      	b.n	2958 <memcpy+0x4>

00002966 <memset>:
    2966:	0003      	movs	r3, r0
    2968:	1882      	adds	r2, r0, r2
    296a:	4293      	cmp	r3, r2
    296c:	d100      	bne.n	2970 <memset+0xa>
    296e:	4770      	bx	lr
    2970:	7019      	strb	r1, [r3, #0]
    2972:	3301      	adds	r3, #1
    2974:	e7f9      	b.n	296a <memset+0x4>
    2976:	2e2e      	.short	0x2e2e
    2978:	6c70682f 	.word	0x6c70682f
    297c:	726f702f 	.word	0x726f702f
    2980:	70682f74 	.word	0x70682f74
    2984:	70675f6c 	.word	0x70675f6c
    2988:	625f6f69 	.word	0x625f6f69
    298c:	2e657361 	.word	0x2e657361
    2990:	0068      	.short	0x0068
    2992:	2e2e      	.short	0x2e2e
    2994:	6c61682f 	.word	0x6c61682f
    2998:	6372732f 	.word	0x6372732f
    299c:	6c61682f 	.word	0x6c61682f
    29a0:	616c665f 	.word	0x616c665f
    29a4:	632e6873 	.word	0x632e6873
    29a8:	00          	.byte	0x00
    29a9:	2e          	.byte	0x2e
    29aa:	2f2e      	.short	0x2f2e
    29ac:	2f6c6168 	.word	0x2f6c6168
    29b0:	2f637273 	.word	0x2f637273
    29b4:	5f6c6168 	.word	0x5f6c6168
    29b8:	5f697073 	.word	0x5f697073
    29bc:	79735f6d 	.word	0x79735f6d
    29c0:	632e636e 	.word	0x632e636e
    29c4:	00          	.byte	0x00
    29c5:	2e          	.byte	0x2e
    29c6:	2f2e      	.short	0x2f2e
    29c8:	2f6c6168 	.word	0x2f6c6168
    29cc:	6c697475 	.word	0x6c697475
    29d0:	72732f73 	.word	0x72732f73
    29d4:	74752f63 	.word	0x74752f63
    29d8:	5f736c69 	.word	0x5f736c69
    29dc:	7473696c 	.word	0x7473696c
    29e0:	632e      	.short	0x632e
    29e2:	00          	.byte	0x00
    29e3:	2e          	.byte	0x2e
    29e4:	70682f2e 	.word	0x70682f2e
    29e8:	766e2f6c 	.word	0x766e2f6c
    29ec:	7274636d 	.word	0x7274636d
    29f0:	70682f6c 	.word	0x70682f6c
    29f4:	766e5f6c 	.word	0x766e5f6c
    29f8:	7274636d 	.word	0x7274636d
    29fc:	00632e6c 	.word	0x00632e6c

00002a00 <_i2cms>:
	...

00002a18 <sercomspi_regs>:
    2a18:	0001000c 00020000 00000000 01ff0005     ................
    2a28:	11000c04 02000000 00000000 ff000500     ................
    2a38:	2e2e0501 6c70682f 7265732f 2f6d6f63     ..../hpl/sercom/
    2a48:	5f6c7068 63726573 632e6d6f 00000000     hpl_sercom.c....

00002a58 <_usb_ep_cfgs>:
    2a58:	200002b0 00000000 00000040 20000270     ... ....@...p.. 
    2a68:	00000000 00000040 20000230 00000000     ....@...0.. ....
    2a78:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    2a88:	73752f65 2e636462 00000063              e/usbdc.c...

00002a94 <_init>:
    2a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a9a:	bc08      	pop	{r3}
    2a9c:	469e      	mov	lr, r3
    2a9e:	4770      	bx	lr

00002aa0 <__init_array_start>:
    2aa0:	000000dd 	.word	0x000000dd

00002aa4 <_fini>:
    2aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2aaa:	bc08      	pop	{r3}
    2aac:	469e      	mov	lr, r3
    2aae:	4770      	bx	lr

00002ab0 <__fini_array_start>:
    2ab0:	000000b5 	.word	0x000000b5
